@foreign
struct __GLsync;

@foreign
typedef GLenum = uint;

@foreign
typedef GLboolean = uchar;

@foreign
typedef GLbitfield = uint;

@foreign
typedef GLbyte = schar;

@foreign
typedef GLshort = short;

@foreign
typedef GLint = int;

@foreign
typedef GLsizei = int;

@foreign
typedef GLubyte = uchar;

@foreign
typedef GLushort = ushort;

@foreign
typedef GLuint = uint;

@foreign
typedef GLfloat = float;

@foreign
typedef GLclampf = float;

@foreign
typedef GLdouble = double;

@foreign
typedef GLclampd = double;

@foreign
typedef GLvoid = void;

@foreign
func glAccum(op: GLenum, value: GLfloat);

@foreign
func glAlphaFunc(fn: GLenum, ref: GLclampf);

@foreign
func glAreTexturesResident(n: GLsizei, textures: GLuint*, residences: GLboolean*): GLboolean;

@foreign
func glArrayElement(i: GLint);

@foreign
func glBegin(mode: GLenum);

@foreign
func glBindTexture(target: GLenum, texture: GLuint);

@foreign
func glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: GLubyte*);

@foreign
func glBlendFunc(sfactor: GLenum, dfactor: GLenum);

@foreign
func glCallList(list: GLuint);

@foreign
func glCallLists(n: GLsizei, type: GLenum, lists: GLvoid*);

@foreign
func glClear(mask: GLbitfield);

@foreign
func glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);

@foreign
func glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf);

@foreign
func glClearDepth(depth: GLclampd);

@foreign
func glClearIndex(c: GLfloat);

@foreign
func glClearStencil(s: GLint);

@foreign
func glClipPlane(plane: GLenum, equation: GLdouble*);

@foreign
func glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte);

@foreign
func glColor3bv(v: GLbyte*);

@foreign
func glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble);

@foreign
func glColor3dv(v: GLdouble*);

@foreign
func glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat);

@foreign
func glColor3fv(v: GLfloat*);

@foreign
func glColor3i(red: GLint, green: GLint, blue: GLint);

@foreign
func glColor3iv(v: GLint*);

@foreign
func glColor3s(red: GLshort, green: GLshort, blue: GLshort);

@foreign
func glColor3sv(v: GLshort*);

@foreign
func glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte);

@foreign
func glColor3ubv(v: GLubyte*);

@foreign
func glColor3ui(red: GLuint, green: GLuint, blue: GLuint);

@foreign
func glColor3uiv(v: GLuint*);

@foreign
func glColor3us(red: GLushort, green: GLushort, blue: GLushort);

@foreign
func glColor3usv(v: GLushort*);

@foreign
func glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte);

@foreign
func glColor4bv(v: GLbyte*);

@foreign
func glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble);

@foreign
func glColor4dv(v: GLdouble*);

@foreign
func glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);

@foreign
func glColor4fv(v: GLfloat*);

@foreign
func glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint);

@foreign
func glColor4iv(v: GLint*);

@foreign
func glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort);

@foreign
func glColor4sv(v: GLshort*);

@foreign
func glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte);

@foreign
func glColor4ubv(v: GLubyte*);

@foreign
func glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint);

@foreign
func glColor4uiv(v: GLuint*);

@foreign
func glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort);

@foreign
func glColor4usv(v: GLushort*);

@foreign
func glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean);

@foreign
func glColorMaterial(face: GLenum, mode: GLenum);

@foreign
func glColorPointer(size: GLint, type: GLenum, stride: GLsizei, pointer: GLvoid*);

@foreign
func glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type: GLenum);

@foreign
func glCopyTexImage1D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint);

@foreign
func glCopyTexImage2D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint);

@foreign
func glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);

@foreign
func glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glCullFace(mode: GLenum);

@foreign
func glDeleteLists(list: GLuint, range: GLsizei);

@foreign
func glDeleteTextures(n: GLsizei, textures: GLuint*);

@foreign
func glDepthFunc(fn: GLenum);

@foreign
func glDepthMask(flag: GLboolean);

@foreign
func glDepthRange(zNear: GLclampd, zFar: GLclampd);

@foreign
func glDisable(cap: GLenum);

@foreign
func glDisableClientState(array: GLenum);

@foreign
func glDrawArrays(mode: GLenum, first: GLint, count: GLsizei);

@foreign
func glDrawBuffer(mode: GLenum);

@foreign
func glDrawElements(mode: GLenum, count: GLsizei, type: GLenum, indices: GLvoid*);

@foreign
func glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: GLvoid*);

@foreign
func glEdgeFlag(flag: GLboolean);

@foreign
func glEdgeFlagPointer(stride: GLsizei, pointer: GLvoid*);

@foreign
func glEdgeFlagv(flag: GLboolean*);

@foreign
func glEnable(cap: GLenum);

@foreign
func glEnableClientState(array: GLenum);

@foreign
func glEnd();

@foreign
func glEndList();

@foreign
func glEvalCoord1d(u: GLdouble);

@foreign
func glEvalCoord1dv(u: GLdouble*);

@foreign
func glEvalCoord1f(u: GLfloat);

@foreign
func glEvalCoord1fv(u: GLfloat*);

@foreign
func glEvalCoord2d(u: GLdouble, v: GLdouble);

@foreign
func glEvalCoord2dv(u: GLdouble*);

@foreign
func glEvalCoord2f(u: GLfloat, v: GLfloat);

@foreign
func glEvalCoord2fv(u: GLfloat*);

@foreign
func glEvalMesh1(mode: GLenum, i1: GLint, i2: GLint);

@foreign
func glEvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint);

@foreign
func glEvalPoint1(i: GLint);

@foreign
func glEvalPoint2(i: GLint, j: GLint);

@foreign
func glFeedbackBuffer(size: GLsizei, type: GLenum, buffer: GLfloat*);

@foreign
func glFinish();

@foreign
func glFlush();

@foreign
func glFogf(pname: GLenum, param: GLfloat);

@foreign
func glFogfv(pname: GLenum, params: GLfloat*);

@foreign
func glFogi(pname: GLenum, param: GLint);

@foreign
func glFogiv(pname: GLenum, params: GLint*);

@foreign
func glFrontFace(mode: GLenum);

@foreign
func glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble);

@foreign
func glGenLists(range: GLsizei): GLuint;

@foreign
func glGenTextures(n: GLsizei, textures: GLuint*);

@foreign
func glGetBooleanv(pname: GLenum, params: GLboolean*);

@foreign
func glGetClipPlane(plane: GLenum, equation: GLdouble*);

@foreign
func glGetDoublev(pname: GLenum, params: GLdouble*);

@foreign
func glGetError(): GLenum;

@foreign
func glGetFloatv(pname: GLenum, params: GLfloat*);

@foreign
func glGetIntegerv(pname: GLenum, params: GLint*);

@foreign
func glGetLightfv(light: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetLightiv(light: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetMapdv(target: GLenum, query: GLenum, v: GLdouble*);

@foreign
func glGetMapfv(target: GLenum, query: GLenum, v: GLfloat*);

@foreign
func glGetMapiv(target: GLenum, query: GLenum, v: GLint*);

@foreign
func glGetMaterialfv(face: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetMaterialiv(face: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetPixelMapfv(map: GLenum, values: GLfloat*);

@foreign
func glGetPixelMapuiv(map: GLenum, values: GLuint*);

@foreign
func glGetPixelMapusv(map: GLenum, values: GLushort*);

@foreign
func glGetPointerv(pname: GLenum, params: GLvoid**);

@foreign
func glGetPolygonStipple(mask: GLubyte*);

@foreign
func glGetString(name: GLenum): GLubyte*;

@foreign
func glGetTexEnvfv(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetTexEnviv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetTexGendv(coord: GLenum, pname: GLenum, params: GLdouble*);

@foreign
func glGetTexGenfv(coord: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetTexGeniv(coord: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetTexImage(target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: GLvoid*);

@foreign
func glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: GLfloat*);

@foreign
func glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: GLint*);

@foreign
func glGetTexParameterfv(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetTexParameteriv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glHint(target: GLenum, mode: GLenum);

@foreign
func glIndexMask(mask: GLuint);

@foreign
func glIndexPointer(type: GLenum, stride: GLsizei, pointer: GLvoid*);

@foreign
func glIndexd(c: GLdouble);

@foreign
func glIndexdv(c: GLdouble*);

@foreign
func glIndexf(c: GLfloat);

@foreign
func glIndexfv(c: GLfloat*);

@foreign
func glIndexi(c: GLint);

@foreign
func glIndexiv(c: GLint*);

@foreign
func glIndexs(c: GLshort);

@foreign
func glIndexsv(c: GLshort*);

@foreign
func glIndexub(c: GLubyte);

@foreign
func glIndexubv(c: GLubyte*);

@foreign
func glInitNames();

@foreign
func glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: GLvoid*);

@foreign
func glIsEnabled(cap: GLenum): GLboolean;

@foreign
func glIsList(list: GLuint): GLboolean;

@foreign
func glIsTexture(texture: GLuint): GLboolean;

@foreign
func glLightModelf(pname: GLenum, param: GLfloat);

@foreign
func glLightModelfv(pname: GLenum, params: GLfloat*);

@foreign
func glLightModeli(pname: GLenum, param: GLint);

@foreign
func glLightModeliv(pname: GLenum, params: GLint*);

@foreign
func glLightf(light: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glLightfv(light: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glLighti(light: GLenum, pname: GLenum, param: GLint);

@foreign
func glLightiv(light: GLenum, pname: GLenum, params: GLint*);

@foreign
func glLineStipple(factor: GLint, pattern: GLushort);

@foreign
func glLineWidth(width: GLfloat);

@foreign
func glListBase(base: GLuint);

@foreign
func glLoadIdentity();

@foreign
func glLoadMatrixd(m: GLdouble*);

@foreign
func glLoadMatrixf(m: GLfloat*);

@foreign
func glLoadName(name: GLuint);

@foreign
func glLogicOp(opcode: GLenum);

@foreign
func glMap1d(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: GLdouble*);

@foreign
func glMap1f(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: GLfloat*);

@foreign
func glMap2d(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: GLdouble*);

@foreign
func glMap2f(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: GLfloat*);

@foreign
func glMapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble);

@foreign
func glMapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat);

@foreign
func glMapGrid2d(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble);

@foreign
func glMapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat);

@foreign
func glMaterialf(face: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glMaterialfv(face: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glMateriali(face: GLenum, pname: GLenum, param: GLint);

@foreign
func glMaterialiv(face: GLenum, pname: GLenum, params: GLint*);

@foreign
func glMatrixMode(mode: GLenum);

@foreign
func glMultMatrixd(m: GLdouble*);

@foreign
func glMultMatrixf(m: GLfloat*);

@foreign
func glNewList(list: GLuint, mode: GLenum);

@foreign
func glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte);

@foreign
func glNormal3bv(v: GLbyte*);

@foreign
func glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble);

@foreign
func glNormal3dv(v: GLdouble*);

@foreign
func glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat);

@foreign
func glNormal3fv(v: GLfloat*);

@foreign
func glNormal3i(nx: GLint, ny: GLint, nz: GLint);

@foreign
func glNormal3iv(v: GLint*);

@foreign
func glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort);

@foreign
func glNormal3sv(v: GLshort*);

@foreign
func glNormalPointer(type: GLenum, stride: GLsizei, pointer: GLvoid*);

@foreign
func glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble);

@foreign
func glPassThrough(token: GLfloat);

@foreign
func glPixelMapfv(map: GLenum, mapsize: GLsizei, values: GLfloat*);

@foreign
func glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: GLuint*);

@foreign
func glPixelMapusv(map: GLenum, mapsize: GLsizei, values: GLushort*);

@foreign
func glPixelStoref(pname: GLenum, param: GLfloat);

@foreign
func glPixelStorei(pname: GLenum, param: GLint);

@foreign
func glPixelTransferf(pname: GLenum, param: GLfloat);

@foreign
func glPixelTransferi(pname: GLenum, param: GLint);

@foreign
func glPixelZoom(xfactor: GLfloat, yfactor: GLfloat);

@foreign
func glPointSize(size: GLfloat);

@foreign
func glPolygonMode(face: GLenum, mode: GLenum);

@foreign
func glPolygonOffset(factor: GLfloat, units: GLfloat);

@foreign
func glPolygonStipple(mask: GLubyte*);

@foreign
func glPopAttrib();

@foreign
func glPopClientAttrib();

@foreign
func glPopMatrix();

@foreign
func glPopName();

@foreign
func glPrioritizeTextures(n: GLsizei, textures: GLuint*, priorities: GLclampf*);

@foreign
func glPushAttrib(mask: GLbitfield);

@foreign
func glPushClientAttrib(mask: GLbitfield);

@foreign
func glPushMatrix();

@foreign
func glPushName(name: GLuint);

@foreign
func glRasterPos2d(x: GLdouble, y: GLdouble);

@foreign
func glRasterPos2dv(v: GLdouble*);

@foreign
func glRasterPos2f(x: GLfloat, y: GLfloat);

@foreign
func glRasterPos2fv(v: GLfloat*);

@foreign
func glRasterPos2i(x: GLint, y: GLint);

@foreign
func glRasterPos2iv(v: GLint*);

@foreign
func glRasterPos2s(x: GLshort, y: GLshort);

@foreign
func glRasterPos2sv(v: GLshort*);

@foreign
func glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glRasterPos3dv(v: GLdouble*);

@foreign
func glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glRasterPos3fv(v: GLfloat*);

@foreign
func glRasterPos3i(x: GLint, y: GLint, z: GLint);

@foreign
func glRasterPos3iv(v: GLint*);

@foreign
func glRasterPos3s(x: GLshort, y: GLshort, z: GLshort);

@foreign
func glRasterPos3sv(v: GLshort*);

@foreign
func glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glRasterPos4dv(v: GLdouble*);

@foreign
func glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glRasterPos4fv(v: GLfloat*);

@foreign
func glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
func glRasterPos4iv(v: GLint*);

@foreign
func glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort);

@foreign
func glRasterPos4sv(v: GLshort*);

@foreign
func glReadBuffer(mode: GLenum);

@foreign
func glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: GLvoid*);

@foreign
func glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble);

@foreign
func glRectdv(v1: GLdouble*, v2: GLdouble*);

@foreign
func glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat);

@foreign
func glRectfv(v1: GLfloat*, v2: GLfloat*);

@foreign
func glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint);

@foreign
func glRectiv(v1: GLint*, v2: GLint*);

@foreign
func glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort);

@foreign
func glRectsv(v1: GLshort*, v2: GLshort*);

@foreign
func glRenderMode(mode: GLenum): GLint;

@foreign
func glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glScaled(x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glScalef(x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glSelectBuffer(size: GLsizei, buffer: GLuint*);

@foreign
func glShadeModel(mode: GLenum);

@foreign
func glStencilFunc(fn: GLenum, ref: GLint, mask: GLuint);

@foreign
func glStencilMask(mask: GLuint);

@foreign
func glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum);

@foreign
func glTexCoord1d(s: GLdouble);

@foreign
func glTexCoord1dv(v: GLdouble*);

@foreign
func glTexCoord1f(s: GLfloat);

@foreign
func glTexCoord1fv(v: GLfloat*);

@foreign
func glTexCoord1i(s: GLint);

@foreign
func glTexCoord1iv(v: GLint*);

@foreign
func glTexCoord1s(s: GLshort);

@foreign
func glTexCoord1sv(v: GLshort*);

@foreign
func glTexCoord2d(s: GLdouble, t: GLdouble);

@foreign
func glTexCoord2dv(v: GLdouble*);

@foreign
func glTexCoord2f(s: GLfloat, t: GLfloat);

@foreign
func glTexCoord2fv(v: GLfloat*);

@foreign
func glTexCoord2i(s: GLint, t: GLint);

@foreign
func glTexCoord2iv(v: GLint*);

@foreign
func glTexCoord2s(s: GLshort, t: GLshort);

@foreign
func glTexCoord2sv(v: GLshort*);

@foreign
func glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble);

@foreign
func glTexCoord3dv(v: GLdouble*);

@foreign
func glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat);

@foreign
func glTexCoord3fv(v: GLfloat*);

@foreign
func glTexCoord3i(s: GLint, t: GLint, r: GLint);

@foreign
func glTexCoord3iv(v: GLint*);

@foreign
func glTexCoord3s(s: GLshort, t: GLshort, r: GLshort);

@foreign
func glTexCoord3sv(v: GLshort*);

@foreign
func glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);

@foreign
func glTexCoord4dv(v: GLdouble*);

@foreign
func glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);

@foreign
func glTexCoord4fv(v: GLfloat*);

@foreign
func glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint);

@foreign
func glTexCoord4iv(v: GLint*);

@foreign
func glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort);

@foreign
func glTexCoord4sv(v: GLshort*);

@foreign
func glTexCoordPointer(size: GLint, type: GLenum, stride: GLsizei, pointer: GLvoid*);

@foreign
func glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glTexEnvfv(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glTexEnvi(target: GLenum, pname: GLenum, param: GLint);

@foreign
func glTexEnviv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glTexGend(coord: GLenum, pname: GLenum, param: GLdouble);

@foreign
func glTexGendv(coord: GLenum, pname: GLenum, params: GLdouble*);

@foreign
func glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glTexGenfv(coord: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glTexGeni(coord: GLenum, pname: GLenum, param: GLint);

@foreign
func glTexGeniv(coord: GLenum, pname: GLenum, params: GLint*);

@foreign
func glTexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: GLvoid*);

@foreign
func glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: GLvoid*);

@foreign
func glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glTexParameterfv(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glTexParameteri(target: GLenum, pname: GLenum, param: GLint);

@foreign
func glTexParameteriv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: GLvoid*);

@foreign
func glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: GLvoid*);

@foreign
func glTranslated(x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glVertex2d(x: GLdouble, y: GLdouble);

@foreign
func glVertex2dv(v: GLdouble*);

@foreign
func glVertex2f(x: GLfloat, y: GLfloat);

@foreign
func glVertex2fv(v: GLfloat*);

@foreign
func glVertex2i(x: GLint, y: GLint);

@foreign
func glVertex2iv(v: GLint*);

@foreign
func glVertex2s(x: GLshort, y: GLshort);

@foreign
func glVertex2sv(v: GLshort*);

@foreign
func glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glVertex3dv(v: GLdouble*);

@foreign
func glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glVertex3fv(v: GLfloat*);

@foreign
func glVertex3i(x: GLint, y: GLint, z: GLint);

@foreign
func glVertex3iv(v: GLint*);

@foreign
func glVertex3s(x: GLshort, y: GLshort, z: GLshort);

@foreign
func glVertex3sv(v: GLshort*);

@foreign
func glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glVertex4dv(v: GLdouble*);

@foreign
func glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glVertex4fv(v: GLfloat*);

@foreign
func glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
func glVertex4iv(v: GLint*);

@foreign
func glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort);

@foreign
func glVertex4sv(v: GLshort*);

@foreign
func glVertexPointer(size: GLint, type: GLenum, stride: GLsizei, pointer: GLvoid*);

@foreign
func glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLARRAYELEMENTEXTPROC = func(i: GLint);

@foreign
typedef PFNGLDRAWARRAYSEXTPROC = func(mode: GLenum, first: GLint, count: GLsizei);

@foreign
typedef PFNGLVERTEXPOINTEREXTPROC = func(size: GLint, type: GLenum, stride: GLsizei, count: GLsizei, pointer: GLvoid*);

@foreign
typedef PFNGLNORMALPOINTEREXTPROC = func(type: GLenum, stride: GLsizei, count: GLsizei, pointer: GLvoid*);

@foreign
typedef PFNGLCOLORPOINTEREXTPROC = func(size: GLint, type: GLenum, stride: GLsizei, count: GLsizei, pointer: GLvoid*);

@foreign
typedef PFNGLINDEXPOINTEREXTPROC = func(type: GLenum, stride: GLsizei, count: GLsizei, pointer: GLvoid*);

@foreign
typedef PFNGLTEXCOORDPOINTEREXTPROC = func(size: GLint, type: GLenum, stride: GLsizei, count: GLsizei, pointer: GLvoid*);

@foreign
typedef PFNGLEDGEFLAGPOINTEREXTPROC = func(stride: GLsizei, count: GLsizei, pointer: GLboolean*);

@foreign
typedef PFNGLGETPOINTERVEXTPROC = func(pname: GLenum, params: GLvoid**);

@foreign
typedef PFNGLARRAYELEMENTARRAYEXTPROC = func(mode: GLenum, count: GLsizei, pi: GLvoid*);

@foreign
typedef PFNGLDRAWRANGEELEMENTSWINPROC = func(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: GLvoid*);

@foreign
typedef PFNGLADDSWAPHINTRECTWINPROC = func(x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLCOLORTABLEEXTPROC = func(target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, type: GLenum, data: GLvoid*);

@foreign
typedef PFNGLCOLORSUBTABLEEXTPROC = func(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type: GLenum, data: GLvoid*);

@foreign
typedef PFNGLGETCOLORTABLEEXTPROC = func(target: GLenum, format: GLenum, type: GLenum, data: GLvoid*);

@foreign
typedef PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLDRAWRANGEELEMENTSPROC = func(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: void const*);

@foreign
typedef PFNGLTEXIMAGE3DPROC = func(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXSUBIMAGE3DPROC = func(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLCOPYTEXSUBIMAGE3DPROC = func(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glDrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: void const*);

@foreign
func glTexImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glCopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLACTIVETEXTUREPROC = func(texture: GLenum);

@foreign
typedef PFNGLSAMPLECOVERAGEPROC = func(value: GLfloat, invert: GLboolean);

@foreign
typedef PFNGLCOMPRESSEDTEXIMAGE3DPROC = func(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXIMAGE2DPROC = func(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXIMAGE1DPROC = func(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = func(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = func(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = func(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLGETCOMPRESSEDTEXIMAGEPROC = func(target: GLenum, level: GLint, img: void*);

@foreign
typedef PFNGLCLIENTACTIVETEXTUREPROC = func(texture: GLenum);

@foreign
typedef PFNGLMULTITEXCOORD1DPROC = func(target: GLenum, s: GLdouble);

@foreign
typedef PFNGLMULTITEXCOORD1DVPROC = func(target: GLenum, v: GLdouble*);

@foreign
typedef PFNGLMULTITEXCOORD1FPROC = func(target: GLenum, s: GLfloat);

@foreign
typedef PFNGLMULTITEXCOORD1FVPROC = func(target: GLenum, v: GLfloat*);

@foreign
typedef PFNGLMULTITEXCOORD1IPROC = func(target: GLenum, s: GLint);

@foreign
typedef PFNGLMULTITEXCOORD1IVPROC = func(target: GLenum, v: GLint*);

@foreign
typedef PFNGLMULTITEXCOORD1SPROC = func(target: GLenum, s: GLshort);

@foreign
typedef PFNGLMULTITEXCOORD1SVPROC = func(target: GLenum, v: GLshort*);

@foreign
typedef PFNGLMULTITEXCOORD2DPROC = func(target: GLenum, s: GLdouble, t: GLdouble);

@foreign
typedef PFNGLMULTITEXCOORD2DVPROC = func(target: GLenum, v: GLdouble*);

@foreign
typedef PFNGLMULTITEXCOORD2FPROC = func(target: GLenum, s: GLfloat, t: GLfloat);

@foreign
typedef PFNGLMULTITEXCOORD2FVPROC = func(target: GLenum, v: GLfloat*);

@foreign
typedef PFNGLMULTITEXCOORD2IPROC = func(target: GLenum, s: GLint, t: GLint);

@foreign
typedef PFNGLMULTITEXCOORD2IVPROC = func(target: GLenum, v: GLint*);

@foreign
typedef PFNGLMULTITEXCOORD2SPROC = func(target: GLenum, s: GLshort, t: GLshort);

@foreign
typedef PFNGLMULTITEXCOORD2SVPROC = func(target: GLenum, v: GLshort*);

@foreign
typedef PFNGLMULTITEXCOORD3DPROC = func(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble);

@foreign
typedef PFNGLMULTITEXCOORD3DVPROC = func(target: GLenum, v: GLdouble*);

@foreign
typedef PFNGLMULTITEXCOORD3FPROC = func(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat);

@foreign
typedef PFNGLMULTITEXCOORD3FVPROC = func(target: GLenum, v: GLfloat*);

@foreign
typedef PFNGLMULTITEXCOORD3IPROC = func(target: GLenum, s: GLint, t: GLint, r: GLint);

@foreign
typedef PFNGLMULTITEXCOORD3IVPROC = func(target: GLenum, v: GLint*);

@foreign
typedef PFNGLMULTITEXCOORD3SPROC = func(target: GLenum, s: GLshort, t: GLshort, r: GLshort);

@foreign
typedef PFNGLMULTITEXCOORD3SVPROC = func(target: GLenum, v: GLshort*);

@foreign
typedef PFNGLMULTITEXCOORD4DPROC = func(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);

@foreign
typedef PFNGLMULTITEXCOORD4DVPROC = func(target: GLenum, v: GLdouble*);

@foreign
typedef PFNGLMULTITEXCOORD4FPROC = func(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);

@foreign
typedef PFNGLMULTITEXCOORD4FVPROC = func(target: GLenum, v: GLfloat*);

@foreign
typedef PFNGLMULTITEXCOORD4IPROC = func(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint);

@foreign
typedef PFNGLMULTITEXCOORD4IVPROC = func(target: GLenum, v: GLint*);

@foreign
typedef PFNGLMULTITEXCOORD4SPROC = func(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort);

@foreign
typedef PFNGLMULTITEXCOORD4SVPROC = func(target: GLenum, v: GLshort*);

@foreign
typedef PFNGLLOADTRANSPOSEMATRIXFPROC = func(m: GLfloat*);

@foreign
typedef PFNGLLOADTRANSPOSEMATRIXDPROC = func(m: GLdouble*);

@foreign
typedef PFNGLMULTTRANSPOSEMATRIXFPROC = func(m: GLfloat*);

@foreign
typedef PFNGLMULTTRANSPOSEMATRIXDPROC = func(m: GLdouble*);

@foreign
func glActiveTexture(texture: GLenum);

@foreign
func glSampleCoverage(value: GLfloat, invert: GLboolean);

@foreign
func glCompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: void const*);

@foreign
func glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: void const*);

@foreign
func glCompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: void const*);

@foreign
func glCompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
func glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
func glCompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
func glGetCompressedTexImage(target: GLenum, level: GLint, img: void*);

@foreign
func glClientActiveTexture(texture: GLenum);

@foreign
func glMultiTexCoord1d(target: GLenum, s: GLdouble);

@foreign
func glMultiTexCoord1dv(target: GLenum, v: GLdouble*);

@foreign
func glMultiTexCoord1f(target: GLenum, s: GLfloat);

@foreign
func glMultiTexCoord1fv(target: GLenum, v: GLfloat*);

@foreign
func glMultiTexCoord1i(target: GLenum, s: GLint);

@foreign
func glMultiTexCoord1iv(target: GLenum, v: GLint*);

@foreign
func glMultiTexCoord1s(target: GLenum, s: GLshort);

@foreign
func glMultiTexCoord1sv(target: GLenum, v: GLshort*);

@foreign
func glMultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble);

@foreign
func glMultiTexCoord2dv(target: GLenum, v: GLdouble*);

@foreign
func glMultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat);

@foreign
func glMultiTexCoord2fv(target: GLenum, v: GLfloat*);

@foreign
func glMultiTexCoord2i(target: GLenum, s: GLint, t: GLint);

@foreign
func glMultiTexCoord2iv(target: GLenum, v: GLint*);

@foreign
func glMultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort);

@foreign
func glMultiTexCoord2sv(target: GLenum, v: GLshort*);

@foreign
func glMultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble);

@foreign
func glMultiTexCoord3dv(target: GLenum, v: GLdouble*);

@foreign
func glMultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat);

@foreign
func glMultiTexCoord3fv(target: GLenum, v: GLfloat*);

@foreign
func glMultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint);

@foreign
func glMultiTexCoord3iv(target: GLenum, v: GLint*);

@foreign
func glMultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort);

@foreign
func glMultiTexCoord3sv(target: GLenum, v: GLshort*);

@foreign
func glMultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);

@foreign
func glMultiTexCoord4dv(target: GLenum, v: GLdouble*);

@foreign
func glMultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);

@foreign
func glMultiTexCoord4fv(target: GLenum, v: GLfloat*);

@foreign
func glMultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint);

@foreign
func glMultiTexCoord4iv(target: GLenum, v: GLint*);

@foreign
func glMultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort);

@foreign
func glMultiTexCoord4sv(target: GLenum, v: GLshort*);

@foreign
func glLoadTransposeMatrixf(m: GLfloat*);

@foreign
func glLoadTransposeMatrixd(m: GLdouble*);

@foreign
func glMultTransposeMatrixf(m: GLfloat*);

@foreign
func glMultTransposeMatrixd(m: GLdouble*);

@foreign
typedef PFNGLBLENDFUNCSEPARATEPROC = func(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum);

@foreign
typedef PFNGLMULTIDRAWARRAYSPROC = func(mode: GLenum, first: GLint*, count: GLsizei*, drawcount: GLsizei);

@foreign
typedef PFNGLMULTIDRAWELEMENTSPROC = func(mode: GLenum, count: GLsizei*, type: GLenum, indices: void const* const*, drawcount: GLsizei);

@foreign
typedef PFNGLPOINTPARAMETERFPROC = func(pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLPOINTPARAMETERFVPROC = func(pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLPOINTPARAMETERIPROC = func(pname: GLenum, param: GLint);

@foreign
typedef PFNGLPOINTPARAMETERIVPROC = func(pname: GLenum, params: GLint*);

@foreign
typedef PFNGLFOGCOORDFPROC = func(coord: GLfloat);

@foreign
typedef PFNGLFOGCOORDFVPROC = func(coord: GLfloat*);

@foreign
typedef PFNGLFOGCOORDDPROC = func(coord: GLdouble);

@foreign
typedef PFNGLFOGCOORDDVPROC = func(coord: GLdouble*);

@foreign
typedef PFNGLFOGCOORDPOINTERPROC = func(type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLSECONDARYCOLOR3BPROC = func(red: GLbyte, green: GLbyte, blue: GLbyte);

@foreign
typedef PFNGLSECONDARYCOLOR3BVPROC = func(v: GLbyte*);

@foreign
typedef PFNGLSECONDARYCOLOR3DPROC = func(red: GLdouble, green: GLdouble, blue: GLdouble);

@foreign
typedef PFNGLSECONDARYCOLOR3DVPROC = func(v: GLdouble*);

@foreign
typedef PFNGLSECONDARYCOLOR3FPROC = func(red: GLfloat, green: GLfloat, blue: GLfloat);

@foreign
typedef PFNGLSECONDARYCOLOR3FVPROC = func(v: GLfloat*);

@foreign
typedef PFNGLSECONDARYCOLOR3IPROC = func(red: GLint, green: GLint, blue: GLint);

@foreign
typedef PFNGLSECONDARYCOLOR3IVPROC = func(v: GLint*);

@foreign
typedef PFNGLSECONDARYCOLOR3SPROC = func(red: GLshort, green: GLshort, blue: GLshort);

@foreign
typedef PFNGLSECONDARYCOLOR3SVPROC = func(v: GLshort*);

@foreign
typedef PFNGLSECONDARYCOLOR3UBPROC = func(red: GLubyte, green: GLubyte, blue: GLubyte);

@foreign
typedef PFNGLSECONDARYCOLOR3UBVPROC = func(v: GLubyte*);

@foreign
typedef PFNGLSECONDARYCOLOR3UIPROC = func(red: GLuint, green: GLuint, blue: GLuint);

@foreign
typedef PFNGLSECONDARYCOLOR3UIVPROC = func(v: GLuint*);

@foreign
typedef PFNGLSECONDARYCOLOR3USPROC = func(red: GLushort, green: GLushort, blue: GLushort);

@foreign
typedef PFNGLSECONDARYCOLOR3USVPROC = func(v: GLushort*);

@foreign
typedef PFNGLSECONDARYCOLORPOINTERPROC = func(size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLWINDOWPOS2DPROC = func(x: GLdouble, y: GLdouble);

@foreign
typedef PFNGLWINDOWPOS2DVPROC = func(v: GLdouble*);

@foreign
typedef PFNGLWINDOWPOS2FPROC = func(x: GLfloat, y: GLfloat);

@foreign
typedef PFNGLWINDOWPOS2FVPROC = func(v: GLfloat*);

@foreign
typedef PFNGLWINDOWPOS2IPROC = func(x: GLint, y: GLint);

@foreign
typedef PFNGLWINDOWPOS2IVPROC = func(v: GLint*);

@foreign
typedef PFNGLWINDOWPOS2SPROC = func(x: GLshort, y: GLshort);

@foreign
typedef PFNGLWINDOWPOS2SVPROC = func(v: GLshort*);

@foreign
typedef PFNGLWINDOWPOS3DPROC = func(x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLWINDOWPOS3DVPROC = func(v: GLdouble*);

@foreign
typedef PFNGLWINDOWPOS3FPROC = func(x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLWINDOWPOS3FVPROC = func(v: GLfloat*);

@foreign
typedef PFNGLWINDOWPOS3IPROC = func(x: GLint, y: GLint, z: GLint);

@foreign
typedef PFNGLWINDOWPOS3IVPROC = func(v: GLint*);

@foreign
typedef PFNGLWINDOWPOS3SPROC = func(x: GLshort, y: GLshort, z: GLshort);

@foreign
typedef PFNGLWINDOWPOS3SVPROC = func(v: GLshort*);

@foreign
typedef PFNGLBLENDCOLORPROC = func(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);

@foreign
typedef PFNGLBLENDEQUATIONPROC = func(mode: GLenum);

@foreign
func glBlendFuncSeparate(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum);

@foreign
func glMultiDrawArrays(mode: GLenum, first: GLint*, count: GLsizei*, drawcount: GLsizei);

@foreign
func glMultiDrawElements(mode: GLenum, count: GLsizei*, type: GLenum, indices: void const* const*, drawcount: GLsizei);

@foreign
func glPointParameterf(pname: GLenum, param: GLfloat);

@foreign
func glPointParameterfv(pname: GLenum, params: GLfloat*);

@foreign
func glPointParameteri(pname: GLenum, param: GLint);

@foreign
func glPointParameteriv(pname: GLenum, params: GLint*);

@foreign
func glFogCoordf(coord: GLfloat);

@foreign
func glFogCoordfv(coord: GLfloat*);

@foreign
func glFogCoordd(coord: GLdouble);

@foreign
func glFogCoorddv(coord: GLdouble*);

@foreign
func glFogCoordPointer(type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glSecondaryColor3b(red: GLbyte, green: GLbyte, blue: GLbyte);

@foreign
func glSecondaryColor3bv(v: GLbyte*);

@foreign
func glSecondaryColor3d(red: GLdouble, green: GLdouble, blue: GLdouble);

@foreign
func glSecondaryColor3dv(v: GLdouble*);

@foreign
func glSecondaryColor3f(red: GLfloat, green: GLfloat, blue: GLfloat);

@foreign
func glSecondaryColor3fv(v: GLfloat*);

@foreign
func glSecondaryColor3i(red: GLint, green: GLint, blue: GLint);

@foreign
func glSecondaryColor3iv(v: GLint*);

@foreign
func glSecondaryColor3s(red: GLshort, green: GLshort, blue: GLshort);

@foreign
func glSecondaryColor3sv(v: GLshort*);

@foreign
func glSecondaryColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte);

@foreign
func glSecondaryColor3ubv(v: GLubyte*);

@foreign
func glSecondaryColor3ui(red: GLuint, green: GLuint, blue: GLuint);

@foreign
func glSecondaryColor3uiv(v: GLuint*);

@foreign
func glSecondaryColor3us(red: GLushort, green: GLushort, blue: GLushort);

@foreign
func glSecondaryColor3usv(v: GLushort*);

@foreign
func glSecondaryColorPointer(size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glWindowPos2d(x: GLdouble, y: GLdouble);

@foreign
func glWindowPos2dv(v: GLdouble*);

@foreign
func glWindowPos2f(x: GLfloat, y: GLfloat);

@foreign
func glWindowPos2fv(v: GLfloat*);

@foreign
func glWindowPos2i(x: GLint, y: GLint);

@foreign
func glWindowPos2iv(v: GLint*);

@foreign
func glWindowPos2s(x: GLshort, y: GLshort);

@foreign
func glWindowPos2sv(v: GLshort*);

@foreign
func glWindowPos3d(x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glWindowPos3dv(v: GLdouble*);

@foreign
func glWindowPos3f(x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glWindowPos3fv(v: GLfloat*);

@foreign
func glWindowPos3i(x: GLint, y: GLint, z: GLint);

@foreign
func glWindowPos3iv(v: GLint*);

@foreign
func glWindowPos3s(x: GLshort, y: GLshort, z: GLshort);

@foreign
func glWindowPos3sv(v: GLshort*);

@foreign
func glBlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);

@foreign
func glBlendEquation(mode: GLenum);

@foreign
typedef GLsizeiptr = ssize;

@foreign
typedef GLintptr = ssize;

@foreign
typedef PFNGLGENQUERIESPROC = func(n: GLsizei, ids: GLuint*);

@foreign
typedef PFNGLDELETEQUERIESPROC = func(n: GLsizei, ids: GLuint*);

@foreign
typedef PFNGLISQUERYPROC = func(id: GLuint): GLboolean;

@foreign
typedef PFNGLBEGINQUERYPROC = func(target: GLenum, id: GLuint);

@foreign
typedef PFNGLENDQUERYPROC = func(target: GLenum);

@foreign
typedef PFNGLGETQUERYIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETQUERYOBJECTIVPROC = func(id: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETQUERYOBJECTUIVPROC = func(id: GLuint, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLBINDBUFFERPROC = func(target: GLenum, buffer: GLuint);

@foreign
typedef PFNGLDELETEBUFFERSPROC = func(n: GLsizei, buffers: GLuint*);

@foreign
typedef PFNGLGENBUFFERSPROC = func(n: GLsizei, buffers: GLuint*);

@foreign
typedef PFNGLISBUFFERPROC = func(buffer: GLuint): GLboolean;

@foreign
typedef PFNGLBUFFERDATAPROC = func(target: GLenum, size: GLsizeiptr, data: void const*, usage: GLenum);

@foreign
typedef PFNGLBUFFERSUBDATAPROC = func(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: void const*);

@foreign
typedef PFNGLGETBUFFERSUBDATAPROC = func(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: void*);

@foreign
typedef PFNGLMAPBUFFERPROC = func(target: GLenum, access: GLenum): void*;

@foreign
typedef PFNGLUNMAPBUFFERPROC = func(target: GLenum): GLboolean;

@foreign
typedef PFNGLGETBUFFERPARAMETERIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETBUFFERPOINTERVPROC = func(target: GLenum, pname: GLenum, params: void**);

@foreign
func glGenQueries(n: GLsizei, ids: GLuint*);

@foreign
func glDeleteQueries(n: GLsizei, ids: GLuint*);

@foreign
func glIsQuery(id: GLuint): GLboolean;

@foreign
func glBeginQuery(target: GLenum, id: GLuint);

@foreign
func glEndQuery(target: GLenum);

@foreign
func glGetQueryiv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetQueryObjectiv(id: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetQueryObjectuiv(id: GLuint, pname: GLenum, params: GLuint*);

@foreign
func glBindBuffer(target: GLenum, buffer: GLuint);

@foreign
func glDeleteBuffers(n: GLsizei, buffers: GLuint*);

@foreign
func glGenBuffers(n: GLsizei, buffers: GLuint*);

@foreign
func glIsBuffer(buffer: GLuint): GLboolean;

@foreign
func glBufferData(target: GLenum, size: GLsizeiptr, data: void const*, usage: GLenum);

@foreign
func glBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: void const*);

@foreign
func glGetBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: void*);

@foreign
func glMapBuffer(target: GLenum, access: GLenum): void*;

@foreign
func glUnmapBuffer(target: GLenum): GLboolean;

@foreign
func glGetBufferParameteriv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetBufferPointerv(target: GLenum, pname: GLenum, params: void**);

@foreign
typedef GLchar = char;

@foreign
typedef PFNGLBLENDEQUATIONSEPARATEPROC = func(modeRGB: GLenum, modeAlpha: GLenum);

@foreign
typedef PFNGLDRAWBUFFERSPROC = func(n: GLsizei, bufs: GLenum*);

@foreign
typedef PFNGLSTENCILOPSEPARATEPROC = func(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum);

@foreign
typedef PFNGLSTENCILFUNCSEPARATEPROC = func(face: GLenum, fn: GLenum, ref: GLint, mask: GLuint);

@foreign
typedef PFNGLSTENCILMASKSEPARATEPROC = func(face: GLenum, mask: GLuint);

@foreign
typedef PFNGLATTACHSHADERPROC = func(program: GLuint, shader: GLuint);

@foreign
typedef PFNGLBINDATTRIBLOCATIONPROC = func(program: GLuint, index: GLuint, name: GLchar*);

@foreign
typedef PFNGLCOMPILESHADERPROC = func(shader: GLuint);

@foreign
typedef PFNGLCREATEPROGRAMPROC = func(): GLuint;

@foreign
typedef PFNGLCREATESHADERPROC = func(type: GLenum): GLuint;

@foreign
typedef PFNGLDELETEPROGRAMPROC = func(program: GLuint);

@foreign
typedef PFNGLDELETESHADERPROC = func(shader: GLuint);

@foreign
typedef PFNGLDETACHSHADERPROC = func(program: GLuint, shader: GLuint);

@foreign
typedef PFNGLDISABLEVERTEXATTRIBARRAYPROC = func(index: GLuint);

@foreign
typedef PFNGLENABLEVERTEXATTRIBARRAYPROC = func(index: GLuint);

@foreign
typedef PFNGLGETACTIVEATTRIBPROC = func(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLint*, type: GLenum*, name: GLchar*);

@foreign
typedef PFNGLGETACTIVEUNIFORMPROC = func(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLint*, type: GLenum*, name: GLchar*);

@foreign
typedef PFNGLGETATTACHEDSHADERSPROC = func(program: GLuint, maxCount: GLsizei, count: GLsizei*, shaders: GLuint*);

@foreign
typedef PFNGLGETATTRIBLOCATIONPROC = func(program: GLuint, name: GLchar*): GLint;

@foreign
typedef PFNGLGETPROGRAMIVPROC = func(program: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETPROGRAMINFOLOGPROC = func(program: GLuint, bufSize: GLsizei, length: GLsizei*, infoLog: GLchar*);

@foreign
typedef PFNGLGETSHADERIVPROC = func(shader: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETSHADERINFOLOGPROC = func(shader: GLuint, bufSize: GLsizei, length: GLsizei*, infoLog: GLchar*);

@foreign
typedef PFNGLGETSHADERSOURCEPROC = func(shader: GLuint, bufSize: GLsizei, length: GLsizei*, source: GLchar*);

@foreign
typedef PFNGLGETUNIFORMLOCATIONPROC = func(program: GLuint, name: GLchar*): GLint;

@foreign
typedef PFNGLGETUNIFORMFVPROC = func(program: GLuint, location: GLint, params: GLfloat*);

@foreign
typedef PFNGLGETUNIFORMIVPROC = func(program: GLuint, location: GLint, params: GLint*);

@foreign
typedef PFNGLGETVERTEXATTRIBDVPROC = func(index: GLuint, pname: GLenum, params: GLdouble*);

@foreign
typedef PFNGLGETVERTEXATTRIBFVPROC = func(index: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETVERTEXATTRIBIVPROC = func(index: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETVERTEXATTRIBPOINTERVPROC = func(index: GLuint, pname: GLenum, pointer: void**);

@foreign
typedef PFNGLISPROGRAMPROC = func(program: GLuint): GLboolean;

@foreign
typedef PFNGLISSHADERPROC = func(shader: GLuint): GLboolean;

@foreign
typedef PFNGLLINKPROGRAMPROC = func(program: GLuint);

@foreign
typedef PFNGLSHADERSOURCEPROC = func(shader: GLuint, count: GLsizei, string: GLchar* const*, length: GLint*);

@foreign
typedef PFNGLUSEPROGRAMPROC = func(program: GLuint);

@foreign
typedef PFNGLUNIFORM1FPROC = func(location: GLint, v0: GLfloat);

@foreign
typedef PFNGLUNIFORM2FPROC = func(location: GLint, v0: GLfloat, v1: GLfloat);

@foreign
typedef PFNGLUNIFORM3FPROC = func(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);

@foreign
typedef PFNGLUNIFORM4FPROC = func(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);

@foreign
typedef PFNGLUNIFORM1IPROC = func(location: GLint, v0: GLint);

@foreign
typedef PFNGLUNIFORM2IPROC = func(location: GLint, v0: GLint, v1: GLint);

@foreign
typedef PFNGLUNIFORM3IPROC = func(location: GLint, v0: GLint, v1: GLint, v2: GLint);

@foreign
typedef PFNGLUNIFORM4IPROC = func(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);

@foreign
typedef PFNGLUNIFORM1FVPROC = func(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLUNIFORM2FVPROC = func(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLUNIFORM3FVPROC = func(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLUNIFORM4FVPROC = func(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLUNIFORM1IVPROC = func(location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLUNIFORM2IVPROC = func(location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLUNIFORM3IVPROC = func(location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLUNIFORM4IVPROC = func(location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLUNIFORMMATRIX2FVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLUNIFORMMATRIX3FVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLUNIFORMMATRIX4FVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLVALIDATEPROGRAMPROC = func(program: GLuint);

@foreign
typedef PFNGLVERTEXATTRIB1DPROC = func(index: GLuint, x: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIB1DVPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIB1FPROC = func(index: GLuint, x: GLfloat);

@foreign
typedef PFNGLVERTEXATTRIB1FVPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIB1SPROC = func(index: GLuint, x: GLshort);

@foreign
typedef PFNGLVERTEXATTRIB1SVPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB2DPROC = func(index: GLuint, x: GLdouble, y: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIB2DVPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIB2FPROC = func(index: GLuint, x: GLfloat, y: GLfloat);

@foreign
typedef PFNGLVERTEXATTRIB2FVPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIB2SPROC = func(index: GLuint, x: GLshort, y: GLshort);

@foreign
typedef PFNGLVERTEXATTRIB2SVPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB3DPROC = func(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIB3DVPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIB3FPROC = func(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLVERTEXATTRIB3FVPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIB3SPROC = func(index: GLuint, x: GLshort, y: GLshort, z: GLshort);

@foreign
typedef PFNGLVERTEXATTRIB3SVPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB4NBVPROC = func(index: GLuint, v: GLbyte*);

@foreign
typedef PFNGLVERTEXATTRIB4NIVPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLVERTEXATTRIB4NSVPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB4NUBPROC = func(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);

@foreign
typedef PFNGLVERTEXATTRIB4NUBVPROC = func(index: GLuint, v: GLubyte*);

@foreign
typedef PFNGLVERTEXATTRIB4NUIVPROC = func(index: GLuint, v: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIB4NUSVPROC = func(index: GLuint, v: GLushort*);

@foreign
typedef PFNGLVERTEXATTRIB4BVPROC = func(index: GLuint, v: GLbyte*);

@foreign
typedef PFNGLVERTEXATTRIB4DPROC = func(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIB4DVPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIB4FPROC = func(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
typedef PFNGLVERTEXATTRIB4FVPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIB4IVPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLVERTEXATTRIB4SPROC = func(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);

@foreign
typedef PFNGLVERTEXATTRIB4SVPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB4UBVPROC = func(index: GLuint, v: GLubyte*);

@foreign
typedef PFNGLVERTEXATTRIB4UIVPROC = func(index: GLuint, v: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIB4USVPROC = func(index: GLuint, v: GLushort*);

@foreign
typedef PFNGLVERTEXATTRIBPOINTERPROC = func(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: void const*);

@foreign
func glBlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum);

@foreign
func glDrawBuffers(n: GLsizei, bufs: GLenum*);

@foreign
func glStencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum);

@foreign
func glStencilFuncSeparate(face: GLenum, fn: GLenum, ref: GLint, mask: GLuint);

@foreign
func glStencilMaskSeparate(face: GLenum, mask: GLuint);

@foreign
func glAttachShader(program: GLuint, shader: GLuint);

@foreign
func glBindAttribLocation(program: GLuint, index: GLuint, name: GLchar*);

@foreign
func glCompileShader(shader: GLuint);

@foreign
func glCreateProgram(): GLuint;

@foreign
func glCreateShader(type: GLenum): GLuint;

@foreign
func glDeleteProgram(program: GLuint);

@foreign
func glDeleteShader(shader: GLuint);

@foreign
func glDetachShader(program: GLuint, shader: GLuint);

@foreign
func glDisableVertexAttribArray(index: GLuint);

@foreign
func glEnableVertexAttribArray(index: GLuint);

@foreign
func glGetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLint*, type: GLenum*, name: GLchar*);

@foreign
func glGetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLint*, type: GLenum*, name: GLchar*);

@foreign
func glGetAttachedShaders(program: GLuint, maxCount: GLsizei, count: GLsizei*, shaders: GLuint*);

@foreign
func glGetAttribLocation(program: GLuint, name: GLchar*): GLint;

@foreign
func glGetProgramiv(program: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetProgramInfoLog(program: GLuint, bufSize: GLsizei, length: GLsizei*, infoLog: GLchar*);

@foreign
func glGetShaderiv(shader: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetShaderInfoLog(shader: GLuint, bufSize: GLsizei, length: GLsizei*, infoLog: GLchar*);

@foreign
func glGetShaderSource(shader: GLuint, bufSize: GLsizei, length: GLsizei*, source: GLchar*);

@foreign
func glGetUniformLocation(program: GLuint, name: GLchar*): GLint;

@foreign
func glGetUniformfv(program: GLuint, location: GLint, params: GLfloat*);

@foreign
func glGetUniformiv(program: GLuint, location: GLint, params: GLint*);

@foreign
func glGetVertexAttribdv(index: GLuint, pname: GLenum, params: GLdouble*);

@foreign
func glGetVertexAttribfv(index: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glGetVertexAttribiv(index: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: void**);

@foreign
func glIsProgram(program: GLuint): GLboolean;

@foreign
func glIsShader(shader: GLuint): GLboolean;

@foreign
func glLinkProgram(program: GLuint);

@foreign
func glShaderSource(shader: GLuint, count: GLsizei, string: GLchar* const*, length: GLint*);

@foreign
func glUseProgram(program: GLuint);

@foreign
func glUniform1f(location: GLint, v0: GLfloat);

@foreign
func glUniform2f(location: GLint, v0: GLfloat, v1: GLfloat);

@foreign
func glUniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);

@foreign
func glUniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);

@foreign
func glUniform1i(location: GLint, v0: GLint);

@foreign
func glUniform2i(location: GLint, v0: GLint, v1: GLint);

@foreign
func glUniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint);

@foreign
func glUniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);

@foreign
func glUniform1fv(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glUniform2fv(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glUniform3fv(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glUniform4fv(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glUniform1iv(location: GLint, count: GLsizei, value: GLint*);

@foreign
func glUniform2iv(location: GLint, count: GLsizei, value: GLint*);

@foreign
func glUniform3iv(location: GLint, count: GLsizei, value: GLint*);

@foreign
func glUniform4iv(location: GLint, count: GLsizei, value: GLint*);

@foreign
func glUniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glUniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glUniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glValidateProgram(program: GLuint);

@foreign
func glVertexAttrib1d(index: GLuint, x: GLdouble);

@foreign
func glVertexAttrib1dv(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttrib1f(index: GLuint, x: GLfloat);

@foreign
func glVertexAttrib1fv(index: GLuint, v: GLfloat*);

@foreign
func glVertexAttrib1s(index: GLuint, x: GLshort);

@foreign
func glVertexAttrib1sv(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib2d(index: GLuint, x: GLdouble, y: GLdouble);

@foreign
func glVertexAttrib2dv(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat);

@foreign
func glVertexAttrib2fv(index: GLuint, v: GLfloat*);

@foreign
func glVertexAttrib2s(index: GLuint, x: GLshort, y: GLshort);

@foreign
func glVertexAttrib2sv(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glVertexAttrib3dv(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glVertexAttrib3fv(index: GLuint, v: GLfloat*);

@foreign
func glVertexAttrib3s(index: GLuint, x: GLshort, y: GLshort, z: GLshort);

@foreign
func glVertexAttrib3sv(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib4Nbv(index: GLuint, v: GLbyte*);

@foreign
func glVertexAttrib4Niv(index: GLuint, v: GLint*);

@foreign
func glVertexAttrib4Nsv(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib4Nub(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);

@foreign
func glVertexAttrib4Nubv(index: GLuint, v: GLubyte*);

@foreign
func glVertexAttrib4Nuiv(index: GLuint, v: GLuint*);

@foreign
func glVertexAttrib4Nusv(index: GLuint, v: GLushort*);

@foreign
func glVertexAttrib4bv(index: GLuint, v: GLbyte*);

@foreign
func glVertexAttrib4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glVertexAttrib4dv(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glVertexAttrib4fv(index: GLuint, v: GLfloat*);

@foreign
func glVertexAttrib4iv(index: GLuint, v: GLint*);

@foreign
func glVertexAttrib4s(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);

@foreign
func glVertexAttrib4sv(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib4ubv(index: GLuint, v: GLubyte*);

@foreign
func glVertexAttrib4uiv(index: GLuint, v: GLuint*);

@foreign
func glVertexAttrib4usv(index: GLuint, v: GLushort*);

@foreign
func glVertexAttribPointer(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLUNIFORMMATRIX2X3FVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLUNIFORMMATRIX3X2FVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLUNIFORMMATRIX2X4FVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLUNIFORMMATRIX4X2FVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLUNIFORMMATRIX3X4FVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLUNIFORMMATRIX4X3FVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glUniformMatrix2x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glUniformMatrix3x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glUniformMatrix2x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glUniformMatrix4x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glUniformMatrix3x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glUniformMatrix4x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef GLhalf = ushort;

@foreign
typedef PFNGLCOLORMASKIPROC = func(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean);

@foreign
typedef PFNGLGETBOOLEANI_VPROC = func(target: GLenum, index: GLuint, data: GLboolean*);

@foreign
typedef PFNGLGETINTEGERI_VPROC = func(target: GLenum, index: GLuint, data: GLint*);

@foreign
typedef PFNGLENABLEIPROC = func(target: GLenum, index: GLuint);

@foreign
typedef PFNGLDISABLEIPROC = func(target: GLenum, index: GLuint);

@foreign
typedef PFNGLISENABLEDIPROC = func(target: GLenum, index: GLuint): GLboolean;

@foreign
typedef PFNGLBEGINTRANSFORMFEEDBACKPROC = func(primitiveMode: GLenum);

@foreign
typedef PFNGLENDTRANSFORMFEEDBACKPROC = func();

@foreign
typedef PFNGLBINDBUFFERRANGEPROC = func(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
typedef PFNGLBINDBUFFERBASEPROC = func(target: GLenum, index: GLuint, buffer: GLuint);

@foreign
typedef PFNGLTRANSFORMFEEDBACKVARYINGSPROC = func(program: GLuint, count: GLsizei, varyings: GLchar* const*, bufferMode: GLenum);

@foreign
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = func(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLsizei*, type: GLenum*, name: GLchar*);

@foreign
typedef PFNGLCLAMPCOLORPROC = func(target: GLenum, clamp: GLenum);

@foreign
typedef PFNGLBEGINCONDITIONALRENDERPROC = func(id: GLuint, mode: GLenum);

@foreign
typedef PFNGLENDCONDITIONALRENDERPROC = func();

@foreign
typedef PFNGLVERTEXATTRIBIPOINTERPROC = func(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLGETVERTEXATTRIBIIVPROC = func(index: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETVERTEXATTRIBIUIVPROC = func(index: GLuint, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIBI1IPROC = func(index: GLuint, x: GLint);

@foreign
typedef PFNGLVERTEXATTRIBI2IPROC = func(index: GLuint, x: GLint, y: GLint);

@foreign
typedef PFNGLVERTEXATTRIBI3IPROC = func(index: GLuint, x: GLint, y: GLint, z: GLint);

@foreign
typedef PFNGLVERTEXATTRIBI4IPROC = func(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
typedef PFNGLVERTEXATTRIBI1UIPROC = func(index: GLuint, x: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBI2UIPROC = func(index: GLuint, x: GLuint, y: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBI3UIPROC = func(index: GLuint, x: GLuint, y: GLuint, z: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBI4UIPROC = func(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBI1IVPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLVERTEXATTRIBI2IVPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLVERTEXATTRIBI3IVPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLVERTEXATTRIBI4IVPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLVERTEXATTRIBI1UIVPROC = func(index: GLuint, v: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIBI2UIVPROC = func(index: GLuint, v: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIBI3UIVPROC = func(index: GLuint, v: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIBI4UIVPROC = func(index: GLuint, v: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIBI4BVPROC = func(index: GLuint, v: GLbyte*);

@foreign
typedef PFNGLVERTEXATTRIBI4SVPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIBI4UBVPROC = func(index: GLuint, v: GLubyte*);

@foreign
typedef PFNGLVERTEXATTRIBI4USVPROC = func(index: GLuint, v: GLushort*);

@foreign
typedef PFNGLGETUNIFORMUIVPROC = func(program: GLuint, location: GLint, params: GLuint*);

@foreign
typedef PFNGLBINDFRAGDATALOCATIONPROC = func(program: GLuint, color: GLuint, name: GLchar*);

@foreign
typedef PFNGLGETFRAGDATALOCATIONPROC = func(program: GLuint, name: GLchar*): GLint;

@foreign
typedef PFNGLUNIFORM1UIPROC = func(location: GLint, v0: GLuint);

@foreign
typedef PFNGLUNIFORM2UIPROC = func(location: GLint, v0: GLuint, v1: GLuint);

@foreign
typedef PFNGLUNIFORM3UIPROC = func(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);

@foreign
typedef PFNGLUNIFORM4UIPROC = func(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);

@foreign
typedef PFNGLUNIFORM1UIVPROC = func(location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLUNIFORM2UIVPROC = func(location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLUNIFORM3UIVPROC = func(location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLUNIFORM4UIVPROC = func(location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLTEXPARAMETERIIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLTEXPARAMETERIUIVPROC = func(target: GLenum, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLGETTEXPARAMETERIIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETTEXPARAMETERIUIVPROC = func(target: GLenum, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLCLEARBUFFERIVPROC = func(buffer: GLenum, drawbuffer: GLint, value: GLint*);

@foreign
typedef PFNGLCLEARBUFFERUIVPROC = func(buffer: GLenum, drawbuffer: GLint, value: GLuint*);

@foreign
typedef PFNGLCLEARBUFFERFVPROC = func(buffer: GLenum, drawbuffer: GLint, value: GLfloat*);

@foreign
typedef PFNGLCLEARBUFFERFIPROC = func(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint);

@foreign
typedef PFNGLGETSTRINGIPROC = func(name: GLenum, index: GLuint): GLubyte*;

@foreign
typedef PFNGLISRENDERBUFFERPROC = func(renderbuffer: GLuint): GLboolean;

@foreign
typedef PFNGLBINDRENDERBUFFERPROC = func(target: GLenum, renderbuffer: GLuint);

@foreign
typedef PFNGLDELETERENDERBUFFERSPROC = func(n: GLsizei, renderbuffers: GLuint*);

@foreign
typedef PFNGLGENRENDERBUFFERSPROC = func(n: GLsizei, renderbuffers: GLuint*);

@foreign
typedef PFNGLRENDERBUFFERSTORAGEPROC = func(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLGETRENDERBUFFERPARAMETERIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLISFRAMEBUFFERPROC = func(framebuffer: GLuint): GLboolean;

@foreign
typedef PFNGLBINDFRAMEBUFFERPROC = func(target: GLenum, framebuffer: GLuint);

@foreign
typedef PFNGLDELETEFRAMEBUFFERSPROC = func(n: GLsizei, framebuffers: GLuint*);

@foreign
typedef PFNGLGENFRAMEBUFFERSPROC = func(n: GLsizei, framebuffers: GLuint*);

@foreign
typedef PFNGLCHECKFRAMEBUFFERSTATUSPROC = func(target: GLenum): GLenum;

@foreign
typedef PFNGLFRAMEBUFFERTEXTURE1DPROC = func(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);

@foreign
typedef PFNGLFRAMEBUFFERTEXTURE2DPROC = func(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);

@foreign
typedef PFNGLFRAMEBUFFERTEXTURE3DPROC = func(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint);

@foreign
typedef PFNGLFRAMEBUFFERRENDERBUFFERPROC = func(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);

@foreign
typedef PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = func(target: GLenum, attachment: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGENERATEMIPMAPPROC = func(target: GLenum);

@foreign
typedef PFNGLBLITFRAMEBUFFERPROC = func(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);

@foreign
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = func(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLFRAMEBUFFERTEXTURELAYERPROC = func(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);

@foreign
typedef PFNGLMAPBUFFERRANGEPROC = func(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): void*;

@foreign
typedef PFNGLFLUSHMAPPEDBUFFERRANGEPROC = func(target: GLenum, offset: GLintptr, length: GLsizeiptr);

@foreign
typedef PFNGLBINDVERTEXARRAYPROC = func(array: GLuint);

@foreign
typedef PFNGLDELETEVERTEXARRAYSPROC = func(n: GLsizei, arrays: GLuint*);

@foreign
typedef PFNGLGENVERTEXARRAYSPROC = func(n: GLsizei, arrays: GLuint*);

@foreign
typedef PFNGLISVERTEXARRAYPROC = func(array: GLuint): GLboolean;

@foreign
func glColorMaski(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean);

@foreign
func glGetBooleani_v(target: GLenum, index: GLuint, data: GLboolean*);

@foreign
func glGetIntegeri_v(target: GLenum, index: GLuint, data: GLint*);

@foreign
func glEnablei(target: GLenum, index: GLuint);

@foreign
func glDisablei(target: GLenum, index: GLuint);

@foreign
func glIsEnabledi(target: GLenum, index: GLuint): GLboolean;

@foreign
func glBeginTransformFeedback(primitiveMode: GLenum);

@foreign
func glEndTransformFeedback();

@foreign
func glBindBufferRange(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
func glBindBufferBase(target: GLenum, index: GLuint, buffer: GLuint);

@foreign
func glTransformFeedbackVaryings(program: GLuint, count: GLsizei, varyings: GLchar* const*, bufferMode: GLenum);

@foreign
func glGetTransformFeedbackVarying(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLsizei*, type: GLenum*, name: GLchar*);

@foreign
func glClampColor(target: GLenum, clamp: GLenum);

@foreign
func glBeginConditionalRender(id: GLuint, mode: GLenum);

@foreign
func glEndConditionalRender();

@foreign
func glVertexAttribIPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glGetVertexAttribIiv(index: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetVertexAttribIuiv(index: GLuint, pname: GLenum, params: GLuint*);

@foreign
func glVertexAttribI1i(index: GLuint, x: GLint);

@foreign
func glVertexAttribI2i(index: GLuint, x: GLint, y: GLint);

@foreign
func glVertexAttribI3i(index: GLuint, x: GLint, y: GLint, z: GLint);

@foreign
func glVertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
func glVertexAttribI1ui(index: GLuint, x: GLuint);

@foreign
func glVertexAttribI2ui(index: GLuint, x: GLuint, y: GLuint);

@foreign
func glVertexAttribI3ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint);

@foreign
func glVertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);

@foreign
func glVertexAttribI1iv(index: GLuint, v: GLint*);

@foreign
func glVertexAttribI2iv(index: GLuint, v: GLint*);

@foreign
func glVertexAttribI3iv(index: GLuint, v: GLint*);

@foreign
func glVertexAttribI4iv(index: GLuint, v: GLint*);

@foreign
func glVertexAttribI1uiv(index: GLuint, v: GLuint*);

@foreign
func glVertexAttribI2uiv(index: GLuint, v: GLuint*);

@foreign
func glVertexAttribI3uiv(index: GLuint, v: GLuint*);

@foreign
func glVertexAttribI4uiv(index: GLuint, v: GLuint*);

@foreign
func glVertexAttribI4bv(index: GLuint, v: GLbyte*);

@foreign
func glVertexAttribI4sv(index: GLuint, v: GLshort*);

@foreign
func glVertexAttribI4ubv(index: GLuint, v: GLubyte*);

@foreign
func glVertexAttribI4usv(index: GLuint, v: GLushort*);

@foreign
func glGetUniformuiv(program: GLuint, location: GLint, params: GLuint*);

@foreign
func glBindFragDataLocation(program: GLuint, color: GLuint, name: GLchar*);

@foreign
func glGetFragDataLocation(program: GLuint, name: GLchar*): GLint;

@foreign
func glUniform1ui(location: GLint, v0: GLuint);

@foreign
func glUniform2ui(location: GLint, v0: GLuint, v1: GLuint);

@foreign
func glUniform3ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);

@foreign
func glUniform4ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);

@foreign
func glUniform1uiv(location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glUniform2uiv(location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glUniform3uiv(location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glUniform4uiv(location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glTexParameterIiv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glTexParameterIuiv(target: GLenum, pname: GLenum, params: GLuint*);

@foreign
func glGetTexParameterIiv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetTexParameterIuiv(target: GLenum, pname: GLenum, params: GLuint*);

@foreign
func glClearBufferiv(buffer: GLenum, drawbuffer: GLint, value: GLint*);

@foreign
func glClearBufferuiv(buffer: GLenum, drawbuffer: GLint, value: GLuint*);

@foreign
func glClearBufferfv(buffer: GLenum, drawbuffer: GLint, value: GLfloat*);

@foreign
func glClearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint);

@foreign
func glGetStringi(name: GLenum, index: GLuint): GLubyte*;

@foreign
func glIsRenderbuffer(renderbuffer: GLuint): GLboolean;

@foreign
func glBindRenderbuffer(target: GLenum, renderbuffer: GLuint);

@foreign
func glDeleteRenderbuffers(n: GLsizei, renderbuffers: GLuint*);

@foreign
func glGenRenderbuffers(n: GLsizei, renderbuffers: GLuint*);

@foreign
func glRenderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glGetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glIsFramebuffer(framebuffer: GLuint): GLboolean;

@foreign
func glBindFramebuffer(target: GLenum, framebuffer: GLuint);

@foreign
func glDeleteFramebuffers(n: GLsizei, framebuffers: GLuint*);

@foreign
func glGenFramebuffers(n: GLsizei, framebuffers: GLuint*);

@foreign
func glCheckFramebufferStatus(target: GLenum): GLenum;

@foreign
func glFramebufferTexture1D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);

@foreign
func glFramebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);

@foreign
func glFramebufferTexture3D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint);

@foreign
func glFramebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);

@foreign
func glGetFramebufferAttachmentParameteriv(target: GLenum, attachment: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGenerateMipmap(target: GLenum);

@foreign
func glBlitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);

@foreign
func glRenderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glFramebufferTextureLayer(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);

@foreign
func glMapBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): void*;

@foreign
func glFlushMappedBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr);

@foreign
func glBindVertexArray(array: GLuint);

@foreign
func glDeleteVertexArrays(n: GLsizei, arrays: GLuint*);

@foreign
func glGenVertexArrays(n: GLsizei, arrays: GLuint*);

@foreign
func glIsVertexArray(array: GLuint): GLboolean;

@foreign
typedef PFNGLDRAWARRAYSINSTANCEDPROC = func(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei);

@foreign
typedef PFNGLDRAWELEMENTSINSTANCEDPROC = func(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, instancecount: GLsizei);

@foreign
typedef PFNGLTEXBUFFERPROC = func(target: GLenum, internalformat: GLenum, buffer: GLuint);

@foreign
typedef PFNGLPRIMITIVERESTARTINDEXPROC = func(index: GLuint);

@foreign
typedef PFNGLCOPYBUFFERSUBDATAPROC = func(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr);

@foreign
typedef PFNGLGETUNIFORMINDICESPROC = func(program: GLuint, uniformCount: GLsizei, uniformNames: GLchar* const*, uniformIndices: GLuint*);

@foreign
typedef PFNGLGETACTIVEUNIFORMSIVPROC = func(program: GLuint, uniformCount: GLsizei, uniformIndices: GLuint*, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETACTIVEUNIFORMNAMEPROC = func(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: GLsizei*, uniformName: GLchar*);

@foreign
typedef PFNGLGETUNIFORMBLOCKINDEXPROC = func(program: GLuint, uniformBlockName: GLchar*): GLuint;

@foreign
typedef PFNGLGETACTIVEUNIFORMBLOCKIVPROC = func(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = func(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: GLsizei*, uniformBlockName: GLchar*);

@foreign
typedef PFNGLUNIFORMBLOCKBINDINGPROC = func(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint);

@foreign
func glDrawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei);

@foreign
func glDrawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, instancecount: GLsizei);

@foreign
func glTexBuffer(target: GLenum, internalformat: GLenum, buffer: GLuint);

@foreign
func glPrimitiveRestartIndex(index: GLuint);

@foreign
func glCopyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr);

@foreign
func glGetUniformIndices(program: GLuint, uniformCount: GLsizei, uniformNames: GLchar* const*, uniformIndices: GLuint*);

@foreign
func glGetActiveUniformsiv(program: GLuint, uniformCount: GLsizei, uniformIndices: GLuint*, pname: GLenum, params: GLint*);

@foreign
func glGetActiveUniformName(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: GLsizei*, uniformName: GLchar*);

@foreign
func glGetUniformBlockIndex(program: GLuint, uniformBlockName: GLchar*): GLuint;

@foreign
func glGetActiveUniformBlockiv(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetActiveUniformBlockName(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: GLsizei*, uniformBlockName: GLchar*);

@foreign
func glUniformBlockBinding(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint);

@foreign
typedef GLsync = __GLsync*;

@foreign
typedef int32_t = int;

@foreign
typedef int64_t = llong;

@foreign
typedef uint64_t = ullong;

@foreign
typedef GLuint64 = uint64_t;

@foreign
typedef GLint64 = int64_t;

@foreign
typedef PFNGLDRAWELEMENTSBASEVERTEXPROC = func(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, basevertex: GLint);

@foreign
typedef PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = func(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: void const*, basevertex: GLint);

@foreign
typedef PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = func(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, instancecount: GLsizei, basevertex: GLint);

@foreign
typedef PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = func(mode: GLenum, count: GLsizei*, type: GLenum, indices: void const* const*, drawcount: GLsizei, basevertex: GLint*);

@foreign
typedef PFNGLPROVOKINGVERTEXPROC = func(mode: GLenum);

@foreign
typedef PFNGLFENCESYNCPROC = func(condition: GLenum, flags: GLbitfield): GLsync;

@foreign
typedef PFNGLISSYNCPROC = func(sync: GLsync): GLboolean;

@foreign
typedef PFNGLDELETESYNCPROC = func(sync: GLsync);

@foreign
typedef PFNGLCLIENTWAITSYNCPROC = func(sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum;

@foreign
typedef PFNGLWAITSYNCPROC = func(sync: GLsync, flags: GLbitfield, timeout: GLuint64);

@foreign
typedef PFNGLGETINTEGER64VPROC = func(pname: GLenum, data: GLint64*);

@foreign
typedef PFNGLGETSYNCIVPROC = func(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: GLsizei*, values: GLint*);

@foreign
typedef PFNGLGETINTEGER64I_VPROC = func(target: GLenum, index: GLuint, data: GLint64*);

@foreign
typedef PFNGLGETBUFFERPARAMETERI64VPROC = func(target: GLenum, pname: GLenum, params: GLint64*);

@foreign
typedef PFNGLFRAMEBUFFERTEXTUREPROC = func(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint);

@foreign
typedef PFNGLTEXIMAGE2DMULTISAMPLEPROC = func(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean);

@foreign
typedef PFNGLTEXIMAGE3DMULTISAMPLEPROC = func(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean);

@foreign
typedef PFNGLGETMULTISAMPLEFVPROC = func(pname: GLenum, index: GLuint, val: GLfloat*);

@foreign
typedef PFNGLSAMPLEMASKIPROC = func(maskNumber: GLuint, mask: GLbitfield);

@foreign
func glDrawElementsBaseVertex(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, basevertex: GLint);

@foreign
func glDrawRangeElementsBaseVertex(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: void const*, basevertex: GLint);

@foreign
func glDrawElementsInstancedBaseVertex(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, instancecount: GLsizei, basevertex: GLint);

@foreign
func glMultiDrawElementsBaseVertex(mode: GLenum, count: GLsizei*, type: GLenum, indices: void const* const*, drawcount: GLsizei, basevertex: GLint*);

@foreign
func glProvokingVertex(mode: GLenum);

@foreign
func glFenceSync(condition: GLenum, flags: GLbitfield): GLsync;

@foreign
func glIsSync(sync: GLsync): GLboolean;

@foreign
func glDeleteSync(sync: GLsync);

@foreign
func glClientWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum;

@foreign
func glWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64);

@foreign
func glGetInteger64v(pname: GLenum, data: GLint64*);

@foreign
func glGetSynciv(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: GLsizei*, values: GLint*);

@foreign
func glGetInteger64i_v(target: GLenum, index: GLuint, data: GLint64*);

@foreign
func glGetBufferParameteri64v(target: GLenum, pname: GLenum, params: GLint64*);

@foreign
func glFramebufferTexture(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint);

@foreign
func glTexImage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean);

@foreign
func glTexImage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean);

@foreign
func glGetMultisamplefv(pname: GLenum, index: GLuint, val: GLfloat*);

@foreign
func glSampleMaski(maskNumber: GLuint, mask: GLbitfield);

@foreign
typedef PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = func(program: GLuint, colorNumber: GLuint, index: GLuint, name: GLchar*);

@foreign
typedef PFNGLGETFRAGDATAINDEXPROC = func(program: GLuint, name: GLchar*): GLint;

@foreign
typedef PFNGLGENSAMPLERSPROC = func(count: GLsizei, samplers: GLuint*);

@foreign
typedef PFNGLDELETESAMPLERSPROC = func(count: GLsizei, samplers: GLuint*);

@foreign
typedef PFNGLISSAMPLERPROC = func(sampler: GLuint): GLboolean;

@foreign
typedef PFNGLBINDSAMPLERPROC = func(unit: GLuint, sampler: GLuint);

@foreign
typedef PFNGLSAMPLERPARAMETERIPROC = func(sampler: GLuint, pname: GLenum, param: GLint);

@foreign
typedef PFNGLSAMPLERPARAMETERIVPROC = func(sampler: GLuint, pname: GLenum, param: GLint*);

@foreign
typedef PFNGLSAMPLERPARAMETERFPROC = func(sampler: GLuint, pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLSAMPLERPARAMETERFVPROC = func(sampler: GLuint, pname: GLenum, param: GLfloat*);

@foreign
typedef PFNGLSAMPLERPARAMETERIIVPROC = func(sampler: GLuint, pname: GLenum, param: GLint*);

@foreign
typedef PFNGLSAMPLERPARAMETERIUIVPROC = func(sampler: GLuint, pname: GLenum, param: GLuint*);

@foreign
typedef PFNGLGETSAMPLERPARAMETERIVPROC = func(sampler: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETSAMPLERPARAMETERIIVPROC = func(sampler: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETSAMPLERPARAMETERFVPROC = func(sampler: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETSAMPLERPARAMETERIUIVPROC = func(sampler: GLuint, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLQUERYCOUNTERPROC = func(id: GLuint, target: GLenum);

@foreign
typedef PFNGLGETQUERYOBJECTI64VPROC = func(id: GLuint, pname: GLenum, params: GLint64*);

@foreign
typedef PFNGLGETQUERYOBJECTUI64VPROC = func(id: GLuint, pname: GLenum, params: GLuint64*);

@foreign
typedef PFNGLVERTEXATTRIBDIVISORPROC = func(index: GLuint, divisor: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBP1UIPROC = func(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBP1UIVPROC = func(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIBP2UIPROC = func(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBP2UIVPROC = func(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIBP3UIPROC = func(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBP3UIVPROC = func(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIBP4UIPROC = func(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBP4UIVPROC = func(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*);

@foreign
typedef PFNGLVERTEXP2UIPROC = func(type: GLenum, value: GLuint);

@foreign
typedef PFNGLVERTEXP2UIVPROC = func(type: GLenum, value: GLuint*);

@foreign
typedef PFNGLVERTEXP3UIPROC = func(type: GLenum, value: GLuint);

@foreign
typedef PFNGLVERTEXP3UIVPROC = func(type: GLenum, value: GLuint*);

@foreign
typedef PFNGLVERTEXP4UIPROC = func(type: GLenum, value: GLuint);

@foreign
typedef PFNGLVERTEXP4UIVPROC = func(type: GLenum, value: GLuint*);

@foreign
typedef PFNGLTEXCOORDP1UIPROC = func(type: GLenum, coords: GLuint);

@foreign
typedef PFNGLTEXCOORDP1UIVPROC = func(type: GLenum, coords: GLuint*);

@foreign
typedef PFNGLTEXCOORDP2UIPROC = func(type: GLenum, coords: GLuint);

@foreign
typedef PFNGLTEXCOORDP2UIVPROC = func(type: GLenum, coords: GLuint*);

@foreign
typedef PFNGLTEXCOORDP3UIPROC = func(type: GLenum, coords: GLuint);

@foreign
typedef PFNGLTEXCOORDP3UIVPROC = func(type: GLenum, coords: GLuint*);

@foreign
typedef PFNGLTEXCOORDP4UIPROC = func(type: GLenum, coords: GLuint);

@foreign
typedef PFNGLTEXCOORDP4UIVPROC = func(type: GLenum, coords: GLuint*);

@foreign
typedef PFNGLMULTITEXCOORDP1UIPROC = func(texture: GLenum, type: GLenum, coords: GLuint);

@foreign
typedef PFNGLMULTITEXCOORDP1UIVPROC = func(texture: GLenum, type: GLenum, coords: GLuint*);

@foreign
typedef PFNGLMULTITEXCOORDP2UIPROC = func(texture: GLenum, type: GLenum, coords: GLuint);

@foreign
typedef PFNGLMULTITEXCOORDP2UIVPROC = func(texture: GLenum, type: GLenum, coords: GLuint*);

@foreign
typedef PFNGLMULTITEXCOORDP3UIPROC = func(texture: GLenum, type: GLenum, coords: GLuint);

@foreign
typedef PFNGLMULTITEXCOORDP3UIVPROC = func(texture: GLenum, type: GLenum, coords: GLuint*);

@foreign
typedef PFNGLMULTITEXCOORDP4UIPROC = func(texture: GLenum, type: GLenum, coords: GLuint);

@foreign
typedef PFNGLMULTITEXCOORDP4UIVPROC = func(texture: GLenum, type: GLenum, coords: GLuint*);

@foreign
typedef PFNGLNORMALP3UIPROC = func(type: GLenum, coords: GLuint);

@foreign
typedef PFNGLNORMALP3UIVPROC = func(type: GLenum, coords: GLuint*);

@foreign
typedef PFNGLCOLORP3UIPROC = func(type: GLenum, color: GLuint);

@foreign
typedef PFNGLCOLORP3UIVPROC = func(type: GLenum, color: GLuint*);

@foreign
typedef PFNGLCOLORP4UIPROC = func(type: GLenum, color: GLuint);

@foreign
typedef PFNGLCOLORP4UIVPROC = func(type: GLenum, color: GLuint*);

@foreign
typedef PFNGLSECONDARYCOLORP3UIPROC = func(type: GLenum, color: GLuint);

@foreign
typedef PFNGLSECONDARYCOLORP3UIVPROC = func(type: GLenum, color: GLuint*);

@foreign
func glBindFragDataLocationIndexed(program: GLuint, colorNumber: GLuint, index: GLuint, name: GLchar*);

@foreign
func glGetFragDataIndex(program: GLuint, name: GLchar*): GLint;

@foreign
func glGenSamplers(count: GLsizei, samplers: GLuint*);

@foreign
func glDeleteSamplers(count: GLsizei, samplers: GLuint*);

@foreign
func glIsSampler(sampler: GLuint): GLboolean;

@foreign
func glBindSampler(unit: GLuint, sampler: GLuint);

@foreign
func glSamplerParameteri(sampler: GLuint, pname: GLenum, param: GLint);

@foreign
func glSamplerParameteriv(sampler: GLuint, pname: GLenum, param: GLint*);

@foreign
func glSamplerParameterf(sampler: GLuint, pname: GLenum, param: GLfloat);

@foreign
func glSamplerParameterfv(sampler: GLuint, pname: GLenum, param: GLfloat*);

@foreign
func glSamplerParameterIiv(sampler: GLuint, pname: GLenum, param: GLint*);

@foreign
func glSamplerParameterIuiv(sampler: GLuint, pname: GLenum, param: GLuint*);

@foreign
func glGetSamplerParameteriv(sampler: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetSamplerParameterIiv(sampler: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetSamplerParameterfv(sampler: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glGetSamplerParameterIuiv(sampler: GLuint, pname: GLenum, params: GLuint*);

@foreign
func glQueryCounter(id: GLuint, target: GLenum);

@foreign
func glGetQueryObjecti64v(id: GLuint, pname: GLenum, params: GLint64*);

@foreign
func glGetQueryObjectui64v(id: GLuint, pname: GLenum, params: GLuint64*);

@foreign
func glVertexAttribDivisor(index: GLuint, divisor: GLuint);

@foreign
func glVertexAttribP1ui(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint);

@foreign
func glVertexAttribP1uiv(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*);

@foreign
func glVertexAttribP2ui(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint);

@foreign
func glVertexAttribP2uiv(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*);

@foreign
func glVertexAttribP3ui(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint);

@foreign
func glVertexAttribP3uiv(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*);

@foreign
func glVertexAttribP4ui(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint);

@foreign
func glVertexAttribP4uiv(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*);

@foreign
func glVertexP2ui(type: GLenum, value: GLuint);

@foreign
func glVertexP2uiv(type: GLenum, value: GLuint*);

@foreign
func glVertexP3ui(type: GLenum, value: GLuint);

@foreign
func glVertexP3uiv(type: GLenum, value: GLuint*);

@foreign
func glVertexP4ui(type: GLenum, value: GLuint);

@foreign
func glVertexP4uiv(type: GLenum, value: GLuint*);

@foreign
func glTexCoordP1ui(type: GLenum, coords: GLuint);

@foreign
func glTexCoordP1uiv(type: GLenum, coords: GLuint*);

@foreign
func glTexCoordP2ui(type: GLenum, coords: GLuint);

@foreign
func glTexCoordP2uiv(type: GLenum, coords: GLuint*);

@foreign
func glTexCoordP3ui(type: GLenum, coords: GLuint);

@foreign
func glTexCoordP3uiv(type: GLenum, coords: GLuint*);

@foreign
func glTexCoordP4ui(type: GLenum, coords: GLuint);

@foreign
func glTexCoordP4uiv(type: GLenum, coords: GLuint*);

@foreign
func glMultiTexCoordP1ui(texture: GLenum, type: GLenum, coords: GLuint);

@foreign
func glMultiTexCoordP1uiv(texture: GLenum, type: GLenum, coords: GLuint*);

@foreign
func glMultiTexCoordP2ui(texture: GLenum, type: GLenum, coords: GLuint);

@foreign
func glMultiTexCoordP2uiv(texture: GLenum, type: GLenum, coords: GLuint*);

@foreign
func glMultiTexCoordP3ui(texture: GLenum, type: GLenum, coords: GLuint);

@foreign
func glMultiTexCoordP3uiv(texture: GLenum, type: GLenum, coords: GLuint*);

@foreign
func glMultiTexCoordP4ui(texture: GLenum, type: GLenum, coords: GLuint);

@foreign
func glMultiTexCoordP4uiv(texture: GLenum, type: GLenum, coords: GLuint*);

@foreign
func glNormalP3ui(type: GLenum, coords: GLuint);

@foreign
func glNormalP3uiv(type: GLenum, coords: GLuint*);

@foreign
func glColorP3ui(type: GLenum, color: GLuint);

@foreign
func glColorP3uiv(type: GLenum, color: GLuint*);

@foreign
func glColorP4ui(type: GLenum, color: GLuint);

@foreign
func glColorP4uiv(type: GLenum, color: GLuint*);

@foreign
func glSecondaryColorP3ui(type: GLenum, color: GLuint);

@foreign
func glSecondaryColorP3uiv(type: GLenum, color: GLuint*);

@foreign
typedef PFNGLMINSAMPLESHADINGPROC = func(value: GLfloat);

@foreign
typedef PFNGLBLENDEQUATIONIPROC = func(buf: GLuint, mode: GLenum);

@foreign
typedef PFNGLBLENDEQUATIONSEPARATEIPROC = func(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);

@foreign
typedef PFNGLBLENDFUNCIPROC = func(buf: GLuint, src: GLenum, dst: GLenum);

@foreign
typedef PFNGLBLENDFUNCSEPARATEIPROC = func(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum);

@foreign
typedef PFNGLDRAWARRAYSINDIRECTPROC = func(mode: GLenum, indirect: void const*);

@foreign
typedef PFNGLDRAWELEMENTSINDIRECTPROC = func(mode: GLenum, type: GLenum, indirect: void const*);

@foreign
typedef PFNGLUNIFORM1DPROC = func(location: GLint, x: GLdouble);

@foreign
typedef PFNGLUNIFORM2DPROC = func(location: GLint, x: GLdouble, y: GLdouble);

@foreign
typedef PFNGLUNIFORM3DPROC = func(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLUNIFORM4DPROC = func(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLUNIFORM1DVPROC = func(location: GLint, count: GLsizei, value: GLdouble*);

@foreign
typedef PFNGLUNIFORM2DVPROC = func(location: GLint, count: GLsizei, value: GLdouble*);

@foreign
typedef PFNGLUNIFORM3DVPROC = func(location: GLint, count: GLsizei, value: GLdouble*);

@foreign
typedef PFNGLUNIFORM4DVPROC = func(location: GLint, count: GLsizei, value: GLdouble*);

@foreign
typedef PFNGLUNIFORMMATRIX2DVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLUNIFORMMATRIX3DVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLUNIFORMMATRIX4DVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLUNIFORMMATRIX2X3DVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLUNIFORMMATRIX2X4DVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLUNIFORMMATRIX3X2DVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLUNIFORMMATRIX3X4DVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLUNIFORMMATRIX4X2DVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLUNIFORMMATRIX4X3DVPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLGETUNIFORMDVPROC = func(program: GLuint, location: GLint, params: GLdouble*);

@foreign
typedef PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = func(program: GLuint, shadertype: GLenum, name: GLchar*): GLint;

@foreign
typedef PFNGLGETSUBROUTINEINDEXPROC = func(program: GLuint, shadertype: GLenum, name: GLchar*): GLuint;

@foreign
typedef PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = func(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: GLint*);

@foreign
typedef PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = func(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: GLsizei*, name: GLchar*);

@foreign
typedef PFNGLGETACTIVESUBROUTINENAMEPROC = func(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: GLsizei*, name: GLchar*);

@foreign
typedef PFNGLUNIFORMSUBROUTINESUIVPROC = func(shadertype: GLenum, count: GLsizei, indices: GLuint*);

@foreign
typedef PFNGLGETUNIFORMSUBROUTINEUIVPROC = func(shadertype: GLenum, location: GLint, params: GLuint*);

@foreign
typedef PFNGLGETPROGRAMSTAGEIVPROC = func(program: GLuint, shadertype: GLenum, pname: GLenum, values: GLint*);

@foreign
typedef PFNGLPATCHPARAMETERIPROC = func(pname: GLenum, value: GLint);

@foreign
typedef PFNGLPATCHPARAMETERFVPROC = func(pname: GLenum, values: GLfloat*);

@foreign
typedef PFNGLBINDTRANSFORMFEEDBACKPROC = func(target: GLenum, id: GLuint);

@foreign
typedef PFNGLDELETETRANSFORMFEEDBACKSPROC = func(n: GLsizei, ids: GLuint*);

@foreign
typedef PFNGLGENTRANSFORMFEEDBACKSPROC = func(n: GLsizei, ids: GLuint*);

@foreign
typedef PFNGLISTRANSFORMFEEDBACKPROC = func(id: GLuint): GLboolean;

@foreign
typedef PFNGLPAUSETRANSFORMFEEDBACKPROC = func();

@foreign
typedef PFNGLRESUMETRANSFORMFEEDBACKPROC = func();

@foreign
typedef PFNGLDRAWTRANSFORMFEEDBACKPROC = func(mode: GLenum, id: GLuint);

@foreign
typedef PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = func(mode: GLenum, id: GLuint, stream: GLuint);

@foreign
typedef PFNGLBEGINQUERYINDEXEDPROC = func(target: GLenum, index: GLuint, id: GLuint);

@foreign
typedef PFNGLENDQUERYINDEXEDPROC = func(target: GLenum, index: GLuint);

@foreign
typedef PFNGLGETQUERYINDEXEDIVPROC = func(target: GLenum, index: GLuint, pname: GLenum, params: GLint*);

@foreign
func glMinSampleShading(value: GLfloat);

@foreign
func glBlendEquationi(buf: GLuint, mode: GLenum);

@foreign
func glBlendEquationSeparatei(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);

@foreign
func glBlendFunci(buf: GLuint, src: GLenum, dst: GLenum);

@foreign
func glBlendFuncSeparatei(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum);

@foreign
func glDrawArraysIndirect(mode: GLenum, indirect: void const*);

@foreign
func glDrawElementsIndirect(mode: GLenum, type: GLenum, indirect: void const*);

@foreign
func glUniform1d(location: GLint, x: GLdouble);

@foreign
func glUniform2d(location: GLint, x: GLdouble, y: GLdouble);

@foreign
func glUniform3d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glUniform4d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glUniform1dv(location: GLint, count: GLsizei, value: GLdouble*);

@foreign
func glUniform2dv(location: GLint, count: GLsizei, value: GLdouble*);

@foreign
func glUniform3dv(location: GLint, count: GLsizei, value: GLdouble*);

@foreign
func glUniform4dv(location: GLint, count: GLsizei, value: GLdouble*);

@foreign
func glUniformMatrix2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glUniformMatrix3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glUniformMatrix4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glUniformMatrix2x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glUniformMatrix2x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glUniformMatrix3x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glUniformMatrix3x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glUniformMatrix4x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glUniformMatrix4x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glGetUniformdv(program: GLuint, location: GLint, params: GLdouble*);

@foreign
func glGetSubroutineUniformLocation(program: GLuint, shadertype: GLenum, name: GLchar*): GLint;

@foreign
func glGetSubroutineIndex(program: GLuint, shadertype: GLenum, name: GLchar*): GLuint;

@foreign
func glGetActiveSubroutineUniformiv(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: GLint*);

@foreign
func glGetActiveSubroutineUniformName(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: GLsizei*, name: GLchar*);

@foreign
func glGetActiveSubroutineName(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: GLsizei*, name: GLchar*);

@foreign
func glUniformSubroutinesuiv(shadertype: GLenum, count: GLsizei, indices: GLuint*);

@foreign
func glGetUniformSubroutineuiv(shadertype: GLenum, location: GLint, params: GLuint*);

@foreign
func glGetProgramStageiv(program: GLuint, shadertype: GLenum, pname: GLenum, values: GLint*);

@foreign
func glPatchParameteri(pname: GLenum, value: GLint);

@foreign
func glPatchParameterfv(pname: GLenum, values: GLfloat*);

@foreign
func glBindTransformFeedback(target: GLenum, id: GLuint);

@foreign
func glDeleteTransformFeedbacks(n: GLsizei, ids: GLuint*);

@foreign
func glGenTransformFeedbacks(n: GLsizei, ids: GLuint*);

@foreign
func glIsTransformFeedback(id: GLuint): GLboolean;

@foreign
func glPauseTransformFeedback();

@foreign
func glResumeTransformFeedback();

@foreign
func glDrawTransformFeedback(mode: GLenum, id: GLuint);

@foreign
func glDrawTransformFeedbackStream(mode: GLenum, id: GLuint, stream: GLuint);

@foreign
func glBeginQueryIndexed(target: GLenum, index: GLuint, id: GLuint);

@foreign
func glEndQueryIndexed(target: GLenum, index: GLuint);

@foreign
func glGetQueryIndexediv(target: GLenum, index: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLRELEASESHADERCOMPILERPROC = func();

@foreign
typedef PFNGLSHADERBINARYPROC = func(count: GLsizei, shaders: GLuint*, binaryformat: GLenum, binary: void const*, length: GLsizei);

@foreign
typedef PFNGLGETSHADERPRECISIONFORMATPROC = func(shadertype: GLenum, precisiontype: GLenum, range: GLint*, precision: GLint*);

@foreign
typedef PFNGLDEPTHRANGEFPROC = func(n: GLfloat, f: GLfloat);

@foreign
typedef PFNGLCLEARDEPTHFPROC = func(d: GLfloat);

@foreign
typedef PFNGLGETPROGRAMBINARYPROC = func(program: GLuint, bufSize: GLsizei, length: GLsizei*, binaryFormat: GLenum*, binary: void*);

@foreign
typedef PFNGLPROGRAMBINARYPROC = func(program: GLuint, binaryFormat: GLenum, binary: void const*, length: GLsizei);

@foreign
typedef PFNGLPROGRAMPARAMETERIPROC = func(program: GLuint, pname: GLenum, value: GLint);

@foreign
typedef PFNGLUSEPROGRAMSTAGESPROC = func(pipeline: GLuint, stages: GLbitfield, program: GLuint);

@foreign
typedef PFNGLACTIVESHADERPROGRAMPROC = func(pipeline: GLuint, program: GLuint);

@foreign
typedef PFNGLCREATESHADERPROGRAMVPROC = func(type: GLenum, count: GLsizei, strings: GLchar* const*): GLuint;

@foreign
typedef PFNGLBINDPROGRAMPIPELINEPROC = func(pipeline: GLuint);

@foreign
typedef PFNGLDELETEPROGRAMPIPELINESPROC = func(n: GLsizei, pipelines: GLuint*);

@foreign
typedef PFNGLGENPROGRAMPIPELINESPROC = func(n: GLsizei, pipelines: GLuint*);

@foreign
typedef PFNGLISPROGRAMPIPELINEPROC = func(pipeline: GLuint): GLboolean;

@foreign
typedef PFNGLGETPROGRAMPIPELINEIVPROC = func(pipeline: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLPROGRAMUNIFORM1IPROC = func(program: GLuint, location: GLint, v0: GLint);

@foreign
typedef PFNGLPROGRAMUNIFORM1IVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLPROGRAMUNIFORM1FPROC = func(program: GLuint, location: GLint, v0: GLfloat);

@foreign
typedef PFNGLPROGRAMUNIFORM1FVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORM1DPROC = func(program: GLuint, location: GLint, v0: GLdouble);

@foreign
typedef PFNGLPROGRAMUNIFORM1DVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORM1UIPROC = func(program: GLuint, location: GLint, v0: GLuint);

@foreign
typedef PFNGLPROGRAMUNIFORM1UIVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLPROGRAMUNIFORM2IPROC = func(program: GLuint, location: GLint, v0: GLint, v1: GLint);

@foreign
typedef PFNGLPROGRAMUNIFORM2IVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLPROGRAMUNIFORM2FPROC = func(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat);

@foreign
typedef PFNGLPROGRAMUNIFORM2FVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORM2DPROC = func(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble);

@foreign
typedef PFNGLPROGRAMUNIFORM2DVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORM2UIPROC = func(program: GLuint, location: GLint, v0: GLuint, v1: GLuint);

@foreign
typedef PFNGLPROGRAMUNIFORM2UIVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLPROGRAMUNIFORM3IPROC = func(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint);

@foreign
typedef PFNGLPROGRAMUNIFORM3IVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLPROGRAMUNIFORM3FPROC = func(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);

@foreign
typedef PFNGLPROGRAMUNIFORM3FVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORM3DPROC = func(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble);

@foreign
typedef PFNGLPROGRAMUNIFORM3DVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORM3UIPROC = func(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);

@foreign
typedef PFNGLPROGRAMUNIFORM3UIVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLPROGRAMUNIFORM4IPROC = func(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);

@foreign
typedef PFNGLPROGRAMUNIFORM4IVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLPROGRAMUNIFORM4FPROC = func(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);

@foreign
typedef PFNGLPROGRAMUNIFORM4FVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORM4DPROC = func(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble);

@foreign
typedef PFNGLPROGRAMUNIFORM4DVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORM4UIPROC = func(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);

@foreign
typedef PFNGLPROGRAMUNIFORM4UIVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX2FVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX3FVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX4FVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX2DVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX3DVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX4DVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLVALIDATEPROGRAMPIPELINEPROC = func(pipeline: GLuint);

@foreign
typedef PFNGLGETPROGRAMPIPELINEINFOLOGPROC = func(pipeline: GLuint, bufSize: GLsizei, length: GLsizei*, infoLog: GLchar*);

@foreign
typedef PFNGLVERTEXATTRIBL1DPROC = func(index: GLuint, x: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIBL2DPROC = func(index: GLuint, x: GLdouble, y: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIBL3DPROC = func(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIBL4DPROC = func(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIBL1DVPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIBL2DVPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIBL3DVPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIBL4DVPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIBLPOINTERPROC = func(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLGETVERTEXATTRIBLDVPROC = func(index: GLuint, pname: GLenum, params: GLdouble*);

@foreign
typedef PFNGLVIEWPORTARRAYVPROC = func(first: GLuint, count: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLVIEWPORTINDEXEDFPROC = func(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat);

@foreign
typedef PFNGLVIEWPORTINDEXEDFVPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLSCISSORARRAYVPROC = func(first: GLuint, count: GLsizei, v: GLint*);

@foreign
typedef PFNGLSCISSORINDEXEDPROC = func(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLSCISSORINDEXEDVPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLDEPTHRANGEARRAYVPROC = func(first: GLuint, count: GLsizei, v: GLdouble*);

@foreign
typedef PFNGLDEPTHRANGEINDEXEDPROC = func(index: GLuint, n: GLdouble, f: GLdouble);

@foreign
typedef PFNGLGETFLOATI_VPROC = func(target: GLenum, index: GLuint, data: GLfloat*);

@foreign
typedef PFNGLGETDOUBLEI_VPROC = func(target: GLenum, index: GLuint, data: GLdouble*);

@foreign
func glReleaseShaderCompiler();

@foreign
func glShaderBinary(count: GLsizei, shaders: GLuint*, binaryformat: GLenum, binary: void const*, length: GLsizei);

@foreign
func glGetShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum, range: GLint*, precision: GLint*);

@foreign
func glDepthRangef(n: GLfloat, f: GLfloat);

@foreign
func glClearDepthf(d: GLfloat);

@foreign
func glGetProgramBinary(program: GLuint, bufSize: GLsizei, length: GLsizei*, binaryFormat: GLenum*, binary: void*);

@foreign
func glProgramBinary(program: GLuint, binaryFormat: GLenum, binary: void const*, length: GLsizei);

@foreign
func glProgramParameteri(program: GLuint, pname: GLenum, value: GLint);

@foreign
func glUseProgramStages(pipeline: GLuint, stages: GLbitfield, program: GLuint);

@foreign
func glActiveShaderProgram(pipeline: GLuint, program: GLuint);

@foreign
func glCreateShaderProgramv(type: GLenum, count: GLsizei, strings: GLchar* const*): GLuint;

@foreign
func glBindProgramPipeline(pipeline: GLuint);

@foreign
func glDeleteProgramPipelines(n: GLsizei, pipelines: GLuint*);

@foreign
func glGenProgramPipelines(n: GLsizei, pipelines: GLuint*);

@foreign
func glIsProgramPipeline(pipeline: GLuint): GLboolean;

@foreign
func glGetProgramPipelineiv(pipeline: GLuint, pname: GLenum, params: GLint*);

@foreign
func glProgramUniform1i(program: GLuint, location: GLint, v0: GLint);

@foreign
func glProgramUniform1iv(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
func glProgramUniform1f(program: GLuint, location: GLint, v0: GLfloat);

@foreign
func glProgramUniform1fv(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glProgramUniform1d(program: GLuint, location: GLint, v0: GLdouble);

@foreign
func glProgramUniform1dv(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
func glProgramUniform1ui(program: GLuint, location: GLint, v0: GLuint);

@foreign
func glProgramUniform1uiv(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glProgramUniform2i(program: GLuint, location: GLint, v0: GLint, v1: GLint);

@foreign
func glProgramUniform2iv(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
func glProgramUniform2f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat);

@foreign
func glProgramUniform2fv(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glProgramUniform2d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble);

@foreign
func glProgramUniform2dv(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
func glProgramUniform2ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint);

@foreign
func glProgramUniform2uiv(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glProgramUniform3i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint);

@foreign
func glProgramUniform3iv(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
func glProgramUniform3f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);

@foreign
func glProgramUniform3fv(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glProgramUniform3d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble);

@foreign
func glProgramUniform3dv(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
func glProgramUniform3ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);

@foreign
func glProgramUniform3uiv(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glProgramUniform4i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);

@foreign
func glProgramUniform4iv(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
func glProgramUniform4f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);

@foreign
func glProgramUniform4fv(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glProgramUniform4d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble);

@foreign
func glProgramUniform4dv(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
func glProgramUniform4ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);

@foreign
func glProgramUniform4uiv(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glProgramUniformMatrix2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix2x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix3x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix2x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix4x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix3x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix4x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix2x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix3x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix2x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix4x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix3x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix4x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glValidateProgramPipeline(pipeline: GLuint);

@foreign
func glGetProgramPipelineInfoLog(pipeline: GLuint, bufSize: GLsizei, length: GLsizei*, infoLog: GLchar*);

@foreign
func glVertexAttribL1d(index: GLuint, x: GLdouble);

@foreign
func glVertexAttribL2d(index: GLuint, x: GLdouble, y: GLdouble);

@foreign
func glVertexAttribL3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glVertexAttribL4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glVertexAttribL1dv(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttribL2dv(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttribL3dv(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttribL4dv(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttribLPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glGetVertexAttribLdv(index: GLuint, pname: GLenum, params: GLdouble*);

@foreign
func glViewportArrayv(first: GLuint, count: GLsizei, v: GLfloat*);

@foreign
func glViewportIndexedf(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat);

@foreign
func glViewportIndexedfv(index: GLuint, v: GLfloat*);

@foreign
func glScissorArrayv(first: GLuint, count: GLsizei, v: GLint*);

@foreign
func glScissorIndexed(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei);

@foreign
func glScissorIndexedv(index: GLuint, v: GLint*);

@foreign
func glDepthRangeArrayv(first: GLuint, count: GLsizei, v: GLdouble*);

@foreign
func glDepthRangeIndexed(index: GLuint, n: GLdouble, f: GLdouble);

@foreign
func glGetFloati_v(target: GLenum, index: GLuint, data: GLfloat*);

@foreign
func glGetDoublei_v(target: GLenum, index: GLuint, data: GLdouble*);

@foreign
typedef PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = func(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint);

@foreign
typedef PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = func(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, instancecount: GLsizei, baseinstance: GLuint);

@foreign
typedef PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = func(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint);

@foreign
typedef PFNGLGETINTERNALFORMATIVPROC = func(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: GLint*);

@foreign
typedef PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = func(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLBINDIMAGETEXTUREPROC = func(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum);

@foreign
typedef PFNGLMEMORYBARRIERPROC = func(barriers: GLbitfield);

@foreign
typedef PFNGLTEXSTORAGE1DPROC = func(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei);

@foreign
typedef PFNGLTEXSTORAGE2DPROC = func(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLTEXSTORAGE3DPROC = func(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei);

@foreign
typedef PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = func(mode: GLenum, id: GLuint, instancecount: GLsizei);

@foreign
typedef PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = func(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei);

@foreign
func glDrawArraysInstancedBaseInstance(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint);

@foreign
func glDrawElementsInstancedBaseInstance(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, instancecount: GLsizei, baseinstance: GLuint);

@foreign
func glDrawElementsInstancedBaseVertexBaseInstance(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint);

@foreign
func glGetInternalformativ(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: GLint*);

@foreign
func glGetActiveAtomicCounterBufferiv(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: GLint*);

@foreign
func glBindImageTexture(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum);

@foreign
func glMemoryBarrier(barriers: GLbitfield);

@foreign
func glTexStorage1D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei);

@foreign
func glTexStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glTexStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei);

@foreign
func glDrawTransformFeedbackInstanced(mode: GLenum, id: GLuint, instancecount: GLsizei);

@foreign
func glDrawTransformFeedbackStreamInstanced(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei);

@foreign
typedef GLDEBUGPROC = func(source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: GLchar*, userParam: void const*);

@foreign
typedef PFNGLCLEARBUFFERDATAPROC = func(target: GLenum, internalformat: GLenum, format: GLenum, type: GLenum, data: void const*);

@foreign
typedef PFNGLCLEARBUFFERSUBDATAPROC = func(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: void const*);

@foreign
typedef PFNGLDISPATCHCOMPUTEPROC = func(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint);

@foreign
typedef PFNGLDISPATCHCOMPUTEINDIRECTPROC = func(indirect: GLintptr);

@foreign
typedef PFNGLCOPYIMAGESUBDATAPROC = func(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei);

@foreign
typedef PFNGLFRAMEBUFFERPARAMETERIPROC = func(target: GLenum, pname: GLenum, param: GLint);

@foreign
typedef PFNGLGETFRAMEBUFFERPARAMETERIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETINTERNALFORMATI64VPROC = func(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: GLint64*);

@foreign
typedef PFNGLINVALIDATETEXSUBIMAGEPROC = func(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei);

@foreign
typedef PFNGLINVALIDATETEXIMAGEPROC = func(texture: GLuint, level: GLint);

@foreign
typedef PFNGLINVALIDATEBUFFERSUBDATAPROC = func(buffer: GLuint, offset: GLintptr, length: GLsizeiptr);

@foreign
typedef PFNGLINVALIDATEBUFFERDATAPROC = func(buffer: GLuint);

@foreign
typedef PFNGLINVALIDATEFRAMEBUFFERPROC = func(target: GLenum, numAttachments: GLsizei, attachments: GLenum*);

@foreign
typedef PFNGLINVALIDATESUBFRAMEBUFFERPROC = func(target: GLenum, numAttachments: GLsizei, attachments: GLenum*, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLMULTIDRAWARRAYSINDIRECTPROC = func(mode: GLenum, indirect: void const*, drawcount: GLsizei, stride: GLsizei);

@foreign
typedef PFNGLMULTIDRAWELEMENTSINDIRECTPROC = func(mode: GLenum, type: GLenum, indirect: void const*, drawcount: GLsizei, stride: GLsizei);

@foreign
typedef PFNGLGETPROGRAMINTERFACEIVPROC = func(program: GLuint, programInterface: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETPROGRAMRESOURCEINDEXPROC = func(program: GLuint, programInterface: GLenum, name: GLchar*): GLuint;

@foreign
typedef PFNGLGETPROGRAMRESOURCENAMEPROC = func(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: GLsizei*, name: GLchar*);

@foreign
typedef PFNGLGETPROGRAMRESOURCEIVPROC = func(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: GLenum*, bufSize: GLsizei, length: GLsizei*, params: GLint*);

@foreign
typedef PFNGLGETPROGRAMRESOURCELOCATIONPROC = func(program: GLuint, programInterface: GLenum, name: GLchar*): GLint;

@foreign
typedef PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = func(program: GLuint, programInterface: GLenum, name: GLchar*): GLint;

@foreign
typedef PFNGLSHADERSTORAGEBLOCKBINDINGPROC = func(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint);

@foreign
typedef PFNGLTEXBUFFERRANGEPROC = func(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
typedef PFNGLTEXSTORAGE2DMULTISAMPLEPROC = func(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean);

@foreign
typedef PFNGLTEXSTORAGE3DMULTISAMPLEPROC = func(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean);

@foreign
typedef PFNGLTEXTUREVIEWPROC = func(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint);

@foreign
typedef PFNGLBINDVERTEXBUFFERPROC = func(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei);

@foreign
typedef PFNGLVERTEXATTRIBFORMATPROC = func(attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBIFORMATPROC = func(attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBLFORMATPROC = func(attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBBINDINGPROC = func(attribindex: GLuint, bindingindex: GLuint);

@foreign
typedef PFNGLVERTEXBINDINGDIVISORPROC = func(bindingindex: GLuint, divisor: GLuint);

@foreign
typedef PFNGLDEBUGMESSAGECONTROLPROC = func(source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: GLuint*, enabled: GLboolean);

@foreign
typedef PFNGLDEBUGMESSAGEINSERTPROC = func(source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: GLchar*);

@foreign
typedef PFNGLDEBUGMESSAGECALLBACKPROC = func(callback: GLDEBUGPROC, userParam: void const*);

@foreign
typedef PFNGLGETDEBUGMESSAGELOGPROC = func(count: GLuint, bufSize: GLsizei, sources: GLenum*, types: GLenum*, ids: GLuint*, severities: GLenum*, lengths: GLsizei*, messageLog: GLchar*): GLuint;

@foreign
typedef PFNGLPUSHDEBUGGROUPPROC = func(source: GLenum, id: GLuint, length: GLsizei, message: GLchar*);

@foreign
typedef PFNGLPOPDEBUGGROUPPROC = func();

@foreign
typedef PFNGLOBJECTLABELPROC = func(identifier: GLenum, name: GLuint, length: GLsizei, label: GLchar*);

@foreign
typedef PFNGLGETOBJECTLABELPROC = func(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: GLsizei*, label: GLchar*);

@foreign
typedef PFNGLOBJECTPTRLABELPROC = func(ptr: void const*, length: GLsizei, label: GLchar*);

@foreign
typedef PFNGLGETOBJECTPTRLABELPROC = func(ptr: void const*, bufSize: GLsizei, length: GLsizei*, label: GLchar*);

@foreign
func glClearBufferData(target: GLenum, internalformat: GLenum, format: GLenum, type: GLenum, data: void const*);

@foreign
func glClearBufferSubData(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: void const*);

@foreign
func glDispatchCompute(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint);

@foreign
func glDispatchComputeIndirect(indirect: GLintptr);

@foreign
func glCopyImageSubData(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei);

@foreign
func glFramebufferParameteri(target: GLenum, pname: GLenum, param: GLint);

@foreign
func glGetFramebufferParameteriv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetInternalformati64v(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: GLint64*);

@foreign
func glInvalidateTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei);

@foreign
func glInvalidateTexImage(texture: GLuint, level: GLint);

@foreign
func glInvalidateBufferSubData(buffer: GLuint, offset: GLintptr, length: GLsizeiptr);

@foreign
func glInvalidateBufferData(buffer: GLuint);

@foreign
func glInvalidateFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: GLenum*);

@foreign
func glInvalidateSubFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: GLenum*, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glMultiDrawArraysIndirect(mode: GLenum, indirect: void const*, drawcount: GLsizei, stride: GLsizei);

@foreign
func glMultiDrawElementsIndirect(mode: GLenum, type: GLenum, indirect: void const*, drawcount: GLsizei, stride: GLsizei);

@foreign
func glGetProgramInterfaceiv(program: GLuint, programInterface: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetProgramResourceIndex(program: GLuint, programInterface: GLenum, name: GLchar*): GLuint;

@foreign
func glGetProgramResourceName(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: GLsizei*, name: GLchar*);

@foreign
func glGetProgramResourceiv(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: GLenum*, bufSize: GLsizei, length: GLsizei*, params: GLint*);

@foreign
func glGetProgramResourceLocation(program: GLuint, programInterface: GLenum, name: GLchar*): GLint;

@foreign
func glGetProgramResourceLocationIndex(program: GLuint, programInterface: GLenum, name: GLchar*): GLint;

@foreign
func glShaderStorageBlockBinding(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint);

@foreign
func glTexBufferRange(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
func glTexStorage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean);

@foreign
func glTexStorage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean);

@foreign
func glTextureView(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint);

@foreign
func glBindVertexBuffer(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei);

@foreign
func glVertexAttribFormat(attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint);

@foreign
func glVertexAttribIFormat(attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint);

@foreign
func glVertexAttribLFormat(attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint);

@foreign
func glVertexAttribBinding(attribindex: GLuint, bindingindex: GLuint);

@foreign
func glVertexBindingDivisor(bindingindex: GLuint, divisor: GLuint);

@foreign
func glDebugMessageControl(source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: GLuint*, enabled: GLboolean);

@foreign
func glDebugMessageInsert(source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: GLchar*);

@foreign
func glDebugMessageCallback(callback: GLDEBUGPROC, userParam: void const*);

@foreign
func glGetDebugMessageLog(count: GLuint, bufSize: GLsizei, sources: GLenum*, types: GLenum*, ids: GLuint*, severities: GLenum*, lengths: GLsizei*, messageLog: GLchar*): GLuint;

@foreign
func glPushDebugGroup(source: GLenum, id: GLuint, length: GLsizei, message: GLchar*);

@foreign
func glPopDebugGroup();

@foreign
func glObjectLabel(identifier: GLenum, name: GLuint, length: GLsizei, label: GLchar*);

@foreign
func glGetObjectLabel(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: GLsizei*, label: GLchar*);

@foreign
func glObjectPtrLabel(ptr: void const*, length: GLsizei, label: GLchar*);

@foreign
func glGetObjectPtrLabel(ptr: void const*, bufSize: GLsizei, length: GLsizei*, label: GLchar*);

@foreign
typedef PFNGLBUFFERSTORAGEPROC = func(target: GLenum, size: GLsizeiptr, data: void const*, flags: GLbitfield);

@foreign
typedef PFNGLCLEARTEXIMAGEPROC = func(texture: GLuint, level: GLint, format: GLenum, type: GLenum, data: void const*);

@foreign
typedef PFNGLCLEARTEXSUBIMAGEPROC = func(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, data: void const*);

@foreign
typedef PFNGLBINDBUFFERSBASEPROC = func(target: GLenum, first: GLuint, count: GLsizei, buffers: GLuint*);

@foreign
typedef PFNGLBINDBUFFERSRANGEPROC = func(target: GLenum, first: GLuint, count: GLsizei, buffers: GLuint*, offsets: GLintptr*, sizes: GLsizeiptr*);

@foreign
typedef PFNGLBINDTEXTURESPROC = func(first: GLuint, count: GLsizei, textures: GLuint*);

@foreign
typedef PFNGLBINDSAMPLERSPROC = func(first: GLuint, count: GLsizei, samplers: GLuint*);

@foreign
typedef PFNGLBINDIMAGETEXTURESPROC = func(first: GLuint, count: GLsizei, textures: GLuint*);

@foreign
typedef PFNGLBINDVERTEXBUFFERSPROC = func(first: GLuint, count: GLsizei, buffers: GLuint*, offsets: GLintptr*, strides: GLsizei*);

@foreign
func glBufferStorage(target: GLenum, size: GLsizeiptr, data: void const*, flags: GLbitfield);

@foreign
func glClearTexImage(texture: GLuint, level: GLint, format: GLenum, type: GLenum, data: void const*);

@foreign
func glClearTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, data: void const*);

@foreign
func glBindBuffersBase(target: GLenum, first: GLuint, count: GLsizei, buffers: GLuint*);

@foreign
func glBindBuffersRange(target: GLenum, first: GLuint, count: GLsizei, buffers: GLuint*, offsets: GLintptr*, sizes: GLsizeiptr*);

@foreign
func glBindTextures(first: GLuint, count: GLsizei, textures: GLuint*);

@foreign
func glBindSamplers(first: GLuint, count: GLsizei, samplers: GLuint*);

@foreign
func glBindImageTextures(first: GLuint, count: GLsizei, textures: GLuint*);

@foreign
func glBindVertexBuffers(first: GLuint, count: GLsizei, buffers: GLuint*, offsets: GLintptr*, strides: GLsizei*);

@foreign
typedef PFNGLCLIPCONTROLPROC = func(origin: GLenum, depth: GLenum);

@foreign
typedef PFNGLCREATETRANSFORMFEEDBACKSPROC = func(n: GLsizei, ids: GLuint*);

@foreign
typedef PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = func(xfb: GLuint, index: GLuint, buffer: GLuint);

@foreign
typedef PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = func(xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
typedef PFNGLGETTRANSFORMFEEDBACKIVPROC = func(xfb: GLuint, pname: GLenum, param: GLint*);

@foreign
typedef PFNGLGETTRANSFORMFEEDBACKI_VPROC = func(xfb: GLuint, pname: GLenum, index: GLuint, param: GLint*);

@foreign
typedef PFNGLGETTRANSFORMFEEDBACKI64_VPROC = func(xfb: GLuint, pname: GLenum, index: GLuint, param: GLint64*);

@foreign
typedef PFNGLCREATEBUFFERSPROC = func(n: GLsizei, buffers: GLuint*);

@foreign
typedef PFNGLNAMEDBUFFERSTORAGEPROC = func(buffer: GLuint, size: GLsizeiptr, data: void const*, flags: GLbitfield);

@foreign
typedef PFNGLNAMEDBUFFERDATAPROC = func(buffer: GLuint, size: GLsizeiptr, data: void const*, usage: GLenum);

@foreign
typedef PFNGLNAMEDBUFFERSUBDATAPROC = func(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void const*);

@foreign
typedef PFNGLCOPYNAMEDBUFFERSUBDATAPROC = func(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr);

@foreign
typedef PFNGLCLEARNAMEDBUFFERDATAPROC = func(buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: void const*);

@foreign
typedef PFNGLCLEARNAMEDBUFFERSUBDATAPROC = func(buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: void const*);

@foreign
typedef PFNGLMAPNAMEDBUFFERPROC = func(buffer: GLuint, access: GLenum): void*;

@foreign
typedef PFNGLMAPNAMEDBUFFERRANGEPROC = func(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): void*;

@foreign
typedef PFNGLUNMAPNAMEDBUFFERPROC = func(buffer: GLuint): GLboolean;

@foreign
typedef PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = func(buffer: GLuint, offset: GLintptr, length: GLsizeiptr);

@foreign
typedef PFNGLGETNAMEDBUFFERPARAMETERIVPROC = func(buffer: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = func(buffer: GLuint, pname: GLenum, params: GLint64*);

@foreign
typedef PFNGLGETNAMEDBUFFERPOINTERVPROC = func(buffer: GLuint, pname: GLenum, params: void**);

@foreign
typedef PFNGLGETNAMEDBUFFERSUBDATAPROC = func(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void*);

@foreign
typedef PFNGLCREATEFRAMEBUFFERSPROC = func(n: GLsizei, framebuffers: GLuint*);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = func(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = func(framebuffer: GLuint, pname: GLenum, param: GLint);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = func(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = func(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = func(framebuffer: GLuint, buf: GLenum);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = func(framebuffer: GLuint, n: GLsizei, bufs: GLenum*);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = func(framebuffer: GLuint, src: GLenum);

@foreign
typedef PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = func(framebuffer: GLuint, numAttachments: GLsizei, attachments: GLenum*);

@foreign
typedef PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = func(framebuffer: GLuint, numAttachments: GLsizei, attachments: GLenum*, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = func(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLint*);

@foreign
typedef PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = func(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLuint*);

@foreign
typedef PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = func(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLfloat*);

@foreign
typedef PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = func(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint);

@foreign
typedef PFNGLBLITNAMEDFRAMEBUFFERPROC = func(readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);

@foreign
typedef PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = func(framebuffer: GLuint, target: GLenum): GLenum;

@foreign
typedef PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = func(framebuffer: GLuint, pname: GLenum, param: GLint*);

@foreign
typedef PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = func(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLCREATERENDERBUFFERSPROC = func(n: GLsizei, renderbuffers: GLuint*);

@foreign
typedef PFNGLNAMEDRENDERBUFFERSTORAGEPROC = func(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = func(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = func(renderbuffer: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLCREATETEXTURESPROC = func(target: GLenum, n: GLsizei, textures: GLuint*);

@foreign
typedef PFNGLTEXTUREBUFFERPROC = func(texture: GLuint, internalformat: GLenum, buffer: GLuint);

@foreign
typedef PFNGLTEXTUREBUFFERRANGEPROC = func(texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
typedef PFNGLTEXTURESTORAGE1DPROC = func(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei);

@foreign
typedef PFNGLTEXTURESTORAGE2DPROC = func(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLTEXTURESTORAGE3DPROC = func(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei);

@foreign
typedef PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = func(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean);

@foreign
typedef PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = func(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean);

@foreign
typedef PFNGLTEXTURESUBIMAGE1DPROC = func(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXTURESUBIMAGE2DPROC = func(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXTURESUBIMAGE3DPROC = func(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = func(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = func(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = func(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOPYTEXTURESUBIMAGE1DPROC = func(texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);

@foreign
typedef PFNGLCOPYTEXTURESUBIMAGE2DPROC = func(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLCOPYTEXTURESUBIMAGE3DPROC = func(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLTEXTUREPARAMETERFPROC = func(texture: GLuint, pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLTEXTUREPARAMETERFVPROC = func(texture: GLuint, pname: GLenum, param: GLfloat*);

@foreign
typedef PFNGLTEXTUREPARAMETERIPROC = func(texture: GLuint, pname: GLenum, param: GLint);

@foreign
typedef PFNGLTEXTUREPARAMETERIIVPROC = func(texture: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLTEXTUREPARAMETERIUIVPROC = func(texture: GLuint, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLTEXTUREPARAMETERIVPROC = func(texture: GLuint, pname: GLenum, param: GLint*);

@foreign
typedef PFNGLGENERATETEXTUREMIPMAPPROC = func(texture: GLuint);

@foreign
typedef PFNGLBINDTEXTUREUNITPROC = func(unit: GLuint, texture: GLuint);

@foreign
typedef PFNGLGETTEXTUREIMAGEPROC = func(texture: GLuint, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: void*);

@foreign
typedef PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = func(texture: GLuint, level: GLint, bufSize: GLsizei, pixels: void*);

@foreign
typedef PFNGLGETTEXTURELEVELPARAMETERFVPROC = func(texture: GLuint, level: GLint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETTEXTURELEVELPARAMETERIVPROC = func(texture: GLuint, level: GLint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETTEXTUREPARAMETERFVPROC = func(texture: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETTEXTUREPARAMETERIIVPROC = func(texture: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETTEXTUREPARAMETERIUIVPROC = func(texture: GLuint, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLGETTEXTUREPARAMETERIVPROC = func(texture: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLCREATEVERTEXARRAYSPROC = func(n: GLsizei, arrays: GLuint*);

@foreign
typedef PFNGLDISABLEVERTEXARRAYATTRIBPROC = func(vaobj: GLuint, index: GLuint);

@foreign
typedef PFNGLENABLEVERTEXARRAYATTRIBPROC = func(vaobj: GLuint, index: GLuint);

@foreign
typedef PFNGLVERTEXARRAYELEMENTBUFFERPROC = func(vaobj: GLuint, buffer: GLuint);

@foreign
typedef PFNGLVERTEXARRAYVERTEXBUFFERPROC = func(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei);

@foreign
typedef PFNGLVERTEXARRAYVERTEXBUFFERSPROC = func(vaobj: GLuint, first: GLuint, count: GLsizei, buffers: GLuint*, offsets: GLintptr*, strides: GLsizei*);

@foreign
typedef PFNGLVERTEXARRAYATTRIBBINDINGPROC = func(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint);

@foreign
typedef PFNGLVERTEXARRAYATTRIBFORMATPROC = func(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint);

@foreign
typedef PFNGLVERTEXARRAYATTRIBIFORMATPROC = func(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint);

@foreign
typedef PFNGLVERTEXARRAYATTRIBLFORMATPROC = func(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint);

@foreign
typedef PFNGLVERTEXARRAYBINDINGDIVISORPROC = func(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint);

@foreign
typedef PFNGLGETVERTEXARRAYIVPROC = func(vaobj: GLuint, pname: GLenum, param: GLint*);

@foreign
typedef PFNGLGETVERTEXARRAYINDEXEDIVPROC = func(vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint*);

@foreign
typedef PFNGLGETVERTEXARRAYINDEXED64IVPROC = func(vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint64*);

@foreign
typedef PFNGLCREATESAMPLERSPROC = func(n: GLsizei, samplers: GLuint*);

@foreign
typedef PFNGLCREATEPROGRAMPIPELINESPROC = func(n: GLsizei, pipelines: GLuint*);

@foreign
typedef PFNGLCREATEQUERIESPROC = func(target: GLenum, n: GLsizei, ids: GLuint*);

@foreign
typedef PFNGLGETQUERYBUFFEROBJECTI64VPROC = func(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr);

@foreign
typedef PFNGLGETQUERYBUFFEROBJECTIVPROC = func(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr);

@foreign
typedef PFNGLGETQUERYBUFFEROBJECTUI64VPROC = func(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr);

@foreign
typedef PFNGLGETQUERYBUFFEROBJECTUIVPROC = func(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr);

@foreign
typedef PFNGLMEMORYBARRIERBYREGIONPROC = func(barriers: GLbitfield);

@foreign
typedef PFNGLGETTEXTURESUBIMAGEPROC = func(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: void*);

@foreign
typedef PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = func(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: void*);

@foreign
typedef PFNGLGETGRAPHICSRESETSTATUSPROC = func(): GLenum;

@foreign
typedef PFNGLGETNCOMPRESSEDTEXIMAGEPROC = func(target: GLenum, lod: GLint, bufSize: GLsizei, pixels: void*);

@foreign
typedef PFNGLGETNTEXIMAGEPROC = func(target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: void*);

@foreign
typedef PFNGLGETNUNIFORMDVPROC = func(program: GLuint, location: GLint, bufSize: GLsizei, params: GLdouble*);

@foreign
typedef PFNGLGETNUNIFORMFVPROC = func(program: GLuint, location: GLint, bufSize: GLsizei, params: GLfloat*);

@foreign
typedef PFNGLGETNUNIFORMIVPROC = func(program: GLuint, location: GLint, bufSize: GLsizei, params: GLint*);

@foreign
typedef PFNGLGETNUNIFORMUIVPROC = func(program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint*);

@foreign
typedef PFNGLREADNPIXELSPROC = func(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: void*);

@foreign
typedef PFNGLGETNMAPDVPROC = func(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLdouble*);

@foreign
typedef PFNGLGETNMAPFVPROC = func(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLGETNMAPIVPROC = func(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLint*);

@foreign
typedef PFNGLGETNPIXELMAPFVPROC = func(map: GLenum, bufSize: GLsizei, values: GLfloat*);

@foreign
typedef PFNGLGETNPIXELMAPUIVPROC = func(map: GLenum, bufSize: GLsizei, values: GLuint*);

@foreign
typedef PFNGLGETNPIXELMAPUSVPROC = func(map: GLenum, bufSize: GLsizei, values: GLushort*);

@foreign
typedef PFNGLGETNPOLYGONSTIPPLEPROC = func(bufSize: GLsizei, pattern: GLubyte*);

@foreign
typedef PFNGLGETNCOLORTABLEPROC = func(target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, table: void*);

@foreign
typedef PFNGLGETNCONVOLUTIONFILTERPROC = func(target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, image: void*);

@foreign
typedef PFNGLGETNSEPARABLEFILTERPROC = func(target: GLenum, format: GLenum, type: GLenum, rowBufSize: GLsizei, row: void*, columnBufSize: GLsizei, column: void*, span: void*);

@foreign
typedef PFNGLGETNHISTOGRAMPROC = func(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: void*);

@foreign
typedef PFNGLGETNMINMAXPROC = func(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: void*);

@foreign
typedef PFNGLTEXTUREBARRIERPROC = func();

@foreign
func glClipControl(origin: GLenum, depth: GLenum);

@foreign
func glCreateTransformFeedbacks(n: GLsizei, ids: GLuint*);

@foreign
func glTransformFeedbackBufferBase(xfb: GLuint, index: GLuint, buffer: GLuint);

@foreign
func glTransformFeedbackBufferRange(xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
func glGetTransformFeedbackiv(xfb: GLuint, pname: GLenum, param: GLint*);

@foreign
func glGetTransformFeedbacki_v(xfb: GLuint, pname: GLenum, index: GLuint, param: GLint*);

@foreign
func glGetTransformFeedbacki64_v(xfb: GLuint, pname: GLenum, index: GLuint, param: GLint64*);

@foreign
func glCreateBuffers(n: GLsizei, buffers: GLuint*);

@foreign
func glNamedBufferStorage(buffer: GLuint, size: GLsizeiptr, data: void const*, flags: GLbitfield);

@foreign
func glNamedBufferData(buffer: GLuint, size: GLsizeiptr, data: void const*, usage: GLenum);

@foreign
func glNamedBufferSubData(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void const*);

@foreign
func glCopyNamedBufferSubData(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr);

@foreign
func glClearNamedBufferData(buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: void const*);

@foreign
func glClearNamedBufferSubData(buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: void const*);

@foreign
func glMapNamedBuffer(buffer: GLuint, access: GLenum): void*;

@foreign
func glMapNamedBufferRange(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): void*;

@foreign
func glUnmapNamedBuffer(buffer: GLuint): GLboolean;

@foreign
func glFlushMappedNamedBufferRange(buffer: GLuint, offset: GLintptr, length: GLsizeiptr);

@foreign
func glGetNamedBufferParameteriv(buffer: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetNamedBufferParameteri64v(buffer: GLuint, pname: GLenum, params: GLint64*);

@foreign
func glGetNamedBufferPointerv(buffer: GLuint, pname: GLenum, params: void**);

@foreign
func glGetNamedBufferSubData(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void*);

@foreign
func glCreateFramebuffers(n: GLsizei, framebuffers: GLuint*);

@foreign
func glNamedFramebufferRenderbuffer(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);

@foreign
func glNamedFramebufferParameteri(framebuffer: GLuint, pname: GLenum, param: GLint);

@foreign
func glNamedFramebufferTexture(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint);

@foreign
func glNamedFramebufferTextureLayer(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);

@foreign
func glNamedFramebufferDrawBuffer(framebuffer: GLuint, buf: GLenum);

@foreign
func glNamedFramebufferDrawBuffers(framebuffer: GLuint, n: GLsizei, bufs: GLenum*);

@foreign
func glNamedFramebufferReadBuffer(framebuffer: GLuint, src: GLenum);

@foreign
func glInvalidateNamedFramebufferData(framebuffer: GLuint, numAttachments: GLsizei, attachments: GLenum*);

@foreign
func glInvalidateNamedFramebufferSubData(framebuffer: GLuint, numAttachments: GLsizei, attachments: GLenum*, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glClearNamedFramebufferiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLint*);

@foreign
func glClearNamedFramebufferuiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLuint*);

@foreign
func glClearNamedFramebufferfv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLfloat*);

@foreign
func glClearNamedFramebufferfi(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint);

@foreign
func glBlitNamedFramebuffer(readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);

@foreign
func glCheckNamedFramebufferStatus(framebuffer: GLuint, target: GLenum): GLenum;

@foreign
func glGetNamedFramebufferParameteriv(framebuffer: GLuint, pname: GLenum, param: GLint*);

@foreign
func glGetNamedFramebufferAttachmentParameteriv(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: GLint*);

@foreign
func glCreateRenderbuffers(n: GLsizei, renderbuffers: GLuint*);

@foreign
func glNamedRenderbufferStorage(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glNamedRenderbufferStorageMultisample(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glGetNamedRenderbufferParameteriv(renderbuffer: GLuint, pname: GLenum, params: GLint*);

@foreign
func glCreateTextures(target: GLenum, n: GLsizei, textures: GLuint*);

@foreign
func glTextureBuffer(texture: GLuint, internalformat: GLenum, buffer: GLuint);

@foreign
func glTextureBufferRange(texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
func glTextureStorage1D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei);

@foreign
func glTextureStorage2D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glTextureStorage3D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei);

@foreign
func glTextureStorage2DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean);

@foreign
func glTextureStorage3DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean);

@foreign
func glTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glCompressedTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
func glCompressedTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
func glCompressedTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
func glCopyTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);

@foreign
func glCopyTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glCopyTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glTextureParameterf(texture: GLuint, pname: GLenum, param: GLfloat);

@foreign
func glTextureParameterfv(texture: GLuint, pname: GLenum, param: GLfloat*);

@foreign
func glTextureParameteri(texture: GLuint, pname: GLenum, param: GLint);

@foreign
func glTextureParameterIiv(texture: GLuint, pname: GLenum, params: GLint*);

@foreign
func glTextureParameterIuiv(texture: GLuint, pname: GLenum, params: GLuint*);

@foreign
func glTextureParameteriv(texture: GLuint, pname: GLenum, param: GLint*);

@foreign
func glGenerateTextureMipmap(texture: GLuint);

@foreign
func glBindTextureUnit(unit: GLuint, texture: GLuint);

@foreign
func glGetTextureImage(texture: GLuint, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: void*);

@foreign
func glGetCompressedTextureImage(texture: GLuint, level: GLint, bufSize: GLsizei, pixels: void*);

@foreign
func glGetTextureLevelParameterfv(texture: GLuint, level: GLint, pname: GLenum, params: GLfloat*);

@foreign
func glGetTextureLevelParameteriv(texture: GLuint, level: GLint, pname: GLenum, params: GLint*);

@foreign
func glGetTextureParameterfv(texture: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glGetTextureParameterIiv(texture: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetTextureParameterIuiv(texture: GLuint, pname: GLenum, params: GLuint*);

@foreign
func glGetTextureParameteriv(texture: GLuint, pname: GLenum, params: GLint*);

@foreign
func glCreateVertexArrays(n: GLsizei, arrays: GLuint*);

@foreign
func glDisableVertexArrayAttrib(vaobj: GLuint, index: GLuint);

@foreign
func glEnableVertexArrayAttrib(vaobj: GLuint, index: GLuint);

@foreign
func glVertexArrayElementBuffer(vaobj: GLuint, buffer: GLuint);

@foreign
func glVertexArrayVertexBuffer(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei);

@foreign
func glVertexArrayVertexBuffers(vaobj: GLuint, first: GLuint, count: GLsizei, buffers: GLuint*, offsets: GLintptr*, strides: GLsizei*);

@foreign
func glVertexArrayAttribBinding(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint);

@foreign
func glVertexArrayAttribFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint);

@foreign
func glVertexArrayAttribIFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint);

@foreign
func glVertexArrayAttribLFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint);

@foreign
func glVertexArrayBindingDivisor(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint);

@foreign
func glGetVertexArrayiv(vaobj: GLuint, pname: GLenum, param: GLint*);

@foreign
func glGetVertexArrayIndexediv(vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint*);

@foreign
func glGetVertexArrayIndexed64iv(vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint64*);

@foreign
func glCreateSamplers(n: GLsizei, samplers: GLuint*);

@foreign
func glCreateProgramPipelines(n: GLsizei, pipelines: GLuint*);

@foreign
func glCreateQueries(target: GLenum, n: GLsizei, ids: GLuint*);

@foreign
func glGetQueryBufferObjecti64v(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr);

@foreign
func glGetQueryBufferObjectiv(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr);

@foreign
func glGetQueryBufferObjectui64v(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr);

@foreign
func glGetQueryBufferObjectuiv(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr);

@foreign
func glMemoryBarrierByRegion(barriers: GLbitfield);

@foreign
func glGetTextureSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: void*);

@foreign
func glGetCompressedTextureSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: void*);

@foreign
func glGetGraphicsResetStatus(): GLenum;

@foreign
func glGetnCompressedTexImage(target: GLenum, lod: GLint, bufSize: GLsizei, pixels: void*);

@foreign
func glGetnTexImage(target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: void*);

@foreign
func glGetnUniformdv(program: GLuint, location: GLint, bufSize: GLsizei, params: GLdouble*);

@foreign
func glGetnUniformfv(program: GLuint, location: GLint, bufSize: GLsizei, params: GLfloat*);

@foreign
func glGetnUniformiv(program: GLuint, location: GLint, bufSize: GLsizei, params: GLint*);

@foreign
func glGetnUniformuiv(program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint*);

@foreign
func glReadnPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: void*);

@foreign
func glGetnMapdv(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLdouble*);

@foreign
func glGetnMapfv(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLfloat*);

@foreign
func glGetnMapiv(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLint*);

@foreign
func glGetnPixelMapfv(map: GLenum, bufSize: GLsizei, values: GLfloat*);

@foreign
func glGetnPixelMapuiv(map: GLenum, bufSize: GLsizei, values: GLuint*);

@foreign
func glGetnPixelMapusv(map: GLenum, bufSize: GLsizei, values: GLushort*);

@foreign
func glGetnPolygonStipple(bufSize: GLsizei, pattern: GLubyte*);

@foreign
func glGetnColorTable(target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, table: void*);

@foreign
func glGetnConvolutionFilter(target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, image: void*);

@foreign
func glGetnSeparableFilter(target: GLenum, format: GLenum, type: GLenum, rowBufSize: GLsizei, row: void*, columnBufSize: GLsizei, column: void*, span: void*);

@foreign
func glGetnHistogram(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: void*);

@foreign
func glGetnMinmax(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: void*);

@foreign
func glTextureBarrier();

@foreign
typedef PFNGLSPECIALIZESHADERPROC = func(shader: GLuint, pEntryPoint: GLchar*, numSpecializationConstants: GLuint, pConstantIndex: GLuint*, pConstantValue: GLuint*);

@foreign
typedef PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = func(mode: GLenum, indirect: void const*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei);

@foreign
typedef PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = func(mode: GLenum, type: GLenum, indirect: void const*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei);

@foreign
typedef PFNGLPOLYGONOFFSETCLAMPPROC = func(factor: GLfloat, units: GLfloat, clamp: GLfloat);

@foreign
func glSpecializeShader(shader: GLuint, pEntryPoint: GLchar*, numSpecializationConstants: GLuint, pConstantIndex: GLuint*, pConstantValue: GLuint*);

@foreign
func glMultiDrawArraysIndirectCount(mode: GLenum, indirect: void const*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei);

@foreign
func glMultiDrawElementsIndirectCount(mode: GLenum, type: GLenum, indirect: void const*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei);

@foreign
func glPolygonOffsetClamp(factor: GLfloat, units: GLfloat, clamp: GLfloat);

@foreign
typedef PFNGLPRIMITIVEBOUNDINGBOXARBPROC = func(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat);

@foreign
func glPrimitiveBoundingBoxARB(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat);

@foreign
typedef GLuint64EXT = uint64_t;

@foreign
typedef PFNGLGETTEXTUREHANDLEARBPROC = func(texture: GLuint): GLuint64;

@foreign
typedef PFNGLGETTEXTURESAMPLERHANDLEARBPROC = func(texture: GLuint, sampler: GLuint): GLuint64;

@foreign
typedef PFNGLMAKETEXTUREHANDLERESIDENTARBPROC = func(handle: GLuint64);

@foreign
typedef PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC = func(handle: GLuint64);

@foreign
typedef PFNGLGETIMAGEHANDLEARBPROC = func(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64;

@foreign
typedef PFNGLMAKEIMAGEHANDLERESIDENTARBPROC = func(handle: GLuint64, access: GLenum);

@foreign
typedef PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC = func(handle: GLuint64);

@foreign
typedef PFNGLUNIFORMHANDLEUI64ARBPROC = func(location: GLint, value: GLuint64);

@foreign
typedef PFNGLUNIFORMHANDLEUI64VARBPROC = func(location: GLint, count: GLsizei, value: GLuint64*);

@foreign
typedef PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC = func(program: GLuint, location: GLint, value: GLuint64);

@foreign
typedef PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC = func(program: GLuint, location: GLint, count: GLsizei, values: GLuint64*);

@foreign
typedef PFNGLISTEXTUREHANDLERESIDENTARBPROC = func(handle: GLuint64): GLboolean;

@foreign
typedef PFNGLISIMAGEHANDLERESIDENTARBPROC = func(handle: GLuint64): GLboolean;

@foreign
typedef PFNGLVERTEXATTRIBL1UI64ARBPROC = func(index: GLuint, x: GLuint64EXT);

@foreign
typedef PFNGLVERTEXATTRIBL1UI64VARBPROC = func(index: GLuint, v: GLuint64EXT*);

@foreign
typedef PFNGLGETVERTEXATTRIBLUI64VARBPROC = func(index: GLuint, pname: GLenum, params: GLuint64EXT*);

@foreign
func glGetTextureHandleARB(texture: GLuint): GLuint64;

@foreign
func glGetTextureSamplerHandleARB(texture: GLuint, sampler: GLuint): GLuint64;

@foreign
func glMakeTextureHandleResidentARB(handle: GLuint64);

@foreign
func glMakeTextureHandleNonResidentARB(handle: GLuint64);

@foreign
func glGetImageHandleARB(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64;

@foreign
func glMakeImageHandleResidentARB(handle: GLuint64, access: GLenum);

@foreign
func glMakeImageHandleNonResidentARB(handle: GLuint64);

@foreign
func glUniformHandleui64ARB(location: GLint, value: GLuint64);

@foreign
func glUniformHandleui64vARB(location: GLint, count: GLsizei, value: GLuint64*);

@foreign
func glProgramUniformHandleui64ARB(program: GLuint, location: GLint, value: GLuint64);

@foreign
func glProgramUniformHandleui64vARB(program: GLuint, location: GLint, count: GLsizei, values: GLuint64*);

@foreign
func glIsTextureHandleResidentARB(handle: GLuint64): GLboolean;

@foreign
func glIsImageHandleResidentARB(handle: GLuint64): GLboolean;

@foreign
func glVertexAttribL1ui64ARB(index: GLuint, x: GLuint64EXT);

@foreign
func glVertexAttribL1ui64vARB(index: GLuint, v: GLuint64EXT*);

@foreign
func glGetVertexAttribLui64vARB(index: GLuint, pname: GLenum, params: GLuint64EXT*);

@foreign
struct _cl_context;

@foreign
struct _cl_event;

@foreign
typedef PFNGLCREATESYNCFROMCLEVENTARBPROC = func(context: _cl_context*, event: _cl_event*, flags: GLbitfield): GLsync;

@foreign
func glCreateSyncFromCLeventARB(context: _cl_context*, event: _cl_event*, flags: GLbitfield): GLsync;

@foreign
typedef PFNGLCLAMPCOLORARBPROC = func(target: GLenum, clamp: GLenum);

@foreign
func glClampColorARB(target: GLenum, clamp: GLenum);

@foreign
typedef PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC = func(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint);

@foreign
func glDispatchComputeGroupSizeARB(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint);

@foreign
typedef GLDEBUGPROCARB = func(source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: GLchar*, userParam: void const*);

@foreign
typedef PFNGLDEBUGMESSAGECONTROLARBPROC = func(source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: GLuint*, enabled: GLboolean);

@foreign
typedef PFNGLDEBUGMESSAGEINSERTARBPROC = func(source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: GLchar*);

@foreign
typedef PFNGLDEBUGMESSAGECALLBACKARBPROC = func(callback: GLDEBUGPROCARB, userParam: void const*);

@foreign
typedef PFNGLGETDEBUGMESSAGELOGARBPROC = func(count: GLuint, bufSize: GLsizei, sources: GLenum*, types: GLenum*, ids: GLuint*, severities: GLenum*, lengths: GLsizei*, messageLog: GLchar*): GLuint;

@foreign
func glDebugMessageControlARB(source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: GLuint*, enabled: GLboolean);

@foreign
func glDebugMessageInsertARB(source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: GLchar*);

@foreign
func glDebugMessageCallbackARB(callback: GLDEBUGPROCARB, userParam: void const*);

@foreign
func glGetDebugMessageLogARB(count: GLuint, bufSize: GLsizei, sources: GLenum*, types: GLenum*, ids: GLuint*, severities: GLenum*, lengths: GLsizei*, messageLog: GLchar*): GLuint;

@foreign
typedef PFNGLDRAWBUFFERSARBPROC = func(n: GLsizei, bufs: GLenum*);

@foreign
func glDrawBuffersARB(n: GLsizei, bufs: GLenum*);

@foreign
typedef PFNGLBLENDEQUATIONIARBPROC = func(buf: GLuint, mode: GLenum);

@foreign
typedef PFNGLBLENDEQUATIONSEPARATEIARBPROC = func(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);

@foreign
typedef PFNGLBLENDFUNCIARBPROC = func(buf: GLuint, src: GLenum, dst: GLenum);

@foreign
typedef PFNGLBLENDFUNCSEPARATEIARBPROC = func(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum);

@foreign
func glBlendEquationiARB(buf: GLuint, mode: GLenum);

@foreign
func glBlendEquationSeparateiARB(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);

@foreign
func glBlendFunciARB(buf: GLuint, src: GLenum, dst: GLenum);

@foreign
func glBlendFuncSeparateiARB(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum);

@foreign
typedef PFNGLDRAWARRAYSINSTANCEDARBPROC = func(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei);

@foreign
typedef PFNGLDRAWELEMENTSINSTANCEDARBPROC = func(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, primcount: GLsizei);

@foreign
func glDrawArraysInstancedARB(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei);

@foreign
func glDrawElementsInstancedARB(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, primcount: GLsizei);

@foreign
typedef PFNGLPROGRAMSTRINGARBPROC = func(target: GLenum, format: GLenum, len: GLsizei, string: void const*);

@foreign
typedef PFNGLBINDPROGRAMARBPROC = func(target: GLenum, program: GLuint);

@foreign
typedef PFNGLDELETEPROGRAMSARBPROC = func(n: GLsizei, programs: GLuint*);

@foreign
typedef PFNGLGENPROGRAMSARBPROC = func(n: GLsizei, programs: GLuint*);

@foreign
typedef PFNGLPROGRAMENVPARAMETER4DARBPROC = func(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLPROGRAMENVPARAMETER4DVARBPROC = func(target: GLenum, index: GLuint, params: GLdouble*);

@foreign
typedef PFNGLPROGRAMENVPARAMETER4FARBPROC = func(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
typedef PFNGLPROGRAMENVPARAMETER4FVARBPROC = func(target: GLenum, index: GLuint, params: GLfloat*);

@foreign
typedef PFNGLPROGRAMLOCALPARAMETER4DARBPROC = func(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLPROGRAMLOCALPARAMETER4DVARBPROC = func(target: GLenum, index: GLuint, params: GLdouble*);

@foreign
typedef PFNGLPROGRAMLOCALPARAMETER4FARBPROC = func(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
typedef PFNGLPROGRAMLOCALPARAMETER4FVARBPROC = func(target: GLenum, index: GLuint, params: GLfloat*);

@foreign
typedef PFNGLGETPROGRAMENVPARAMETERDVARBPROC = func(target: GLenum, index: GLuint, params: GLdouble*);

@foreign
typedef PFNGLGETPROGRAMENVPARAMETERFVARBPROC = func(target: GLenum, index: GLuint, params: GLfloat*);

@foreign
typedef PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC = func(target: GLenum, index: GLuint, params: GLdouble*);

@foreign
typedef PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC = func(target: GLenum, index: GLuint, params: GLfloat*);

@foreign
typedef PFNGLGETPROGRAMIVARBPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETPROGRAMSTRINGARBPROC = func(target: GLenum, pname: GLenum, string: void*);

@foreign
typedef PFNGLISPROGRAMARBPROC = func(program: GLuint): GLboolean;

@foreign
func glProgramStringARB(target: GLenum, format: GLenum, len: GLsizei, string: void const*);

@foreign
func glBindProgramARB(target: GLenum, program: GLuint);

@foreign
func glDeleteProgramsARB(n: GLsizei, programs: GLuint*);

@foreign
func glGenProgramsARB(n: GLsizei, programs: GLuint*);

@foreign
func glProgramEnvParameter4dARB(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glProgramEnvParameter4dvARB(target: GLenum, index: GLuint, params: GLdouble*);

@foreign
func glProgramEnvParameter4fARB(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glProgramEnvParameter4fvARB(target: GLenum, index: GLuint, params: GLfloat*);

@foreign
func glProgramLocalParameter4dARB(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glProgramLocalParameter4dvARB(target: GLenum, index: GLuint, params: GLdouble*);

@foreign
func glProgramLocalParameter4fARB(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glProgramLocalParameter4fvARB(target: GLenum, index: GLuint, params: GLfloat*);

@foreign
func glGetProgramEnvParameterdvARB(target: GLenum, index: GLuint, params: GLdouble*);

@foreign
func glGetProgramEnvParameterfvARB(target: GLenum, index: GLuint, params: GLfloat*);

@foreign
func glGetProgramLocalParameterdvARB(target: GLenum, index: GLuint, params: GLdouble*);

@foreign
func glGetProgramLocalParameterfvARB(target: GLenum, index: GLuint, params: GLfloat*);

@foreign
func glGetProgramivARB(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetProgramStringARB(target: GLenum, pname: GLenum, string: void*);

@foreign
func glIsProgramARB(program: GLuint): GLboolean;

@foreign
typedef PFNGLPROGRAMPARAMETERIARBPROC = func(program: GLuint, pname: GLenum, value: GLint);

@foreign
typedef PFNGLFRAMEBUFFERTEXTUREARBPROC = func(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint);

@foreign
typedef PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = func(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);

@foreign
typedef PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = func(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum);

@foreign
func glProgramParameteriARB(program: GLuint, pname: GLenum, value: GLint);

@foreign
func glFramebufferTextureARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint);

@foreign
func glFramebufferTextureLayerARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);

@foreign
func glFramebufferTextureFaceARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum);

@foreign
typedef PFNGLSPECIALIZESHADERARBPROC = func(shader: GLuint, pEntryPoint: GLchar*, numSpecializationConstants: GLuint, pConstantIndex: GLuint*, pConstantValue: GLuint*);

@foreign
func glSpecializeShaderARB(shader: GLuint, pEntryPoint: GLchar*, numSpecializationConstants: GLuint, pConstantIndex: GLuint*, pConstantValue: GLuint*);

@foreign
typedef PFNGLUNIFORM1I64ARBPROC = func(location: GLint, x: GLint64);

@foreign
typedef PFNGLUNIFORM2I64ARBPROC = func(location: GLint, x: GLint64, y: GLint64);

@foreign
typedef PFNGLUNIFORM3I64ARBPROC = func(location: GLint, x: GLint64, y: GLint64, z: GLint64);

@foreign
typedef PFNGLUNIFORM4I64ARBPROC = func(location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64);

@foreign
typedef PFNGLUNIFORM1I64VARBPROC = func(location: GLint, count: GLsizei, value: GLint64*);

@foreign
typedef PFNGLUNIFORM2I64VARBPROC = func(location: GLint, count: GLsizei, value: GLint64*);

@foreign
typedef PFNGLUNIFORM3I64VARBPROC = func(location: GLint, count: GLsizei, value: GLint64*);

@foreign
typedef PFNGLUNIFORM4I64VARBPROC = func(location: GLint, count: GLsizei, value: GLint64*);

@foreign
typedef PFNGLUNIFORM1UI64ARBPROC = func(location: GLint, x: GLuint64);

@foreign
typedef PFNGLUNIFORM2UI64ARBPROC = func(location: GLint, x: GLuint64, y: GLuint64);

@foreign
typedef PFNGLUNIFORM3UI64ARBPROC = func(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64);

@foreign
typedef PFNGLUNIFORM4UI64ARBPROC = func(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64);

@foreign
typedef PFNGLUNIFORM1UI64VARBPROC = func(location: GLint, count: GLsizei, value: GLuint64*);

@foreign
typedef PFNGLUNIFORM2UI64VARBPROC = func(location: GLint, count: GLsizei, value: GLuint64*);

@foreign
typedef PFNGLUNIFORM3UI64VARBPROC = func(location: GLint, count: GLsizei, value: GLuint64*);

@foreign
typedef PFNGLUNIFORM4UI64VARBPROC = func(location: GLint, count: GLsizei, value: GLuint64*);

@foreign
typedef PFNGLGETUNIFORMI64VARBPROC = func(program: GLuint, location: GLint, params: GLint64*);

@foreign
typedef PFNGLGETUNIFORMUI64VARBPROC = func(program: GLuint, location: GLint, params: GLuint64*);

@foreign
typedef PFNGLGETNUNIFORMI64VARBPROC = func(program: GLuint, location: GLint, bufSize: GLsizei, params: GLint64*);

@foreign
typedef PFNGLGETNUNIFORMUI64VARBPROC = func(program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint64*);

@foreign
typedef PFNGLPROGRAMUNIFORM1I64ARBPROC = func(program: GLuint, location: GLint, x: GLint64);

@foreign
typedef PFNGLPROGRAMUNIFORM2I64ARBPROC = func(program: GLuint, location: GLint, x: GLint64, y: GLint64);

@foreign
typedef PFNGLPROGRAMUNIFORM3I64ARBPROC = func(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64);

@foreign
typedef PFNGLPROGRAMUNIFORM4I64ARBPROC = func(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64);

@foreign
typedef PFNGLPROGRAMUNIFORM1I64VARBPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint64*);

@foreign
typedef PFNGLPROGRAMUNIFORM2I64VARBPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint64*);

@foreign
typedef PFNGLPROGRAMUNIFORM3I64VARBPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint64*);

@foreign
typedef PFNGLPROGRAMUNIFORM4I64VARBPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint64*);

@foreign
typedef PFNGLPROGRAMUNIFORM1UI64ARBPROC = func(program: GLuint, location: GLint, x: GLuint64);

@foreign
typedef PFNGLPROGRAMUNIFORM2UI64ARBPROC = func(program: GLuint, location: GLint, x: GLuint64, y: GLuint64);

@foreign
typedef PFNGLPROGRAMUNIFORM3UI64ARBPROC = func(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64);

@foreign
typedef PFNGLPROGRAMUNIFORM4UI64ARBPROC = func(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64);

@foreign
typedef PFNGLPROGRAMUNIFORM1UI64VARBPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint64*);

@foreign
typedef PFNGLPROGRAMUNIFORM2UI64VARBPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint64*);

@foreign
typedef PFNGLPROGRAMUNIFORM3UI64VARBPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint64*);

@foreign
typedef PFNGLPROGRAMUNIFORM4UI64VARBPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint64*);

@foreign
func glUniform1i64ARB(location: GLint, x: GLint64);

@foreign
func glUniform2i64ARB(location: GLint, x: GLint64, y: GLint64);

@foreign
func glUniform3i64ARB(location: GLint, x: GLint64, y: GLint64, z: GLint64);

@foreign
func glUniform4i64ARB(location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64);

@foreign
func glUniform1i64vARB(location: GLint, count: GLsizei, value: GLint64*);

@foreign
func glUniform2i64vARB(location: GLint, count: GLsizei, value: GLint64*);

@foreign
func glUniform3i64vARB(location: GLint, count: GLsizei, value: GLint64*);

@foreign
func glUniform4i64vARB(location: GLint, count: GLsizei, value: GLint64*);

@foreign
func glUniform1ui64ARB(location: GLint, x: GLuint64);

@foreign
func glUniform2ui64ARB(location: GLint, x: GLuint64, y: GLuint64);

@foreign
func glUniform3ui64ARB(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64);

@foreign
func glUniform4ui64ARB(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64);

@foreign
func glUniform1ui64vARB(location: GLint, count: GLsizei, value: GLuint64*);

@foreign
func glUniform2ui64vARB(location: GLint, count: GLsizei, value: GLuint64*);

@foreign
func glUniform3ui64vARB(location: GLint, count: GLsizei, value: GLuint64*);

@foreign
func glUniform4ui64vARB(location: GLint, count: GLsizei, value: GLuint64*);

@foreign
func glGetUniformi64vARB(program: GLuint, location: GLint, params: GLint64*);

@foreign
func glGetUniformui64vARB(program: GLuint, location: GLint, params: GLuint64*);

@foreign
func glGetnUniformi64vARB(program: GLuint, location: GLint, bufSize: GLsizei, params: GLint64*);

@foreign
func glGetnUniformui64vARB(program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint64*);

@foreign
func glProgramUniform1i64ARB(program: GLuint, location: GLint, x: GLint64);

@foreign
func glProgramUniform2i64ARB(program: GLuint, location: GLint, x: GLint64, y: GLint64);

@foreign
func glProgramUniform3i64ARB(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64);

@foreign
func glProgramUniform4i64ARB(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64);

@foreign
func glProgramUniform1i64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLint64*);

@foreign
func glProgramUniform2i64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLint64*);

@foreign
func glProgramUniform3i64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLint64*);

@foreign
func glProgramUniform4i64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLint64*);

@foreign
func glProgramUniform1ui64ARB(program: GLuint, location: GLint, x: GLuint64);

@foreign
func glProgramUniform2ui64ARB(program: GLuint, location: GLint, x: GLuint64, y: GLuint64);

@foreign
func glProgramUniform3ui64ARB(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64);

@foreign
func glProgramUniform4ui64ARB(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64);

@foreign
func glProgramUniform1ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLuint64*);

@foreign
func glProgramUniform2ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLuint64*);

@foreign
func glProgramUniform3ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLuint64*);

@foreign
func glProgramUniform4ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLuint64*);

@foreign
typedef GLhalfARB = ushort;

@foreign
typedef PFNGLCOLORTABLEPROC = func(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: void const*);

@foreign
typedef PFNGLCOLORTABLEPARAMETERFVPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLCOLORTABLEPARAMETERIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLCOPYCOLORTABLEPROC = func(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei);

@foreign
typedef PFNGLGETCOLORTABLEPROC = func(target: GLenum, format: GLenum, type: GLenum, table: void*);

@foreign
typedef PFNGLGETCOLORTABLEPARAMETERFVPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETCOLORTABLEPARAMETERIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLCOLORSUBTABLEPROC = func(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type: GLenum, data: void const*);

@foreign
typedef PFNGLCOPYCOLORSUBTABLEPROC = func(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei);

@foreign
typedef PFNGLCONVOLUTIONFILTER1DPROC = func(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, image: void const*);

@foreign
typedef PFNGLCONVOLUTIONFILTER2DPROC = func(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, image: void const*);

@foreign
typedef PFNGLCONVOLUTIONPARAMETERFPROC = func(target: GLenum, pname: GLenum, params: GLfloat);

@foreign
typedef PFNGLCONVOLUTIONPARAMETERFVPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLCONVOLUTIONPARAMETERIPROC = func(target: GLenum, pname: GLenum, params: GLint);

@foreign
typedef PFNGLCONVOLUTIONPARAMETERIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLCOPYCONVOLUTIONFILTER1DPROC = func(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei);

@foreign
typedef PFNGLCOPYCONVOLUTIONFILTER2DPROC = func(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLGETCONVOLUTIONFILTERPROC = func(target: GLenum, format: GLenum, type: GLenum, image: void*);

@foreign
typedef PFNGLGETCONVOLUTIONPARAMETERFVPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETCONVOLUTIONPARAMETERIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETSEPARABLEFILTERPROC = func(target: GLenum, format: GLenum, type: GLenum, row: void*, column: void*, span: void*);

@foreign
typedef PFNGLSEPARABLEFILTER2DPROC = func(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, row: void const*, column: void const*);

@foreign
typedef PFNGLGETHISTOGRAMPROC = func(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: void*);

@foreign
typedef PFNGLGETHISTOGRAMPARAMETERFVPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETHISTOGRAMPARAMETERIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETMINMAXPROC = func(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: void*);

@foreign
typedef PFNGLGETMINMAXPARAMETERFVPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETMINMAXPARAMETERIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLHISTOGRAMPROC = func(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean);

@foreign
typedef PFNGLMINMAXPROC = func(target: GLenum, internalformat: GLenum, sink: GLboolean);

@foreign
typedef PFNGLRESETHISTOGRAMPROC = func(target: GLenum);

@foreign
typedef PFNGLRESETMINMAXPROC = func(target: GLenum);

@foreign
func glColorTable(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: void const*);

@foreign
func glColorTableParameterfv(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glColorTableParameteriv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glCopyColorTable(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei);

@foreign
func glGetColorTable(target: GLenum, format: GLenum, type: GLenum, table: void*);

@foreign
func glGetColorTableParameterfv(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetColorTableParameteriv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glColorSubTable(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type: GLenum, data: void const*);

@foreign
func glCopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei);

@foreign
func glConvolutionFilter1D(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, image: void const*);

@foreign
func glConvolutionFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, image: void const*);

@foreign
func glConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat);

@foreign
func glConvolutionParameterfv(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint);

@foreign
func glConvolutionParameteriv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glCopyConvolutionFilter1D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei);

@foreign
func glCopyConvolutionFilter2D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glGetConvolutionFilter(target: GLenum, format: GLenum, type: GLenum, image: void*);

@foreign
func glGetConvolutionParameterfv(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetConvolutionParameteriv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetSeparableFilter(target: GLenum, format: GLenum, type: GLenum, row: void*, column: void*, span: void*);

@foreign
func glSeparableFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, row: void const*, column: void const*);

@foreign
func glGetHistogram(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: void*);

@foreign
func glGetHistogramParameterfv(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetHistogramParameteriv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetMinmax(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: void*);

@foreign
func glGetMinmaxParameterfv(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetMinmaxParameteriv(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glHistogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean);

@foreign
func glMinmax(target: GLenum, internalformat: GLenum, sink: GLboolean);

@foreign
func glResetHistogram(target: GLenum);

@foreign
func glResetMinmax(target: GLenum);

@foreign
typedef PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC = func(mode: GLenum, indirect: void const*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei);

@foreign
typedef PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC = func(mode: GLenum, type: GLenum, indirect: void const*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei);

@foreign
func glMultiDrawArraysIndirectCountARB(mode: GLenum, indirect: void const*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei);

@foreign
func glMultiDrawElementsIndirectCountARB(mode: GLenum, type: GLenum, indirect: void const*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei);

@foreign
typedef PFNGLVERTEXATTRIBDIVISORARBPROC = func(index: GLuint, divisor: GLuint);

@foreign
func glVertexAttribDivisorARB(index: GLuint, divisor: GLuint);

@foreign
typedef PFNGLCURRENTPALETTEMATRIXARBPROC = func(index: GLint);

@foreign
typedef PFNGLMATRIXINDEXUBVARBPROC = func(size: GLint, indices: GLubyte*);

@foreign
typedef PFNGLMATRIXINDEXUSVARBPROC = func(size: GLint, indices: GLushort*);

@foreign
typedef PFNGLMATRIXINDEXUIVARBPROC = func(size: GLint, indices: GLuint*);

@foreign
typedef PFNGLMATRIXINDEXPOINTERARBPROC = func(size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glCurrentPaletteMatrixARB(index: GLint);

@foreign
func glMatrixIndexubvARB(size: GLint, indices: GLubyte*);

@foreign
func glMatrixIndexusvARB(size: GLint, indices: GLushort*);

@foreign
func glMatrixIndexuivARB(size: GLint, indices: GLuint*);

@foreign
func glMatrixIndexPointerARB(size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLSAMPLECOVERAGEARBPROC = func(value: GLfloat, invert: GLboolean);

@foreign
func glSampleCoverageARB(value: GLfloat, invert: GLboolean);

@foreign
typedef PFNGLACTIVETEXTUREARBPROC = func(texture: GLenum);

@foreign
typedef PFNGLCLIENTACTIVETEXTUREARBPROC = func(texture: GLenum);

@foreign
typedef PFNGLMULTITEXCOORD1DARBPROC = func(target: GLenum, s: GLdouble);

@foreign
typedef PFNGLMULTITEXCOORD1DVARBPROC = func(target: GLenum, v: GLdouble*);

@foreign
typedef PFNGLMULTITEXCOORD1FARBPROC = func(target: GLenum, s: GLfloat);

@foreign
typedef PFNGLMULTITEXCOORD1FVARBPROC = func(target: GLenum, v: GLfloat*);

@foreign
typedef PFNGLMULTITEXCOORD1IARBPROC = func(target: GLenum, s: GLint);

@foreign
typedef PFNGLMULTITEXCOORD1IVARBPROC = func(target: GLenum, v: GLint*);

@foreign
typedef PFNGLMULTITEXCOORD1SARBPROC = func(target: GLenum, s: GLshort);

@foreign
typedef PFNGLMULTITEXCOORD1SVARBPROC = func(target: GLenum, v: GLshort*);

@foreign
typedef PFNGLMULTITEXCOORD2DARBPROC = func(target: GLenum, s: GLdouble, t: GLdouble);

@foreign
typedef PFNGLMULTITEXCOORD2DVARBPROC = func(target: GLenum, v: GLdouble*);

@foreign
typedef PFNGLMULTITEXCOORD2FARBPROC = func(target: GLenum, s: GLfloat, t: GLfloat);

@foreign
typedef PFNGLMULTITEXCOORD2FVARBPROC = func(target: GLenum, v: GLfloat*);

@foreign
typedef PFNGLMULTITEXCOORD2IARBPROC = func(target: GLenum, s: GLint, t: GLint);

@foreign
typedef PFNGLMULTITEXCOORD2IVARBPROC = func(target: GLenum, v: GLint*);

@foreign
typedef PFNGLMULTITEXCOORD2SARBPROC = func(target: GLenum, s: GLshort, t: GLshort);

@foreign
typedef PFNGLMULTITEXCOORD2SVARBPROC = func(target: GLenum, v: GLshort*);

@foreign
typedef PFNGLMULTITEXCOORD3DARBPROC = func(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble);

@foreign
typedef PFNGLMULTITEXCOORD3DVARBPROC = func(target: GLenum, v: GLdouble*);

@foreign
typedef PFNGLMULTITEXCOORD3FARBPROC = func(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat);

@foreign
typedef PFNGLMULTITEXCOORD3FVARBPROC = func(target: GLenum, v: GLfloat*);

@foreign
typedef PFNGLMULTITEXCOORD3IARBPROC = func(target: GLenum, s: GLint, t: GLint, r: GLint);

@foreign
typedef PFNGLMULTITEXCOORD3IVARBPROC = func(target: GLenum, v: GLint*);

@foreign
typedef PFNGLMULTITEXCOORD3SARBPROC = func(target: GLenum, s: GLshort, t: GLshort, r: GLshort);

@foreign
typedef PFNGLMULTITEXCOORD3SVARBPROC = func(target: GLenum, v: GLshort*);

@foreign
typedef PFNGLMULTITEXCOORD4DARBPROC = func(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);

@foreign
typedef PFNGLMULTITEXCOORD4DVARBPROC = func(target: GLenum, v: GLdouble*);

@foreign
typedef PFNGLMULTITEXCOORD4FARBPROC = func(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);

@foreign
typedef PFNGLMULTITEXCOORD4FVARBPROC = func(target: GLenum, v: GLfloat*);

@foreign
typedef PFNGLMULTITEXCOORD4IARBPROC = func(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint);

@foreign
typedef PFNGLMULTITEXCOORD4IVARBPROC = func(target: GLenum, v: GLint*);

@foreign
typedef PFNGLMULTITEXCOORD4SARBPROC = func(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort);

@foreign
typedef PFNGLMULTITEXCOORD4SVARBPROC = func(target: GLenum, v: GLshort*);

@foreign
func glActiveTextureARB(texture: GLenum);

@foreign
func glClientActiveTextureARB(texture: GLenum);

@foreign
func glMultiTexCoord1dARB(target: GLenum, s: GLdouble);

@foreign
func glMultiTexCoord1dvARB(target: GLenum, v: GLdouble*);

@foreign
func glMultiTexCoord1fARB(target: GLenum, s: GLfloat);

@foreign
func glMultiTexCoord1fvARB(target: GLenum, v: GLfloat*);

@foreign
func glMultiTexCoord1iARB(target: GLenum, s: GLint);

@foreign
func glMultiTexCoord1ivARB(target: GLenum, v: GLint*);

@foreign
func glMultiTexCoord1sARB(target: GLenum, s: GLshort);

@foreign
func glMultiTexCoord1svARB(target: GLenum, v: GLshort*);

@foreign
func glMultiTexCoord2dARB(target: GLenum, s: GLdouble, t: GLdouble);

@foreign
func glMultiTexCoord2dvARB(target: GLenum, v: GLdouble*);

@foreign
func glMultiTexCoord2fARB(target: GLenum, s: GLfloat, t: GLfloat);

@foreign
func glMultiTexCoord2fvARB(target: GLenum, v: GLfloat*);

@foreign
func glMultiTexCoord2iARB(target: GLenum, s: GLint, t: GLint);

@foreign
func glMultiTexCoord2ivARB(target: GLenum, v: GLint*);

@foreign
func glMultiTexCoord2sARB(target: GLenum, s: GLshort, t: GLshort);

@foreign
func glMultiTexCoord2svARB(target: GLenum, v: GLshort*);

@foreign
func glMultiTexCoord3dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble);

@foreign
func glMultiTexCoord3dvARB(target: GLenum, v: GLdouble*);

@foreign
func glMultiTexCoord3fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat);

@foreign
func glMultiTexCoord3fvARB(target: GLenum, v: GLfloat*);

@foreign
func glMultiTexCoord3iARB(target: GLenum, s: GLint, t: GLint, r: GLint);

@foreign
func glMultiTexCoord3ivARB(target: GLenum, v: GLint*);

@foreign
func glMultiTexCoord3sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort);

@foreign
func glMultiTexCoord3svARB(target: GLenum, v: GLshort*);

@foreign
func glMultiTexCoord4dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);

@foreign
func glMultiTexCoord4dvARB(target: GLenum, v: GLdouble*);

@foreign
func glMultiTexCoord4fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);

@foreign
func glMultiTexCoord4fvARB(target: GLenum, v: GLfloat*);

@foreign
func glMultiTexCoord4iARB(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint);

@foreign
func glMultiTexCoord4ivARB(target: GLenum, v: GLint*);

@foreign
func glMultiTexCoord4sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort);

@foreign
func glMultiTexCoord4svARB(target: GLenum, v: GLshort*);

@foreign
typedef PFNGLGENQUERIESARBPROC = func(n: GLsizei, ids: GLuint*);

@foreign
typedef PFNGLDELETEQUERIESARBPROC = func(n: GLsizei, ids: GLuint*);

@foreign
typedef PFNGLISQUERYARBPROC = func(id: GLuint): GLboolean;

@foreign
typedef PFNGLBEGINQUERYARBPROC = func(target: GLenum, id: GLuint);

@foreign
typedef PFNGLENDQUERYARBPROC = func(target: GLenum);

@foreign
typedef PFNGLGETQUERYIVARBPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETQUERYOBJECTIVARBPROC = func(id: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETQUERYOBJECTUIVARBPROC = func(id: GLuint, pname: GLenum, params: GLuint*);

@foreign
func glGenQueriesARB(n: GLsizei, ids: GLuint*);

@foreign
func glDeleteQueriesARB(n: GLsizei, ids: GLuint*);

@foreign
func glIsQueryARB(id: GLuint): GLboolean;

@foreign
func glBeginQueryARB(target: GLenum, id: GLuint);

@foreign
func glEndQueryARB(target: GLenum);

@foreign
func glGetQueryivARB(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetQueryObjectivARB(id: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetQueryObjectuivARB(id: GLuint, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLMAXSHADERCOMPILERTHREADSARBPROC = func(count: GLuint);

@foreign
func glMaxShaderCompilerThreadsARB(count: GLuint);

@foreign
typedef PFNGLPOINTPARAMETERFARBPROC = func(pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLPOINTPARAMETERFVARBPROC = func(pname: GLenum, params: GLfloat*);

@foreign
func glPointParameterfARB(pname: GLenum, param: GLfloat);

@foreign
func glPointParameterfvARB(pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETGRAPHICSRESETSTATUSARBPROC = func(): GLenum;

@foreign
typedef PFNGLGETNTEXIMAGEARBPROC = func(target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, img: void*);

@foreign
typedef PFNGLREADNPIXELSARBPROC = func(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: void*);

@foreign
typedef PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = func(target: GLenum, lod: GLint, bufSize: GLsizei, img: void*);

@foreign
typedef PFNGLGETNUNIFORMFVARBPROC = func(program: GLuint, location: GLint, bufSize: GLsizei, params: GLfloat*);

@foreign
typedef PFNGLGETNUNIFORMIVARBPROC = func(program: GLuint, location: GLint, bufSize: GLsizei, params: GLint*);

@foreign
typedef PFNGLGETNUNIFORMUIVARBPROC = func(program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint*);

@foreign
typedef PFNGLGETNUNIFORMDVARBPROC = func(program: GLuint, location: GLint, bufSize: GLsizei, params: GLdouble*);

@foreign
typedef PFNGLGETNMAPDVARBPROC = func(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLdouble*);

@foreign
typedef PFNGLGETNMAPFVARBPROC = func(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLGETNMAPIVARBPROC = func(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLint*);

@foreign
typedef PFNGLGETNPIXELMAPFVARBPROC = func(map: GLenum, bufSize: GLsizei, values: GLfloat*);

@foreign
typedef PFNGLGETNPIXELMAPUIVARBPROC = func(map: GLenum, bufSize: GLsizei, values: GLuint*);

@foreign
typedef PFNGLGETNPIXELMAPUSVARBPROC = func(map: GLenum, bufSize: GLsizei, values: GLushort*);

@foreign
typedef PFNGLGETNPOLYGONSTIPPLEARBPROC = func(bufSize: GLsizei, pattern: GLubyte*);

@foreign
typedef PFNGLGETNCOLORTABLEARBPROC = func(target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, table: void*);

@foreign
typedef PFNGLGETNCONVOLUTIONFILTERARBPROC = func(target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, image: void*);

@foreign
typedef PFNGLGETNSEPARABLEFILTERARBPROC = func(target: GLenum, format: GLenum, type: GLenum, rowBufSize: GLsizei, row: void*, columnBufSize: GLsizei, column: void*, span: void*);

@foreign
typedef PFNGLGETNHISTOGRAMARBPROC = func(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: void*);

@foreign
typedef PFNGLGETNMINMAXARBPROC = func(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: void*);

@foreign
func glGetGraphicsResetStatusARB(): GLenum;

@foreign
func glGetnTexImageARB(target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, img: void*);

@foreign
func glReadnPixelsARB(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: void*);

@foreign
func glGetnCompressedTexImageARB(target: GLenum, lod: GLint, bufSize: GLsizei, img: void*);

@foreign
func glGetnUniformfvARB(program: GLuint, location: GLint, bufSize: GLsizei, params: GLfloat*);

@foreign
func glGetnUniformivARB(program: GLuint, location: GLint, bufSize: GLsizei, params: GLint*);

@foreign
func glGetnUniformuivARB(program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint*);

@foreign
func glGetnUniformdvARB(program: GLuint, location: GLint, bufSize: GLsizei, params: GLdouble*);

@foreign
func glGetnMapdvARB(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLdouble*);

@foreign
func glGetnMapfvARB(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLfloat*);

@foreign
func glGetnMapivARB(target: GLenum, query: GLenum, bufSize: GLsizei, v: GLint*);

@foreign
func glGetnPixelMapfvARB(map: GLenum, bufSize: GLsizei, values: GLfloat*);

@foreign
func glGetnPixelMapuivARB(map: GLenum, bufSize: GLsizei, values: GLuint*);

@foreign
func glGetnPixelMapusvARB(map: GLenum, bufSize: GLsizei, values: GLushort*);

@foreign
func glGetnPolygonStippleARB(bufSize: GLsizei, pattern: GLubyte*);

@foreign
func glGetnColorTableARB(target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, table: void*);

@foreign
func glGetnConvolutionFilterARB(target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, image: void*);

@foreign
func glGetnSeparableFilterARB(target: GLenum, format: GLenum, type: GLenum, rowBufSize: GLsizei, row: void*, columnBufSize: GLsizei, column: void*, span: void*);

@foreign
func glGetnHistogramARB(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: void*);

@foreign
func glGetnMinmaxARB(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: void*);

@foreign
typedef PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = func(target: GLenum, start: GLuint, count: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = func(framebuffer: GLuint, start: GLuint, count: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLEVALUATEDEPTHVALUESARBPROC = func();

@foreign
func glFramebufferSampleLocationsfvARB(target: GLenum, start: GLuint, count: GLsizei, v: GLfloat*);

@foreign
func glNamedFramebufferSampleLocationsfvARB(framebuffer: GLuint, start: GLuint, count: GLsizei, v: GLfloat*);

@foreign
func glEvaluateDepthValuesARB();

@foreign
typedef PFNGLMINSAMPLESHADINGARBPROC = func(value: GLfloat);

@foreign
func glMinSampleShadingARB(value: GLfloat);

@foreign
typedef GLhandleARB = uint;

@foreign
typedef GLcharARB = char;

@foreign
typedef PFNGLDELETEOBJECTARBPROC = func(obj: GLhandleARB);

@foreign
typedef PFNGLGETHANDLEARBPROC = func(pname: GLenum): GLhandleARB;

@foreign
typedef PFNGLDETACHOBJECTARBPROC = func(containerObj: GLhandleARB, attachedObj: GLhandleARB);

@foreign
typedef PFNGLCREATESHADEROBJECTARBPROC = func(shaderType: GLenum): GLhandleARB;

@foreign
typedef PFNGLSHADERSOURCEARBPROC = func(shaderObj: GLhandleARB, count: GLsizei, string: GLcharARB**, length: GLint*);

@foreign
typedef PFNGLCOMPILESHADERARBPROC = func(shaderObj: GLhandleARB);

@foreign
typedef PFNGLCREATEPROGRAMOBJECTARBPROC = func(): GLhandleARB;

@foreign
typedef PFNGLATTACHOBJECTARBPROC = func(containerObj: GLhandleARB, obj: GLhandleARB);

@foreign
typedef PFNGLLINKPROGRAMARBPROC = func(programObj: GLhandleARB);

@foreign
typedef PFNGLUSEPROGRAMOBJECTARBPROC = func(programObj: GLhandleARB);

@foreign
typedef PFNGLVALIDATEPROGRAMARBPROC = func(programObj: GLhandleARB);

@foreign
typedef PFNGLUNIFORM1FARBPROC = func(location: GLint, v0: GLfloat);

@foreign
typedef PFNGLUNIFORM2FARBPROC = func(location: GLint, v0: GLfloat, v1: GLfloat);

@foreign
typedef PFNGLUNIFORM3FARBPROC = func(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);

@foreign
typedef PFNGLUNIFORM4FARBPROC = func(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);

@foreign
typedef PFNGLUNIFORM1IARBPROC = func(location: GLint, v0: GLint);

@foreign
typedef PFNGLUNIFORM2IARBPROC = func(location: GLint, v0: GLint, v1: GLint);

@foreign
typedef PFNGLUNIFORM3IARBPROC = func(location: GLint, v0: GLint, v1: GLint, v2: GLint);

@foreign
typedef PFNGLUNIFORM4IARBPROC = func(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);

@foreign
typedef PFNGLUNIFORM1FVARBPROC = func(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLUNIFORM2FVARBPROC = func(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLUNIFORM3FVARBPROC = func(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLUNIFORM4FVARBPROC = func(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLUNIFORM1IVARBPROC = func(location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLUNIFORM2IVARBPROC = func(location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLUNIFORM3IVARBPROC = func(location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLUNIFORM4IVARBPROC = func(location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLUNIFORMMATRIX2FVARBPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLUNIFORMMATRIX3FVARBPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLUNIFORMMATRIX4FVARBPROC = func(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLGETOBJECTPARAMETERFVARBPROC = func(obj: GLhandleARB, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETOBJECTPARAMETERIVARBPROC = func(obj: GLhandleARB, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETINFOLOGARBPROC = func(obj: GLhandleARB, maxLength: GLsizei, length: GLsizei*, infoLog: GLcharARB*);

@foreign
typedef PFNGLGETATTACHEDOBJECTSARBPROC = func(containerObj: GLhandleARB, maxCount: GLsizei, count: GLsizei*, obj: GLhandleARB*);

@foreign
typedef PFNGLGETUNIFORMLOCATIONARBPROC = func(programObj: GLhandleARB, name: GLcharARB*): GLint;

@foreign
typedef PFNGLGETACTIVEUNIFORMARBPROC = func(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: GLsizei*, size: GLint*, type: GLenum*, name: GLcharARB*);

@foreign
typedef PFNGLGETUNIFORMFVARBPROC = func(programObj: GLhandleARB, location: GLint, params: GLfloat*);

@foreign
typedef PFNGLGETUNIFORMIVARBPROC = func(programObj: GLhandleARB, location: GLint, params: GLint*);

@foreign
typedef PFNGLGETSHADERSOURCEARBPROC = func(obj: GLhandleARB, maxLength: GLsizei, length: GLsizei*, source: GLcharARB*);

@foreign
func glDeleteObjectARB(obj: GLhandleARB);

@foreign
func glGetHandleARB(pname: GLenum): GLhandleARB;

@foreign
func glDetachObjectARB(containerObj: GLhandleARB, attachedObj: GLhandleARB);

@foreign
func glCreateShaderObjectARB(shaderType: GLenum): GLhandleARB;

@foreign
func glShaderSourceARB(shaderObj: GLhandleARB, count: GLsizei, string: GLcharARB**, length: GLint*);

@foreign
func glCompileShaderARB(shaderObj: GLhandleARB);

@foreign
func glCreateProgramObjectARB(): GLhandleARB;

@foreign
func glAttachObjectARB(containerObj: GLhandleARB, obj: GLhandleARB);

@foreign
func glLinkProgramARB(programObj: GLhandleARB);

@foreign
func glUseProgramObjectARB(programObj: GLhandleARB);

@foreign
func glValidateProgramARB(programObj: GLhandleARB);

@foreign
func glUniform1fARB(location: GLint, v0: GLfloat);

@foreign
func glUniform2fARB(location: GLint, v0: GLfloat, v1: GLfloat);

@foreign
func glUniform3fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);

@foreign
func glUniform4fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);

@foreign
func glUniform1iARB(location: GLint, v0: GLint);

@foreign
func glUniform2iARB(location: GLint, v0: GLint, v1: GLint);

@foreign
func glUniform3iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint);

@foreign
func glUniform4iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);

@foreign
func glUniform1fvARB(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glUniform2fvARB(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glUniform3fvARB(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glUniform4fvARB(location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glUniform1ivARB(location: GLint, count: GLsizei, value: GLint*);

@foreign
func glUniform2ivARB(location: GLint, count: GLsizei, value: GLint*);

@foreign
func glUniform3ivARB(location: GLint, count: GLsizei, value: GLint*);

@foreign
func glUniform4ivARB(location: GLint, count: GLsizei, value: GLint*);

@foreign
func glUniformMatrix2fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glUniformMatrix3fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glUniformMatrix4fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glGetObjectParameterfvARB(obj: GLhandleARB, pname: GLenum, params: GLfloat*);

@foreign
func glGetObjectParameterivARB(obj: GLhandleARB, pname: GLenum, params: GLint*);

@foreign
func glGetInfoLogARB(obj: GLhandleARB, maxLength: GLsizei, length: GLsizei*, infoLog: GLcharARB*);

@foreign
func glGetAttachedObjectsARB(containerObj: GLhandleARB, maxCount: GLsizei, count: GLsizei*, obj: GLhandleARB*);

@foreign
func glGetUniformLocationARB(programObj: GLhandleARB, name: GLcharARB*): GLint;

@foreign
func glGetActiveUniformARB(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: GLsizei*, size: GLint*, type: GLenum*, name: GLcharARB*);

@foreign
func glGetUniformfvARB(programObj: GLhandleARB, location: GLint, params: GLfloat*);

@foreign
func glGetUniformivARB(programObj: GLhandleARB, location: GLint, params: GLint*);

@foreign
func glGetShaderSourceARB(obj: GLhandleARB, maxLength: GLsizei, length: GLsizei*, source: GLcharARB*);

@foreign
typedef PFNGLNAMEDSTRINGARBPROC = func(type: GLenum, namelen: GLint, name: GLchar*, stringlen: GLint, string: GLchar*);

@foreign
typedef PFNGLDELETENAMEDSTRINGARBPROC = func(namelen: GLint, name: GLchar*);

@foreign
typedef PFNGLCOMPILESHADERINCLUDEARBPROC = func(shader: GLuint, count: GLsizei, path: GLchar* const*, length: GLint*);

@foreign
typedef PFNGLISNAMEDSTRINGARBPROC = func(namelen: GLint, name: GLchar*): GLboolean;

@foreign
typedef PFNGLGETNAMEDSTRINGARBPROC = func(namelen: GLint, name: GLchar*, bufSize: GLsizei, stringlen: GLint*, string: GLchar*);

@foreign
typedef PFNGLGETNAMEDSTRINGIVARBPROC = func(namelen: GLint, name: GLchar*, pname: GLenum, params: GLint*);

@foreign
func glNamedStringARB(type: GLenum, namelen: GLint, name: GLchar*, stringlen: GLint, string: GLchar*);

@foreign
func glDeleteNamedStringARB(namelen: GLint, name: GLchar*);

@foreign
func glCompileShaderIncludeARB(shader: GLuint, count: GLsizei, path: GLchar* const*, length: GLint*);

@foreign
func glIsNamedStringARB(namelen: GLint, name: GLchar*): GLboolean;

@foreign
func glGetNamedStringARB(namelen: GLint, name: GLchar*, bufSize: GLsizei, stringlen: GLint*, string: GLchar*);

@foreign
func glGetNamedStringivARB(namelen: GLint, name: GLchar*, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLBUFFERPAGECOMMITMENTARBPROC = func(target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean);

@foreign
typedef PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC = func(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean);

@foreign
typedef PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC = func(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean);

@foreign
func glBufferPageCommitmentARB(target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean);

@foreign
func glNamedBufferPageCommitmentEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean);

@foreign
func glNamedBufferPageCommitmentARB(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean);

@foreign
typedef PFNGLTEXPAGECOMMITMENTARBPROC = func(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean);

@foreign
func glTexPageCommitmentARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean);

@foreign
typedef PFNGLTEXBUFFERARBPROC = func(target: GLenum, internalformat: GLenum, buffer: GLuint);

@foreign
func glTexBufferARB(target: GLenum, internalformat: GLenum, buffer: GLuint);

@foreign
typedef PFNGLCOMPRESSEDTEXIMAGE3DARBPROC = func(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXIMAGE2DARBPROC = func(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXIMAGE1DARBPROC = func(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC = func(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC = func(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC = func(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
typedef PFNGLGETCOMPRESSEDTEXIMAGEARBPROC = func(target: GLenum, level: GLint, img: void*);

@foreign
func glCompressedTexImage3DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: void const*);

@foreign
func glCompressedTexImage2DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: void const*);

@foreign
func glCompressedTexImage1DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: void const*);

@foreign
func glCompressedTexSubImage3DARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
func glCompressedTexSubImage2DARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
func glCompressedTexSubImage1DARB(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: void const*);

@foreign
func glGetCompressedTexImageARB(target: GLenum, level: GLint, img: void*);

@foreign
typedef PFNGLLOADTRANSPOSEMATRIXFARBPROC = func(m: GLfloat*);

@foreign
typedef PFNGLLOADTRANSPOSEMATRIXDARBPROC = func(m: GLdouble*);

@foreign
typedef PFNGLMULTTRANSPOSEMATRIXFARBPROC = func(m: GLfloat*);

@foreign
typedef PFNGLMULTTRANSPOSEMATRIXDARBPROC = func(m: GLdouble*);

@foreign
func glLoadTransposeMatrixfARB(m: GLfloat*);

@foreign
func glLoadTransposeMatrixdARB(m: GLdouble*);

@foreign
func glMultTransposeMatrixfARB(m: GLfloat*);

@foreign
func glMultTransposeMatrixdARB(m: GLdouble*);

@foreign
typedef PFNGLWEIGHTBVARBPROC = func(size: GLint, weights: GLbyte*);

@foreign
typedef PFNGLWEIGHTSVARBPROC = func(size: GLint, weights: GLshort*);

@foreign
typedef PFNGLWEIGHTIVARBPROC = func(size: GLint, weights: GLint*);

@foreign
typedef PFNGLWEIGHTFVARBPROC = func(size: GLint, weights: GLfloat*);

@foreign
typedef PFNGLWEIGHTDVARBPROC = func(size: GLint, weights: GLdouble*);

@foreign
typedef PFNGLWEIGHTUBVARBPROC = func(size: GLint, weights: GLubyte*);

@foreign
typedef PFNGLWEIGHTUSVARBPROC = func(size: GLint, weights: GLushort*);

@foreign
typedef PFNGLWEIGHTUIVARBPROC = func(size: GLint, weights: GLuint*);

@foreign
typedef PFNGLWEIGHTPOINTERARBPROC = func(size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLVERTEXBLENDARBPROC = func(count: GLint);

@foreign
func glWeightbvARB(size: GLint, weights: GLbyte*);

@foreign
func glWeightsvARB(size: GLint, weights: GLshort*);

@foreign
func glWeightivARB(size: GLint, weights: GLint*);

@foreign
func glWeightfvARB(size: GLint, weights: GLfloat*);

@foreign
func glWeightdvARB(size: GLint, weights: GLdouble*);

@foreign
func glWeightubvARB(size: GLint, weights: GLubyte*);

@foreign
func glWeightusvARB(size: GLint, weights: GLushort*);

@foreign
func glWeightuivARB(size: GLint, weights: GLuint*);

@foreign
func glWeightPointerARB(size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glVertexBlendARB(count: GLint);

@foreign
typedef GLsizeiptrARB = ssize;

@foreign
typedef GLintptrARB = ssize;

@foreign
typedef PFNGLBINDBUFFERARBPROC = func(target: GLenum, buffer: GLuint);

@foreign
typedef PFNGLDELETEBUFFERSARBPROC = func(n: GLsizei, buffers: GLuint*);

@foreign
typedef PFNGLGENBUFFERSARBPROC = func(n: GLsizei, buffers: GLuint*);

@foreign
typedef PFNGLISBUFFERARBPROC = func(buffer: GLuint): GLboolean;

@foreign
typedef PFNGLBUFFERDATAARBPROC = func(target: GLenum, size: GLsizeiptrARB, data: void const*, usage: GLenum);

@foreign
typedef PFNGLBUFFERSUBDATAARBPROC = func(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: void const*);

@foreign
typedef PFNGLGETBUFFERSUBDATAARBPROC = func(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: void*);

@foreign
typedef PFNGLMAPBUFFERARBPROC = func(target: GLenum, access: GLenum): void*;

@foreign
typedef PFNGLUNMAPBUFFERARBPROC = func(target: GLenum): GLboolean;

@foreign
typedef PFNGLGETBUFFERPARAMETERIVARBPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETBUFFERPOINTERVARBPROC = func(target: GLenum, pname: GLenum, params: void**);

@foreign
func glBindBufferARB(target: GLenum, buffer: GLuint);

@foreign
func glDeleteBuffersARB(n: GLsizei, buffers: GLuint*);

@foreign
func glGenBuffersARB(n: GLsizei, buffers: GLuint*);

@foreign
func glIsBufferARB(buffer: GLuint): GLboolean;

@foreign
func glBufferDataARB(target: GLenum, size: GLsizeiptrARB, data: void const*, usage: GLenum);

@foreign
func glBufferSubDataARB(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: void const*);

@foreign
func glGetBufferSubDataARB(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: void*);

@foreign
func glMapBufferARB(target: GLenum, access: GLenum): void*;

@foreign
func glUnmapBufferARB(target: GLenum): GLboolean;

@foreign
func glGetBufferParameterivARB(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetBufferPointervARB(target: GLenum, pname: GLenum, params: void**);

@foreign
typedef PFNGLVERTEXATTRIB1DARBPROC = func(index: GLuint, x: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIB1DVARBPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIB1FARBPROC = func(index: GLuint, x: GLfloat);

@foreign
typedef PFNGLVERTEXATTRIB1FVARBPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIB1SARBPROC = func(index: GLuint, x: GLshort);

@foreign
typedef PFNGLVERTEXATTRIB1SVARBPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB2DARBPROC = func(index: GLuint, x: GLdouble, y: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIB2DVARBPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIB2FARBPROC = func(index: GLuint, x: GLfloat, y: GLfloat);

@foreign
typedef PFNGLVERTEXATTRIB2FVARBPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIB2SARBPROC = func(index: GLuint, x: GLshort, y: GLshort);

@foreign
typedef PFNGLVERTEXATTRIB2SVARBPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB3DARBPROC = func(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIB3DVARBPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIB3FARBPROC = func(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLVERTEXATTRIB3FVARBPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIB3SARBPROC = func(index: GLuint, x: GLshort, y: GLshort, z: GLshort);

@foreign
typedef PFNGLVERTEXATTRIB3SVARBPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB4NBVARBPROC = func(index: GLuint, v: GLbyte*);

@foreign
typedef PFNGLVERTEXATTRIB4NIVARBPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLVERTEXATTRIB4NSVARBPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB4NUBARBPROC = func(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);

@foreign
typedef PFNGLVERTEXATTRIB4NUBVARBPROC = func(index: GLuint, v: GLubyte*);

@foreign
typedef PFNGLVERTEXATTRIB4NUIVARBPROC = func(index: GLuint, v: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIB4NUSVARBPROC = func(index: GLuint, v: GLushort*);

@foreign
typedef PFNGLVERTEXATTRIB4BVARBPROC = func(index: GLuint, v: GLbyte*);

@foreign
typedef PFNGLVERTEXATTRIB4DARBPROC = func(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIB4DVARBPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIB4FARBPROC = func(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
typedef PFNGLVERTEXATTRIB4FVARBPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIB4IVARBPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLVERTEXATTRIB4SARBPROC = func(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);

@foreign
typedef PFNGLVERTEXATTRIB4SVARBPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB4UBVARBPROC = func(index: GLuint, v: GLubyte*);

@foreign
typedef PFNGLVERTEXATTRIB4UIVARBPROC = func(index: GLuint, v: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIB4USVARBPROC = func(index: GLuint, v: GLushort*);

@foreign
typedef PFNGLVERTEXATTRIBPOINTERARBPROC = func(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLENABLEVERTEXATTRIBARRAYARBPROC = func(index: GLuint);

@foreign
typedef PFNGLDISABLEVERTEXATTRIBARRAYARBPROC = func(index: GLuint);

@foreign
typedef PFNGLGETVERTEXATTRIBDVARBPROC = func(index: GLuint, pname: GLenum, params: GLdouble*);

@foreign
typedef PFNGLGETVERTEXATTRIBFVARBPROC = func(index: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETVERTEXATTRIBIVARBPROC = func(index: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETVERTEXATTRIBPOINTERVARBPROC = func(index: GLuint, pname: GLenum, pointer: void**);

@foreign
func glVertexAttrib1dARB(index: GLuint, x: GLdouble);

@foreign
func glVertexAttrib1dvARB(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttrib1fARB(index: GLuint, x: GLfloat);

@foreign
func glVertexAttrib1fvARB(index: GLuint, v: GLfloat*);

@foreign
func glVertexAttrib1sARB(index: GLuint, x: GLshort);

@foreign
func glVertexAttrib1svARB(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib2dARB(index: GLuint, x: GLdouble, y: GLdouble);

@foreign
func glVertexAttrib2dvARB(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttrib2fARB(index: GLuint, x: GLfloat, y: GLfloat);

@foreign
func glVertexAttrib2fvARB(index: GLuint, v: GLfloat*);

@foreign
func glVertexAttrib2sARB(index: GLuint, x: GLshort, y: GLshort);

@foreign
func glVertexAttrib2svARB(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib3dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glVertexAttrib3dvARB(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttrib3fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glVertexAttrib3fvARB(index: GLuint, v: GLfloat*);

@foreign
func glVertexAttrib3sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort);

@foreign
func glVertexAttrib3svARB(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib4NbvARB(index: GLuint, v: GLbyte*);

@foreign
func glVertexAttrib4NivARB(index: GLuint, v: GLint*);

@foreign
func glVertexAttrib4NsvARB(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib4NubARB(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);

@foreign
func glVertexAttrib4NubvARB(index: GLuint, v: GLubyte*);

@foreign
func glVertexAttrib4NuivARB(index: GLuint, v: GLuint*);

@foreign
func glVertexAttrib4NusvARB(index: GLuint, v: GLushort*);

@foreign
func glVertexAttrib4bvARB(index: GLuint, v: GLbyte*);

@foreign
func glVertexAttrib4dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glVertexAttrib4dvARB(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttrib4fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glVertexAttrib4fvARB(index: GLuint, v: GLfloat*);

@foreign
func glVertexAttrib4ivARB(index: GLuint, v: GLint*);

@foreign
func glVertexAttrib4sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);

@foreign
func glVertexAttrib4svARB(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib4ubvARB(index: GLuint, v: GLubyte*);

@foreign
func glVertexAttrib4uivARB(index: GLuint, v: GLuint*);

@foreign
func glVertexAttrib4usvARB(index: GLuint, v: GLushort*);

@foreign
func glVertexAttribPointerARB(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: void const*);

@foreign
func glEnableVertexAttribArrayARB(index: GLuint);

@foreign
func glDisableVertexAttribArrayARB(index: GLuint);

@foreign
func glGetVertexAttribdvARB(index: GLuint, pname: GLenum, params: GLdouble*);

@foreign
func glGetVertexAttribfvARB(index: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glGetVertexAttribivARB(index: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetVertexAttribPointervARB(index: GLuint, pname: GLenum, pointer: void**);

@foreign
typedef PFNGLBINDATTRIBLOCATIONARBPROC = func(programObj: GLhandleARB, index: GLuint, name: GLcharARB*);

@foreign
typedef PFNGLGETACTIVEATTRIBARBPROC = func(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: GLsizei*, size: GLint*, type: GLenum*, name: GLcharARB*);

@foreign
typedef PFNGLGETATTRIBLOCATIONARBPROC = func(programObj: GLhandleARB, name: GLcharARB*): GLint;

@foreign
func glBindAttribLocationARB(programObj: GLhandleARB, index: GLuint, name: GLcharARB*);

@foreign
func glGetActiveAttribARB(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: GLsizei*, size: GLint*, type: GLenum*, name: GLcharARB*);

@foreign
func glGetAttribLocationARB(programObj: GLhandleARB, name: GLcharARB*): GLint;

@foreign
typedef PFNGLWINDOWPOS2DARBPROC = func(x: GLdouble, y: GLdouble);

@foreign
typedef PFNGLWINDOWPOS2DVARBPROC = func(v: GLdouble*);

@foreign
typedef PFNGLWINDOWPOS2FARBPROC = func(x: GLfloat, y: GLfloat);

@foreign
typedef PFNGLWINDOWPOS2FVARBPROC = func(v: GLfloat*);

@foreign
typedef PFNGLWINDOWPOS2IARBPROC = func(x: GLint, y: GLint);

@foreign
typedef PFNGLWINDOWPOS2IVARBPROC = func(v: GLint*);

@foreign
typedef PFNGLWINDOWPOS2SARBPROC = func(x: GLshort, y: GLshort);

@foreign
typedef PFNGLWINDOWPOS2SVARBPROC = func(v: GLshort*);

@foreign
typedef PFNGLWINDOWPOS3DARBPROC = func(x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLWINDOWPOS3DVARBPROC = func(v: GLdouble*);

@foreign
typedef PFNGLWINDOWPOS3FARBPROC = func(x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLWINDOWPOS3FVARBPROC = func(v: GLfloat*);

@foreign
typedef PFNGLWINDOWPOS3IARBPROC = func(x: GLint, y: GLint, z: GLint);

@foreign
typedef PFNGLWINDOWPOS3IVARBPROC = func(v: GLint*);

@foreign
typedef PFNGLWINDOWPOS3SARBPROC = func(x: GLshort, y: GLshort, z: GLshort);

@foreign
typedef PFNGLWINDOWPOS3SVARBPROC = func(v: GLshort*);

@foreign
func glWindowPos2dARB(x: GLdouble, y: GLdouble);

@foreign
func glWindowPos2dvARB(v: GLdouble*);

@foreign
func glWindowPos2fARB(x: GLfloat, y: GLfloat);

@foreign
func glWindowPos2fvARB(v: GLfloat*);

@foreign
func glWindowPos2iARB(x: GLint, y: GLint);

@foreign
func glWindowPos2ivARB(v: GLint*);

@foreign
func glWindowPos2sARB(x: GLshort, y: GLshort);

@foreign
func glWindowPos2svARB(v: GLshort*);

@foreign
func glWindowPos3dARB(x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glWindowPos3dvARB(v: GLdouble*);

@foreign
func glWindowPos3fARB(x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glWindowPos3fvARB(v: GLfloat*);

@foreign
func glWindowPos3iARB(x: GLint, y: GLint, z: GLint);

@foreign
func glWindowPos3ivARB(v: GLint*);

@foreign
func glWindowPos3sARB(x: GLshort, y: GLshort, z: GLshort);

@foreign
func glWindowPos3svARB(v: GLshort*);

@foreign
typedef PFNGLBLENDBARRIERKHRPROC = func();

@foreign
func glBlendBarrierKHR();

@foreign
typedef PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = func(count: GLuint);

@foreign
func glMaxShaderCompilerThreadsKHR(count: GLuint);

@foreign
typedef PFNGLMULTITEXCOORD1BOESPROC = func(texture: GLenum, s: GLbyte);

@foreign
typedef PFNGLMULTITEXCOORD1BVOESPROC = func(texture: GLenum, coords: GLbyte*);

@foreign
typedef PFNGLMULTITEXCOORD2BOESPROC = func(texture: GLenum, s: GLbyte, t: GLbyte);

@foreign
typedef PFNGLMULTITEXCOORD2BVOESPROC = func(texture: GLenum, coords: GLbyte*);

@foreign
typedef PFNGLMULTITEXCOORD3BOESPROC = func(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte);

@foreign
typedef PFNGLMULTITEXCOORD3BVOESPROC = func(texture: GLenum, coords: GLbyte*);

@foreign
typedef PFNGLMULTITEXCOORD4BOESPROC = func(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte);

@foreign
typedef PFNGLMULTITEXCOORD4BVOESPROC = func(texture: GLenum, coords: GLbyte*);

@foreign
typedef PFNGLTEXCOORD1BOESPROC = func(s: GLbyte);

@foreign
typedef PFNGLTEXCOORD1BVOESPROC = func(coords: GLbyte*);

@foreign
typedef PFNGLTEXCOORD2BOESPROC = func(s: GLbyte, t: GLbyte);

@foreign
typedef PFNGLTEXCOORD2BVOESPROC = func(coords: GLbyte*);

@foreign
typedef PFNGLTEXCOORD3BOESPROC = func(s: GLbyte, t: GLbyte, r: GLbyte);

@foreign
typedef PFNGLTEXCOORD3BVOESPROC = func(coords: GLbyte*);

@foreign
typedef PFNGLTEXCOORD4BOESPROC = func(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte);

@foreign
typedef PFNGLTEXCOORD4BVOESPROC = func(coords: GLbyte*);

@foreign
typedef PFNGLVERTEX2BOESPROC = func(x: GLbyte, y: GLbyte);

@foreign
typedef PFNGLVERTEX2BVOESPROC = func(coords: GLbyte*);

@foreign
typedef PFNGLVERTEX3BOESPROC = func(x: GLbyte, y: GLbyte, z: GLbyte);

@foreign
typedef PFNGLVERTEX3BVOESPROC = func(coords: GLbyte*);

@foreign
typedef PFNGLVERTEX4BOESPROC = func(x: GLbyte, y: GLbyte, z: GLbyte, w: GLbyte);

@foreign
typedef PFNGLVERTEX4BVOESPROC = func(coords: GLbyte*);

@foreign
func glMultiTexCoord1bOES(texture: GLenum, s: GLbyte);

@foreign
func glMultiTexCoord1bvOES(texture: GLenum, coords: GLbyte*);

@foreign
func glMultiTexCoord2bOES(texture: GLenum, s: GLbyte, t: GLbyte);

@foreign
func glMultiTexCoord2bvOES(texture: GLenum, coords: GLbyte*);

@foreign
func glMultiTexCoord3bOES(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte);

@foreign
func glMultiTexCoord3bvOES(texture: GLenum, coords: GLbyte*);

@foreign
func glMultiTexCoord4bOES(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte);

@foreign
func glMultiTexCoord4bvOES(texture: GLenum, coords: GLbyte*);

@foreign
func glTexCoord1bOES(s: GLbyte);

@foreign
func glTexCoord1bvOES(coords: GLbyte*);

@foreign
func glTexCoord2bOES(s: GLbyte, t: GLbyte);

@foreign
func glTexCoord2bvOES(coords: GLbyte*);

@foreign
func glTexCoord3bOES(s: GLbyte, t: GLbyte, r: GLbyte);

@foreign
func glTexCoord3bvOES(coords: GLbyte*);

@foreign
func glTexCoord4bOES(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte);

@foreign
func glTexCoord4bvOES(coords: GLbyte*);

@foreign
func glVertex2bOES(x: GLbyte, y: GLbyte);

@foreign
func glVertex2bvOES(coords: GLbyte*);

@foreign
func glVertex3bOES(x: GLbyte, y: GLbyte, z: GLbyte);

@foreign
func glVertex3bvOES(coords: GLbyte*);

@foreign
func glVertex4bOES(x: GLbyte, y: GLbyte, z: GLbyte, w: GLbyte);

@foreign
func glVertex4bvOES(coords: GLbyte*);

@foreign
typedef GLfixed = GLint;

@foreign
typedef PFNGLALPHAFUNCXOESPROC = func(fn: GLenum, ref: GLfixed);

@foreign
typedef PFNGLCLEARCOLORXOESPROC = func(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);

@foreign
typedef PFNGLCLEARDEPTHXOESPROC = func(depth: GLfixed);

@foreign
typedef PFNGLCLIPPLANEXOESPROC = func(plane: GLenum, equation: GLfixed*);

@foreign
typedef PFNGLCOLOR4XOESPROC = func(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);

@foreign
typedef PFNGLDEPTHRANGEXOESPROC = func(n: GLfixed, f: GLfixed);

@foreign
typedef PFNGLFOGXOESPROC = func(pname: GLenum, param: GLfixed);

@foreign
typedef PFNGLFOGXVOESPROC = func(pname: GLenum, param: GLfixed*);

@foreign
typedef PFNGLFRUSTUMXOESPROC = func(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed);

@foreign
typedef PFNGLGETCLIPPLANEXOESPROC = func(plane: GLenum, equation: GLfixed*);

@foreign
typedef PFNGLGETFIXEDVOESPROC = func(pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLGETTEXENVXVOESPROC = func(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLGETTEXPARAMETERXVOESPROC = func(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLLIGHTMODELXOESPROC = func(pname: GLenum, param: GLfixed);

@foreign
typedef PFNGLLIGHTMODELXVOESPROC = func(pname: GLenum, param: GLfixed*);

@foreign
typedef PFNGLLIGHTXOESPROC = func(light: GLenum, pname: GLenum, param: GLfixed);

@foreign
typedef PFNGLLIGHTXVOESPROC = func(light: GLenum, pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLLINEWIDTHXOESPROC = func(width: GLfixed);

@foreign
typedef PFNGLLOADMATRIXXOESPROC = func(m: GLfixed*);

@foreign
typedef PFNGLMATERIALXOESPROC = func(face: GLenum, pname: GLenum, param: GLfixed);

@foreign
typedef PFNGLMATERIALXVOESPROC = func(face: GLenum, pname: GLenum, param: GLfixed*);

@foreign
typedef PFNGLMULTMATRIXXOESPROC = func(m: GLfixed*);

@foreign
typedef PFNGLMULTITEXCOORD4XOESPROC = func(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed);

@foreign
typedef PFNGLNORMAL3XOESPROC = func(nx: GLfixed, ny: GLfixed, nz: GLfixed);

@foreign
typedef PFNGLORTHOXOESPROC = func(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed);

@foreign
typedef PFNGLPOINTPARAMETERXVOESPROC = func(pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLPOINTSIZEXOESPROC = func(size: GLfixed);

@foreign
typedef PFNGLPOLYGONOFFSETXOESPROC = func(factor: GLfixed, units: GLfixed);

@foreign
typedef PFNGLROTATEXOESPROC = func(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed);

@foreign
typedef PFNGLSCALEXOESPROC = func(x: GLfixed, y: GLfixed, z: GLfixed);

@foreign
typedef PFNGLTEXENVXOESPROC = func(target: GLenum, pname: GLenum, param: GLfixed);

@foreign
typedef PFNGLTEXENVXVOESPROC = func(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLTEXPARAMETERXOESPROC = func(target: GLenum, pname: GLenum, param: GLfixed);

@foreign
typedef PFNGLTEXPARAMETERXVOESPROC = func(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLTRANSLATEXOESPROC = func(x: GLfixed, y: GLfixed, z: GLfixed);

@foreign
typedef PFNGLACCUMXOESPROC = func(op: GLenum, value: GLfixed);

@foreign
typedef PFNGLBITMAPXOESPROC = func(width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: GLubyte*);

@foreign
typedef PFNGLBLENDCOLORXOESPROC = func(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);

@foreign
typedef PFNGLCLEARACCUMXOESPROC = func(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);

@foreign
typedef PFNGLCOLOR3XOESPROC = func(red: GLfixed, green: GLfixed, blue: GLfixed);

@foreign
typedef PFNGLCOLOR3XVOESPROC = func(components: GLfixed*);

@foreign
typedef PFNGLCOLOR4XVOESPROC = func(components: GLfixed*);

@foreign
typedef PFNGLCONVOLUTIONPARAMETERXOESPROC = func(target: GLenum, pname: GLenum, param: GLfixed);

@foreign
typedef PFNGLCONVOLUTIONPARAMETERXVOESPROC = func(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLEVALCOORD1XOESPROC = func(u: GLfixed);

@foreign
typedef PFNGLEVALCOORD1XVOESPROC = func(coords: GLfixed*);

@foreign
typedef PFNGLEVALCOORD2XOESPROC = func(u: GLfixed, v: GLfixed);

@foreign
typedef PFNGLEVALCOORD2XVOESPROC = func(coords: GLfixed*);

@foreign
typedef PFNGLFEEDBACKBUFFERXOESPROC = func(n: GLsizei, type: GLenum, buffer: GLfixed*);

@foreign
typedef PFNGLGETCONVOLUTIONPARAMETERXVOESPROC = func(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLGETHISTOGRAMPARAMETERXVOESPROC = func(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLGETLIGHTXOESPROC = func(light: GLenum, pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLGETMAPXVOESPROC = func(target: GLenum, query: GLenum, v: GLfixed*);

@foreign
typedef PFNGLGETMATERIALXOESPROC = func(face: GLenum, pname: GLenum, param: GLfixed);

@foreign
typedef PFNGLGETPIXELMAPXVPROC = func(map: GLenum, size: GLint, values: GLfixed*);

@foreign
typedef PFNGLGETTEXGENXVOESPROC = func(coord: GLenum, pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLGETTEXLEVELPARAMETERXVOESPROC = func(target: GLenum, level: GLint, pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLINDEXXOESPROC = func(component: GLfixed);

@foreign
typedef PFNGLINDEXXVOESPROC = func(component: GLfixed*);

@foreign
typedef PFNGLLOADTRANSPOSEMATRIXXOESPROC = func(m: GLfixed*);

@foreign
typedef PFNGLMAP1XOESPROC = func(target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed);

@foreign
typedef PFNGLMAP2XOESPROC = func(target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed);

@foreign
typedef PFNGLMAPGRID1XOESPROC = func(n: GLint, u1: GLfixed, u2: GLfixed);

@foreign
typedef PFNGLMAPGRID2XOESPROC = func(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed);

@foreign
typedef PFNGLMULTTRANSPOSEMATRIXXOESPROC = func(m: GLfixed*);

@foreign
typedef PFNGLMULTITEXCOORD1XOESPROC = func(texture: GLenum, s: GLfixed);

@foreign
typedef PFNGLMULTITEXCOORD1XVOESPROC = func(texture: GLenum, coords: GLfixed*);

@foreign
typedef PFNGLMULTITEXCOORD2XOESPROC = func(texture: GLenum, s: GLfixed, t: GLfixed);

@foreign
typedef PFNGLMULTITEXCOORD2XVOESPROC = func(texture: GLenum, coords: GLfixed*);

@foreign
typedef PFNGLMULTITEXCOORD3XOESPROC = func(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed);

@foreign
typedef PFNGLMULTITEXCOORD3XVOESPROC = func(texture: GLenum, coords: GLfixed*);

@foreign
typedef PFNGLMULTITEXCOORD4XVOESPROC = func(texture: GLenum, coords: GLfixed*);

@foreign
typedef PFNGLNORMAL3XVOESPROC = func(coords: GLfixed*);

@foreign
typedef PFNGLPASSTHROUGHXOESPROC = func(token: GLfixed);

@foreign
typedef PFNGLPIXELMAPXPROC = func(map: GLenum, size: GLint, values: GLfixed*);

@foreign
typedef PFNGLPIXELSTOREXPROC = func(pname: GLenum, param: GLfixed);

@foreign
typedef PFNGLPIXELTRANSFERXOESPROC = func(pname: GLenum, param: GLfixed);

@foreign
typedef PFNGLPIXELZOOMXOESPROC = func(xfactor: GLfixed, yfactor: GLfixed);

@foreign
typedef PFNGLPRIORITIZETEXTURESXOESPROC = func(n: GLsizei, textures: GLuint*, priorities: GLfixed*);

@foreign
typedef PFNGLRASTERPOS2XOESPROC = func(x: GLfixed, y: GLfixed);

@foreign
typedef PFNGLRASTERPOS2XVOESPROC = func(coords: GLfixed*);

@foreign
typedef PFNGLRASTERPOS3XOESPROC = func(x: GLfixed, y: GLfixed, z: GLfixed);

@foreign
typedef PFNGLRASTERPOS3XVOESPROC = func(coords: GLfixed*);

@foreign
typedef PFNGLRASTERPOS4XOESPROC = func(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed);

@foreign
typedef PFNGLRASTERPOS4XVOESPROC = func(coords: GLfixed*);

@foreign
typedef PFNGLRECTXOESPROC = func(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed);

@foreign
typedef PFNGLRECTXVOESPROC = func(v1: GLfixed*, v2: GLfixed*);

@foreign
typedef PFNGLTEXCOORD1XOESPROC = func(s: GLfixed);

@foreign
typedef PFNGLTEXCOORD1XVOESPROC = func(coords: GLfixed*);

@foreign
typedef PFNGLTEXCOORD2XOESPROC = func(s: GLfixed, t: GLfixed);

@foreign
typedef PFNGLTEXCOORD2XVOESPROC = func(coords: GLfixed*);

@foreign
typedef PFNGLTEXCOORD3XOESPROC = func(s: GLfixed, t: GLfixed, r: GLfixed);

@foreign
typedef PFNGLTEXCOORD3XVOESPROC = func(coords: GLfixed*);

@foreign
typedef PFNGLTEXCOORD4XOESPROC = func(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed);

@foreign
typedef PFNGLTEXCOORD4XVOESPROC = func(coords: GLfixed*);

@foreign
typedef PFNGLTEXGENXOESPROC = func(coord: GLenum, pname: GLenum, param: GLfixed);

@foreign
typedef PFNGLTEXGENXVOESPROC = func(coord: GLenum, pname: GLenum, params: GLfixed*);

@foreign
typedef PFNGLVERTEX2XOESPROC = func(x: GLfixed);

@foreign
typedef PFNGLVERTEX2XVOESPROC = func(coords: GLfixed*);

@foreign
typedef PFNGLVERTEX3XOESPROC = func(x: GLfixed, y: GLfixed);

@foreign
typedef PFNGLVERTEX3XVOESPROC = func(coords: GLfixed*);

@foreign
typedef PFNGLVERTEX4XOESPROC = func(x: GLfixed, y: GLfixed, z: GLfixed);

@foreign
typedef PFNGLVERTEX4XVOESPROC = func(coords: GLfixed*);

@foreign
func glAlphaFuncxOES(fn: GLenum, ref: GLfixed);

@foreign
func glClearColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);

@foreign
func glClearDepthxOES(depth: GLfixed);

@foreign
func glClipPlanexOES(plane: GLenum, equation: GLfixed*);

@foreign
func glColor4xOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);

@foreign
func glDepthRangexOES(n: GLfixed, f: GLfixed);

@foreign
func glFogxOES(pname: GLenum, param: GLfixed);

@foreign
func glFogxvOES(pname: GLenum, param: GLfixed*);

@foreign
func glFrustumxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed);

@foreign
func glGetClipPlanexOES(plane: GLenum, equation: GLfixed*);

@foreign
func glGetFixedvOES(pname: GLenum, params: GLfixed*);

@foreign
func glGetTexEnvxvOES(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
func glGetTexParameterxvOES(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
func glLightModelxOES(pname: GLenum, param: GLfixed);

@foreign
func glLightModelxvOES(pname: GLenum, param: GLfixed*);

@foreign
func glLightxOES(light: GLenum, pname: GLenum, param: GLfixed);

@foreign
func glLightxvOES(light: GLenum, pname: GLenum, params: GLfixed*);

@foreign
func glLineWidthxOES(width: GLfixed);

@foreign
func glLoadMatrixxOES(m: GLfixed*);

@foreign
func glMaterialxOES(face: GLenum, pname: GLenum, param: GLfixed);

@foreign
func glMaterialxvOES(face: GLenum, pname: GLenum, param: GLfixed*);

@foreign
func glMultMatrixxOES(m: GLfixed*);

@foreign
func glMultiTexCoord4xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed);

@foreign
func glNormal3xOES(nx: GLfixed, ny: GLfixed, nz: GLfixed);

@foreign
func glOrthoxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed);

@foreign
func glPointParameterxvOES(pname: GLenum, params: GLfixed*);

@foreign
func glPointSizexOES(size: GLfixed);

@foreign
func glPolygonOffsetxOES(factor: GLfixed, units: GLfixed);

@foreign
func glRotatexOES(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed);

@foreign
func glScalexOES(x: GLfixed, y: GLfixed, z: GLfixed);

@foreign
func glTexEnvxOES(target: GLenum, pname: GLenum, param: GLfixed);

@foreign
func glTexEnvxvOES(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
func glTexParameterxOES(target: GLenum, pname: GLenum, param: GLfixed);

@foreign
func glTexParameterxvOES(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
func glTranslatexOES(x: GLfixed, y: GLfixed, z: GLfixed);

@foreign
func glAccumxOES(op: GLenum, value: GLfixed);

@foreign
func glBitmapxOES(width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: GLubyte*);

@foreign
func glBlendColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);

@foreign
func glClearAccumxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);

@foreign
func glColor3xOES(red: GLfixed, green: GLfixed, blue: GLfixed);

@foreign
func glColor3xvOES(components: GLfixed*);

@foreign
func glColor4xvOES(components: GLfixed*);

@foreign
func glConvolutionParameterxOES(target: GLenum, pname: GLenum, param: GLfixed);

@foreign
func glConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
func glEvalCoord1xOES(u: GLfixed);

@foreign
func glEvalCoord1xvOES(coords: GLfixed*);

@foreign
func glEvalCoord2xOES(u: GLfixed, v: GLfixed);

@foreign
func glEvalCoord2xvOES(coords: GLfixed*);

@foreign
func glFeedbackBufferxOES(n: GLsizei, type: GLenum, buffer: GLfixed*);

@foreign
func glGetConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
func glGetHistogramParameterxvOES(target: GLenum, pname: GLenum, params: GLfixed*);

@foreign
func glGetLightxOES(light: GLenum, pname: GLenum, params: GLfixed*);

@foreign
func glGetMapxvOES(target: GLenum, query: GLenum, v: GLfixed*);

@foreign
func glGetMaterialxOES(face: GLenum, pname: GLenum, param: GLfixed);

@foreign
func glGetPixelMapxv(map: GLenum, size: GLint, values: GLfixed*);

@foreign
func glGetTexGenxvOES(coord: GLenum, pname: GLenum, params: GLfixed*);

@foreign
func glGetTexLevelParameterxvOES(target: GLenum, level: GLint, pname: GLenum, params: GLfixed*);

@foreign
func glIndexxOES(component: GLfixed);

@foreign
func glIndexxvOES(component: GLfixed*);

@foreign
func glLoadTransposeMatrixxOES(m: GLfixed*);

@foreign
func glMap1xOES(target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed);

@foreign
func glMap2xOES(target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed);

@foreign
func glMapGrid1xOES(n: GLint, u1: GLfixed, u2: GLfixed);

@foreign
func glMapGrid2xOES(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed);

@foreign
func glMultTransposeMatrixxOES(m: GLfixed*);

@foreign
func glMultiTexCoord1xOES(texture: GLenum, s: GLfixed);

@foreign
func glMultiTexCoord1xvOES(texture: GLenum, coords: GLfixed*);

@foreign
func glMultiTexCoord2xOES(texture: GLenum, s: GLfixed, t: GLfixed);

@foreign
func glMultiTexCoord2xvOES(texture: GLenum, coords: GLfixed*);

@foreign
func glMultiTexCoord3xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed);

@foreign
func glMultiTexCoord3xvOES(texture: GLenum, coords: GLfixed*);

@foreign
func glMultiTexCoord4xvOES(texture: GLenum, coords: GLfixed*);

@foreign
func glNormal3xvOES(coords: GLfixed*);

@foreign
func glPassThroughxOES(token: GLfixed);

@foreign
func glPixelMapx(map: GLenum, size: GLint, values: GLfixed*);

@foreign
func glPixelStorex(pname: GLenum, param: GLfixed);

@foreign
func glPixelTransferxOES(pname: GLenum, param: GLfixed);

@foreign
func glPixelZoomxOES(xfactor: GLfixed, yfactor: GLfixed);

@foreign
func glPrioritizeTexturesxOES(n: GLsizei, textures: GLuint*, priorities: GLfixed*);

@foreign
func glRasterPos2xOES(x: GLfixed, y: GLfixed);

@foreign
func glRasterPos2xvOES(coords: GLfixed*);

@foreign
func glRasterPos3xOES(x: GLfixed, y: GLfixed, z: GLfixed);

@foreign
func glRasterPos3xvOES(coords: GLfixed*);

@foreign
func glRasterPos4xOES(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed);

@foreign
func glRasterPos4xvOES(coords: GLfixed*);

@foreign
func glRectxOES(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed);

@foreign
func glRectxvOES(v1: GLfixed*, v2: GLfixed*);

@foreign
func glTexCoord1xOES(s: GLfixed);

@foreign
func glTexCoord1xvOES(coords: GLfixed*);

@foreign
func glTexCoord2xOES(s: GLfixed, t: GLfixed);

@foreign
func glTexCoord2xvOES(coords: GLfixed*);

@foreign
func glTexCoord3xOES(s: GLfixed, t: GLfixed, r: GLfixed);

@foreign
func glTexCoord3xvOES(coords: GLfixed*);

@foreign
func glTexCoord4xOES(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed);

@foreign
func glTexCoord4xvOES(coords: GLfixed*);

@foreign
func glTexGenxOES(coord: GLenum, pname: GLenum, param: GLfixed);

@foreign
func glTexGenxvOES(coord: GLenum, pname: GLenum, params: GLfixed*);

@foreign
func glVertex2xOES(x: GLfixed);

@foreign
func glVertex2xvOES(coords: GLfixed*);

@foreign
func glVertex3xOES(x: GLfixed, y: GLfixed);

@foreign
func glVertex3xvOES(coords: GLfixed*);

@foreign
func glVertex4xOES(x: GLfixed, y: GLfixed, z: GLfixed);

@foreign
func glVertex4xvOES(coords: GLfixed*);

@foreign
typedef PFNGLQUERYMATRIXXOESPROC = func(mantissa: GLfixed*, exponent: GLint*): GLbitfield;

@foreign
func glQueryMatrixxOES(mantissa: GLfixed*, exponent: GLint*): GLbitfield;

@foreign
typedef PFNGLCLEARDEPTHFOESPROC = func(depth: GLclampf);

@foreign
typedef PFNGLCLIPPLANEFOESPROC = func(plane: GLenum, equation: GLfloat*);

@foreign
typedef PFNGLDEPTHRANGEFOESPROC = func(n: GLclampf, f: GLclampf);

@foreign
typedef PFNGLFRUSTUMFOESPROC = func(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat);

@foreign
typedef PFNGLGETCLIPPLANEFOESPROC = func(plane: GLenum, equation: GLfloat*);

@foreign
typedef PFNGLORTHOFOESPROC = func(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat);

@foreign
func glClearDepthfOES(depth: GLclampf);

@foreign
func glClipPlanefOES(plane: GLenum, equation: GLfloat*);

@foreign
func glDepthRangefOES(n: GLclampf, f: GLclampf);

@foreign
func glFrustumfOES(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat);

@foreign
func glGetClipPlanefOES(plane: GLenum, equation: GLfloat*);

@foreign
func glOrthofOES(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat);

@foreign
typedef PFNGLTBUFFERMASK3DFXPROC = func(mask: GLuint);

@foreign
func glTbufferMask3DFX(mask: GLuint);

@foreign
typedef GLDEBUGPROCAMD = func(id: GLuint, category: GLenum, severity: GLenum, length: GLsizei, message: GLchar*, userParam: void*);

@foreign
typedef PFNGLDEBUGMESSAGEENABLEAMDPROC = func(category: GLenum, severity: GLenum, count: GLsizei, ids: GLuint*, enabled: GLboolean);

@foreign
typedef PFNGLDEBUGMESSAGEINSERTAMDPROC = func(category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: GLchar*);

@foreign
typedef PFNGLDEBUGMESSAGECALLBACKAMDPROC = func(callback: GLDEBUGPROCAMD, userParam: void*);

@foreign
typedef PFNGLGETDEBUGMESSAGELOGAMDPROC = func(count: GLuint, bufsize: GLsizei, categories: GLenum*, severities: GLuint*, ids: GLuint*, lengths: GLsizei*, message: GLchar*): GLuint;

@foreign
func glDebugMessageEnableAMD(category: GLenum, severity: GLenum, count: GLsizei, ids: GLuint*, enabled: GLboolean);

@foreign
func glDebugMessageInsertAMD(category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: GLchar*);

@foreign
func glDebugMessageCallbackAMD(callback: GLDEBUGPROCAMD, userParam: void*);

@foreign
func glGetDebugMessageLogAMD(count: GLuint, bufsize: GLsizei, categories: GLenum*, severities: GLuint*, ids: GLuint*, lengths: GLsizei*, message: GLchar*): GLuint;

@foreign
typedef PFNGLBLENDFUNCINDEXEDAMDPROC = func(buf: GLuint, src: GLenum, dst: GLenum);

@foreign
typedef PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC = func(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum);

@foreign
typedef PFNGLBLENDEQUATIONINDEXEDAMDPROC = func(buf: GLuint, mode: GLenum);

@foreign
typedef PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC = func(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);

@foreign
func glBlendFuncIndexedAMD(buf: GLuint, src: GLenum, dst: GLenum);

@foreign
func glBlendFuncSeparateIndexedAMD(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum);

@foreign
func glBlendEquationIndexedAMD(buf: GLuint, mode: GLenum);

@foreign
func glBlendEquationSeparateIndexedAMD(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);

@foreign
typedef PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = func(target: GLenum, numsamples: GLuint, pixelindex: GLuint, values: GLfloat*);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = func(framebuffer: GLuint, numsamples: GLuint, pixelindex: GLuint, values: GLfloat*);

@foreign
typedef PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC = func(target: GLenum, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: GLfloat*);

@foreign
typedef PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC = func(framebuffer: GLuint, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: GLfloat*);

@foreign
func glFramebufferSamplePositionsfvAMD(target: GLenum, numsamples: GLuint, pixelindex: GLuint, values: GLfloat*);

@foreign
func glNamedFramebufferSamplePositionsfvAMD(framebuffer: GLuint, numsamples: GLuint, pixelindex: GLuint, values: GLfloat*);

@foreign
func glGetFramebufferParameterfvAMD(target: GLenum, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: GLfloat*);

@foreign
func glGetNamedFramebufferParameterfvAMD(framebuffer: GLuint, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: GLfloat*);

@foreign
typedef GLint64EXT = int64_t;

@foreign
typedef PFNGLUNIFORM1I64NVPROC = func(location: GLint, x: GLint64EXT);

@foreign
typedef PFNGLUNIFORM2I64NVPROC = func(location: GLint, x: GLint64EXT, y: GLint64EXT);

@foreign
typedef PFNGLUNIFORM3I64NVPROC = func(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT);

@foreign
typedef PFNGLUNIFORM4I64NVPROC = func(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT);

@foreign
typedef PFNGLUNIFORM1I64VNVPROC = func(location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
typedef PFNGLUNIFORM2I64VNVPROC = func(location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
typedef PFNGLUNIFORM3I64VNVPROC = func(location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
typedef PFNGLUNIFORM4I64VNVPROC = func(location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
typedef PFNGLUNIFORM1UI64NVPROC = func(location: GLint, x: GLuint64EXT);

@foreign
typedef PFNGLUNIFORM2UI64NVPROC = func(location: GLint, x: GLuint64EXT, y: GLuint64EXT);

@foreign
typedef PFNGLUNIFORM3UI64NVPROC = func(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT);

@foreign
typedef PFNGLUNIFORM4UI64NVPROC = func(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT);

@foreign
typedef PFNGLUNIFORM1UI64VNVPROC = func(location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
typedef PFNGLUNIFORM2UI64VNVPROC = func(location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
typedef PFNGLUNIFORM3UI64VNVPROC = func(location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
typedef PFNGLUNIFORM4UI64VNVPROC = func(location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
typedef PFNGLGETUNIFORMI64VNVPROC = func(program: GLuint, location: GLint, params: GLint64EXT*);

@foreign
typedef PFNGLGETUNIFORMUI64VNVPROC = func(program: GLuint, location: GLint, params: GLuint64EXT*);

@foreign
typedef PFNGLPROGRAMUNIFORM1I64NVPROC = func(program: GLuint, location: GLint, x: GLint64EXT);

@foreign
typedef PFNGLPROGRAMUNIFORM2I64NVPROC = func(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT);

@foreign
typedef PFNGLPROGRAMUNIFORM3I64NVPROC = func(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT);

@foreign
typedef PFNGLPROGRAMUNIFORM4I64NVPROC = func(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT);

@foreign
typedef PFNGLPROGRAMUNIFORM1I64VNVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
typedef PFNGLPROGRAMUNIFORM2I64VNVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
typedef PFNGLPROGRAMUNIFORM3I64VNVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
typedef PFNGLPROGRAMUNIFORM4I64VNVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
typedef PFNGLPROGRAMUNIFORM1UI64NVPROC = func(program: GLuint, location: GLint, x: GLuint64EXT);

@foreign
typedef PFNGLPROGRAMUNIFORM2UI64NVPROC = func(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT);

@foreign
typedef PFNGLPROGRAMUNIFORM3UI64NVPROC = func(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT);

@foreign
typedef PFNGLPROGRAMUNIFORM4UI64NVPROC = func(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT);

@foreign
typedef PFNGLPROGRAMUNIFORM1UI64VNVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
typedef PFNGLPROGRAMUNIFORM2UI64VNVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
typedef PFNGLPROGRAMUNIFORM3UI64VNVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
typedef PFNGLPROGRAMUNIFORM4UI64VNVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
func glUniform1i64NV(location: GLint, x: GLint64EXT);

@foreign
func glUniform2i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT);

@foreign
func glUniform3i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT);

@foreign
func glUniform4i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT);

@foreign
func glUniform1i64vNV(location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
func glUniform2i64vNV(location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
func glUniform3i64vNV(location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
func glUniform4i64vNV(location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
func glUniform1ui64NV(location: GLint, x: GLuint64EXT);

@foreign
func glUniform2ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT);

@foreign
func glUniform3ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT);

@foreign
func glUniform4ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT);

@foreign
func glUniform1ui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
func glUniform2ui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
func glUniform3ui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
func glUniform4ui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
func glGetUniformi64vNV(program: GLuint, location: GLint, params: GLint64EXT*);

@foreign
func glGetUniformui64vNV(program: GLuint, location: GLint, params: GLuint64EXT*);

@foreign
func glProgramUniform1i64NV(program: GLuint, location: GLint, x: GLint64EXT);

@foreign
func glProgramUniform2i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT);

@foreign
func glProgramUniform3i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT);

@foreign
func glProgramUniform4i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT);

@foreign
func glProgramUniform1i64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
func glProgramUniform2i64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
func glProgramUniform3i64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
func glProgramUniform4i64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*);

@foreign
func glProgramUniform1ui64NV(program: GLuint, location: GLint, x: GLuint64EXT);

@foreign
func glProgramUniform2ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT);

@foreign
func glProgramUniform3ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT);

@foreign
func glProgramUniform4ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT);

@foreign
func glProgramUniform1ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
func glProgramUniform2ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
func glProgramUniform3ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
func glProgramUniform4ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
typedef PFNGLVERTEXATTRIBPARAMETERIAMDPROC = func(index: GLuint, pname: GLenum, param: GLint);

@foreign
func glVertexAttribParameteriAMD(index: GLuint, pname: GLenum, param: GLint);

@foreign
typedef PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC = func(mode: GLenum, indirect: void const*, primcount: GLsizei, stride: GLsizei);

@foreign
typedef PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC = func(mode: GLenum, type: GLenum, indirect: void const*, primcount: GLsizei, stride: GLsizei);

@foreign
func glMultiDrawArraysIndirectAMD(mode: GLenum, indirect: void const*, primcount: GLsizei, stride: GLsizei);

@foreign
func glMultiDrawElementsIndirectAMD(mode: GLenum, type: GLenum, indirect: void const*, primcount: GLsizei, stride: GLsizei);

@foreign
typedef PFNGLGENNAMESAMDPROC = func(identifier: GLenum, num: GLuint, names: GLuint*);

@foreign
typedef PFNGLDELETENAMESAMDPROC = func(identifier: GLenum, num: GLuint, names: GLuint*);

@foreign
typedef PFNGLISNAMEAMDPROC = func(identifier: GLenum, name: GLuint): GLboolean;

@foreign
func glGenNamesAMD(identifier: GLenum, num: GLuint, names: GLuint*);

@foreign
func glDeleteNamesAMD(identifier: GLenum, num: GLuint, names: GLuint*);

@foreign
func glIsNameAMD(identifier: GLenum, name: GLuint): GLboolean;

@foreign
typedef PFNGLQUERYOBJECTPARAMETERUIAMDPROC = func(target: GLenum, id: GLuint, pname: GLenum, param: GLuint);

@foreign
func glQueryObjectParameteruiAMD(target: GLenum, id: GLuint, pname: GLenum, param: GLuint);

@foreign
typedef PFNGLGETPERFMONITORGROUPSAMDPROC = func(numGroups: GLint*, groupsSize: GLsizei, groups: GLuint*);

@foreign
typedef PFNGLGETPERFMONITORCOUNTERSAMDPROC = func(group: GLuint, numCounters: GLint*, maxActiveCounters: GLint*, counterSize: GLsizei, counters: GLuint*);

@foreign
typedef PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = func(group: GLuint, bufSize: GLsizei, length: GLsizei*, groupString: GLchar*);

@foreign
typedef PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = func(group: GLuint, counter: GLuint, bufSize: GLsizei, length: GLsizei*, counterString: GLchar*);

@foreign
typedef PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = func(group: GLuint, counter: GLuint, pname: GLenum, data: void*);

@foreign
typedef PFNGLGENPERFMONITORSAMDPROC = func(n: GLsizei, monitors: GLuint*);

@foreign
typedef PFNGLDELETEPERFMONITORSAMDPROC = func(n: GLsizei, monitors: GLuint*);

@foreign
typedef PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = func(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: GLuint*);

@foreign
typedef PFNGLBEGINPERFMONITORAMDPROC = func(monitor: GLuint);

@foreign
typedef PFNGLENDPERFMONITORAMDPROC = func(monitor: GLuint);

@foreign
typedef PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = func(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: GLuint*, bytesWritten: GLint*);

@foreign
func glGetPerfMonitorGroupsAMD(numGroups: GLint*, groupsSize: GLsizei, groups: GLuint*);

@foreign
func glGetPerfMonitorCountersAMD(group: GLuint, numCounters: GLint*, maxActiveCounters: GLint*, counterSize: GLsizei, counters: GLuint*);

@foreign
func glGetPerfMonitorGroupStringAMD(group: GLuint, bufSize: GLsizei, length: GLsizei*, groupString: GLchar*);

@foreign
func glGetPerfMonitorCounterStringAMD(group: GLuint, counter: GLuint, bufSize: GLsizei, length: GLsizei*, counterString: GLchar*);

@foreign
func glGetPerfMonitorCounterInfoAMD(group: GLuint, counter: GLuint, pname: GLenum, data: void*);

@foreign
func glGenPerfMonitorsAMD(n: GLsizei, monitors: GLuint*);

@foreign
func glDeletePerfMonitorsAMD(n: GLsizei, monitors: GLuint*);

@foreign
func glSelectPerfMonitorCountersAMD(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: GLuint*);

@foreign
func glBeginPerfMonitorAMD(monitor: GLuint);

@foreign
func glEndPerfMonitorAMD(monitor: GLuint);

@foreign
func glGetPerfMonitorCounterDataAMD(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: GLuint*, bytesWritten: GLint*);

@foreign
typedef PFNGLSETMULTISAMPLEFVAMDPROC = func(pname: GLenum, index: GLuint, val: GLfloat*);

@foreign
func glSetMultisamplefvAMD(pname: GLenum, index: GLuint, val: GLfloat*);

@foreign
typedef PFNGLTEXSTORAGESPARSEAMDPROC = func(target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield);

@foreign
typedef PFNGLTEXTURESTORAGESPARSEAMDPROC = func(texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield);

@foreign
func glTexStorageSparseAMD(target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield);

@foreign
func glTextureStorageSparseAMD(texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield);

@foreign
typedef PFNGLSTENCILOPVALUEAMDPROC = func(face: GLenum, value: GLuint);

@foreign
func glStencilOpValueAMD(face: GLenum, value: GLuint);

@foreign
typedef PFNGLTESSELLATIONFACTORAMDPROC = func(factor: GLfloat);

@foreign
typedef PFNGLTESSELLATIONMODEAMDPROC = func(mode: GLenum);

@foreign
func glTessellationFactorAMD(factor: GLfloat);

@foreign
func glTessellationModeAMD(mode: GLenum);

@foreign
typedef PFNGLELEMENTPOINTERAPPLEPROC = func(type: GLenum, pointer: void const*);

@foreign
typedef PFNGLDRAWELEMENTARRAYAPPLEPROC = func(mode: GLenum, first: GLint, count: GLsizei);

@foreign
typedef PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC = func(mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei);

@foreign
typedef PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC = func(mode: GLenum, first: GLint*, count: GLsizei*, primcount: GLsizei);

@foreign
typedef PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC = func(mode: GLenum, start: GLuint, end: GLuint, first: GLint*, count: GLsizei*, primcount: GLsizei);

@foreign
func glElementPointerAPPLE(type: GLenum, pointer: void const*);

@foreign
func glDrawElementArrayAPPLE(mode: GLenum, first: GLint, count: GLsizei);

@foreign
func glDrawRangeElementArrayAPPLE(mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei);

@foreign
func glMultiDrawElementArrayAPPLE(mode: GLenum, first: GLint*, count: GLsizei*, primcount: GLsizei);

@foreign
func glMultiDrawRangeElementArrayAPPLE(mode: GLenum, start: GLuint, end: GLuint, first: GLint*, count: GLsizei*, primcount: GLsizei);

@foreign
typedef PFNGLGENFENCESAPPLEPROC = func(n: GLsizei, fences: GLuint*);

@foreign
typedef PFNGLDELETEFENCESAPPLEPROC = func(n: GLsizei, fences: GLuint*);

@foreign
typedef PFNGLSETFENCEAPPLEPROC = func(fence: GLuint);

@foreign
typedef PFNGLISFENCEAPPLEPROC = func(fence: GLuint): GLboolean;

@foreign
typedef PFNGLTESTFENCEAPPLEPROC = func(fence: GLuint): GLboolean;

@foreign
typedef PFNGLFINISHFENCEAPPLEPROC = func(fence: GLuint);

@foreign
typedef PFNGLTESTOBJECTAPPLEPROC = func(object: GLenum, name: GLuint): GLboolean;

@foreign
typedef PFNGLFINISHOBJECTAPPLEPROC = func(object: GLenum, name: GLint);

@foreign
func glGenFencesAPPLE(n: GLsizei, fences: GLuint*);

@foreign
func glDeleteFencesAPPLE(n: GLsizei, fences: GLuint*);

@foreign
func glSetFenceAPPLE(fence: GLuint);

@foreign
func glIsFenceAPPLE(fence: GLuint): GLboolean;

@foreign
func glTestFenceAPPLE(fence: GLuint): GLboolean;

@foreign
func glFinishFenceAPPLE(fence: GLuint);

@foreign
func glTestObjectAPPLE(object: GLenum, name: GLuint): GLboolean;

@foreign
func glFinishObjectAPPLE(object: GLenum, name: GLint);

@foreign
typedef PFNGLBUFFERPARAMETERIAPPLEPROC = func(target: GLenum, pname: GLenum, param: GLint);

@foreign
typedef PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC = func(target: GLenum, offset: GLintptr, size: GLsizeiptr);

@foreign
func glBufferParameteriAPPLE(target: GLenum, pname: GLenum, param: GLint);

@foreign
func glFlushMappedBufferRangeAPPLE(target: GLenum, offset: GLintptr, size: GLsizeiptr);

@foreign
typedef PFNGLOBJECTPURGEABLEAPPLEPROC = func(objectType: GLenum, name: GLuint, option: GLenum): GLenum;

@foreign
typedef PFNGLOBJECTUNPURGEABLEAPPLEPROC = func(objectType: GLenum, name: GLuint, option: GLenum): GLenum;

@foreign
typedef PFNGLGETOBJECTPARAMETERIVAPPLEPROC = func(objectType: GLenum, name: GLuint, pname: GLenum, params: GLint*);

@foreign
func glObjectPurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum): GLenum;

@foreign
func glObjectUnpurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum): GLenum;

@foreign
func glGetObjectParameterivAPPLE(objectType: GLenum, name: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLTEXTURERANGEAPPLEPROC = func(target: GLenum, length: GLsizei, pointer: void const*);

@foreign
typedef PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC = func(target: GLenum, pname: GLenum, params: void**);

@foreign
func glTextureRangeAPPLE(target: GLenum, length: GLsizei, pointer: void const*);

@foreign
func glGetTexParameterPointervAPPLE(target: GLenum, pname: GLenum, params: void**);

@foreign
typedef PFNGLBINDVERTEXARRAYAPPLEPROC = func(array: GLuint);

@foreign
typedef PFNGLDELETEVERTEXARRAYSAPPLEPROC = func(n: GLsizei, arrays: GLuint*);

@foreign
typedef PFNGLGENVERTEXARRAYSAPPLEPROC = func(n: GLsizei, arrays: GLuint*);

@foreign
typedef PFNGLISVERTEXARRAYAPPLEPROC = func(array: GLuint): GLboolean;

@foreign
func glBindVertexArrayAPPLE(array: GLuint);

@foreign
func glDeleteVertexArraysAPPLE(n: GLsizei, arrays: GLuint*);

@foreign
func glGenVertexArraysAPPLE(n: GLsizei, arrays: GLuint*);

@foreign
func glIsVertexArrayAPPLE(array: GLuint): GLboolean;

@foreign
typedef PFNGLVERTEXARRAYRANGEAPPLEPROC = func(length: GLsizei, pointer: void*);

@foreign
typedef PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC = func(length: GLsizei, pointer: void*);

@foreign
typedef PFNGLVERTEXARRAYPARAMETERIAPPLEPROC = func(pname: GLenum, param: GLint);

@foreign
func glVertexArrayRangeAPPLE(length: GLsizei, pointer: void*);

@foreign
func glFlushVertexArrayRangeAPPLE(length: GLsizei, pointer: void*);

@foreign
func glVertexArrayParameteriAPPLE(pname: GLenum, param: GLint);

@foreign
typedef PFNGLENABLEVERTEXATTRIBAPPLEPROC = func(index: GLuint, pname: GLenum);

@foreign
typedef PFNGLDISABLEVERTEXATTRIBAPPLEPROC = func(index: GLuint, pname: GLenum);

@foreign
typedef PFNGLISVERTEXATTRIBENABLEDAPPLEPROC = func(index: GLuint, pname: GLenum): GLboolean;

@foreign
typedef PFNGLMAPVERTEXATTRIB1DAPPLEPROC = func(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: GLdouble*);

@foreign
typedef PFNGLMAPVERTEXATTRIB1FAPPLEPROC = func(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: GLfloat*);

@foreign
typedef PFNGLMAPVERTEXATTRIB2DAPPLEPROC = func(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: GLdouble*);

@foreign
typedef PFNGLMAPVERTEXATTRIB2FAPPLEPROC = func(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: GLfloat*);

@foreign
func glEnableVertexAttribAPPLE(index: GLuint, pname: GLenum);

@foreign
func glDisableVertexAttribAPPLE(index: GLuint, pname: GLenum);

@foreign
func glIsVertexAttribEnabledAPPLE(index: GLuint, pname: GLenum): GLboolean;

@foreign
func glMapVertexAttrib1dAPPLE(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: GLdouble*);

@foreign
func glMapVertexAttrib1fAPPLE(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: GLfloat*);

@foreign
func glMapVertexAttrib2dAPPLE(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: GLdouble*);

@foreign
func glMapVertexAttrib2fAPPLE(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: GLfloat*);

@foreign
typedef PFNGLDRAWBUFFERSATIPROC = func(n: GLsizei, bufs: GLenum*);

@foreign
func glDrawBuffersATI(n: GLsizei, bufs: GLenum*);

@foreign
typedef PFNGLELEMENTPOINTERATIPROC = func(type: GLenum, pointer: void const*);

@foreign
typedef PFNGLDRAWELEMENTARRAYATIPROC = func(mode: GLenum, count: GLsizei);

@foreign
typedef PFNGLDRAWRANGEELEMENTARRAYATIPROC = func(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei);

@foreign
func glElementPointerATI(type: GLenum, pointer: void const*);

@foreign
func glDrawElementArrayATI(mode: GLenum, count: GLsizei);

@foreign
func glDrawRangeElementArrayATI(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei);

@foreign
typedef PFNGLTEXBUMPPARAMETERIVATIPROC = func(pname: GLenum, param: GLint*);

@foreign
typedef PFNGLTEXBUMPPARAMETERFVATIPROC = func(pname: GLenum, param: GLfloat*);

@foreign
typedef PFNGLGETTEXBUMPPARAMETERIVATIPROC = func(pname: GLenum, param: GLint*);

@foreign
typedef PFNGLGETTEXBUMPPARAMETERFVATIPROC = func(pname: GLenum, param: GLfloat*);

@foreign
func glTexBumpParameterivATI(pname: GLenum, param: GLint*);

@foreign
func glTexBumpParameterfvATI(pname: GLenum, param: GLfloat*);

@foreign
func glGetTexBumpParameterivATI(pname: GLenum, param: GLint*);

@foreign
func glGetTexBumpParameterfvATI(pname: GLenum, param: GLfloat*);

@foreign
typedef PFNGLGENFRAGMENTSHADERSATIPROC = func(range: GLuint): GLuint;

@foreign
typedef PFNGLBINDFRAGMENTSHADERATIPROC = func(id: GLuint);

@foreign
typedef PFNGLDELETEFRAGMENTSHADERATIPROC = func(id: GLuint);

@foreign
typedef PFNGLBEGINFRAGMENTSHADERATIPROC = func();

@foreign
typedef PFNGLENDFRAGMENTSHADERATIPROC = func();

@foreign
typedef PFNGLPASSTEXCOORDATIPROC = func(dst: GLuint, coord: GLuint, swizzle: GLenum);

@foreign
typedef PFNGLSAMPLEMAPATIPROC = func(dst: GLuint, interp: GLuint, swizzle: GLenum);

@foreign
typedef PFNGLCOLORFRAGMENTOP1ATIPROC = func(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint);

@foreign
typedef PFNGLCOLORFRAGMENTOP2ATIPROC = func(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint);

@foreign
typedef PFNGLCOLORFRAGMENTOP3ATIPROC = func(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint);

@foreign
typedef PFNGLALPHAFRAGMENTOP1ATIPROC = func(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint);

@foreign
typedef PFNGLALPHAFRAGMENTOP2ATIPROC = func(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint);

@foreign
typedef PFNGLALPHAFRAGMENTOP3ATIPROC = func(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint);

@foreign
typedef PFNGLSETFRAGMENTSHADERCONSTANTATIPROC = func(dst: GLuint, value: GLfloat*);

@foreign
func glGenFragmentShadersATI(range: GLuint): GLuint;

@foreign
func glBindFragmentShaderATI(id: GLuint);

@foreign
func glDeleteFragmentShaderATI(id: GLuint);

@foreign
func glBeginFragmentShaderATI();

@foreign
func glEndFragmentShaderATI();

@foreign
func glPassTexCoordATI(dst: GLuint, coord: GLuint, swizzle: GLenum);

@foreign
func glSampleMapATI(dst: GLuint, interp: GLuint, swizzle: GLenum);

@foreign
func glColorFragmentOp1ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint);

@foreign
func glColorFragmentOp2ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint);

@foreign
func glColorFragmentOp3ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint);

@foreign
func glAlphaFragmentOp1ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint);

@foreign
func glAlphaFragmentOp2ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint);

@foreign
func glAlphaFragmentOp3ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint);

@foreign
func glSetFragmentShaderConstantATI(dst: GLuint, value: GLfloat*);

@foreign
typedef PFNGLMAPOBJECTBUFFERATIPROC = func(buffer: GLuint): void*;

@foreign
typedef PFNGLUNMAPOBJECTBUFFERATIPROC = func(buffer: GLuint);

@foreign
func glMapObjectBufferATI(buffer: GLuint): void*;

@foreign
func glUnmapObjectBufferATI(buffer: GLuint);

@foreign
typedef PFNGLPNTRIANGLESIATIPROC = func(pname: GLenum, param: GLint);

@foreign
typedef PFNGLPNTRIANGLESFATIPROC = func(pname: GLenum, param: GLfloat);

@foreign
func glPNTrianglesiATI(pname: GLenum, param: GLint);

@foreign
func glPNTrianglesfATI(pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLSTENCILOPSEPARATEATIPROC = func(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum);

@foreign
typedef PFNGLSTENCILFUNCSEPARATEATIPROC = func(frontfunc: GLenum, backfunc: GLenum, ref: GLint, mask: GLuint);

@foreign
func glStencilOpSeparateATI(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum);

@foreign
func glStencilFuncSeparateATI(frontfunc: GLenum, backfunc: GLenum, ref: GLint, mask: GLuint);

@foreign
typedef PFNGLNEWOBJECTBUFFERATIPROC = func(size: GLsizei, pointer: void const*, usage: GLenum): GLuint;

@foreign
typedef PFNGLISOBJECTBUFFERATIPROC = func(buffer: GLuint): GLboolean;

@foreign
typedef PFNGLUPDATEOBJECTBUFFERATIPROC = func(buffer: GLuint, offset: GLuint, size: GLsizei, pointer: void const*, preserve: GLenum);

@foreign
typedef PFNGLGETOBJECTBUFFERFVATIPROC = func(buffer: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETOBJECTBUFFERIVATIPROC = func(buffer: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLFREEOBJECTBUFFERATIPROC = func(buffer: GLuint);

@foreign
typedef PFNGLARRAYOBJECTATIPROC = func(array: GLenum, size: GLint, type: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint);

@foreign
typedef PFNGLGETARRAYOBJECTFVATIPROC = func(array: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETARRAYOBJECTIVATIPROC = func(array: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLVARIANTARRAYOBJECTATIPROC = func(id: GLuint, type: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint);

@foreign
typedef PFNGLGETVARIANTARRAYOBJECTFVATIPROC = func(id: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETVARIANTARRAYOBJECTIVATIPROC = func(id: GLuint, pname: GLenum, params: GLint*);

@foreign
func glNewObjectBufferATI(size: GLsizei, pointer: void const*, usage: GLenum): GLuint;

@foreign
func glIsObjectBufferATI(buffer: GLuint): GLboolean;

@foreign
func glUpdateObjectBufferATI(buffer: GLuint, offset: GLuint, size: GLsizei, pointer: void const*, preserve: GLenum);

@foreign
func glGetObjectBufferfvATI(buffer: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glGetObjectBufferivATI(buffer: GLuint, pname: GLenum, params: GLint*);

@foreign
func glFreeObjectBufferATI(buffer: GLuint);

@foreign
func glArrayObjectATI(array: GLenum, size: GLint, type: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint);

@foreign
func glGetArrayObjectfvATI(array: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetArrayObjectivATI(array: GLenum, pname: GLenum, params: GLint*);

@foreign
func glVariantArrayObjectATI(id: GLuint, type: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint);

@foreign
func glGetVariantArrayObjectfvATI(id: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glGetVariantArrayObjectivATI(id: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLVERTEXATTRIBARRAYOBJECTATIPROC = func(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint);

@foreign
typedef PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC = func(index: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC = func(index: GLuint, pname: GLenum, params: GLint*);

@foreign
func glVertexAttribArrayObjectATI(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint);

@foreign
func glGetVertexAttribArrayObjectfvATI(index: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glGetVertexAttribArrayObjectivATI(index: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLVERTEXSTREAM1SATIPROC = func(stream: GLenum, x: GLshort);

@foreign
typedef PFNGLVERTEXSTREAM1SVATIPROC = func(stream: GLenum, coords: GLshort*);

@foreign
typedef PFNGLVERTEXSTREAM1IATIPROC = func(stream: GLenum, x: GLint);

@foreign
typedef PFNGLVERTEXSTREAM1IVATIPROC = func(stream: GLenum, coords: GLint*);

@foreign
typedef PFNGLVERTEXSTREAM1FATIPROC = func(stream: GLenum, x: GLfloat);

@foreign
typedef PFNGLVERTEXSTREAM1FVATIPROC = func(stream: GLenum, coords: GLfloat*);

@foreign
typedef PFNGLVERTEXSTREAM1DATIPROC = func(stream: GLenum, x: GLdouble);

@foreign
typedef PFNGLVERTEXSTREAM1DVATIPROC = func(stream: GLenum, coords: GLdouble*);

@foreign
typedef PFNGLVERTEXSTREAM2SATIPROC = func(stream: GLenum, x: GLshort, y: GLshort);

@foreign
typedef PFNGLVERTEXSTREAM2SVATIPROC = func(stream: GLenum, coords: GLshort*);

@foreign
typedef PFNGLVERTEXSTREAM2IATIPROC = func(stream: GLenum, x: GLint, y: GLint);

@foreign
typedef PFNGLVERTEXSTREAM2IVATIPROC = func(stream: GLenum, coords: GLint*);

@foreign
typedef PFNGLVERTEXSTREAM2FATIPROC = func(stream: GLenum, x: GLfloat, y: GLfloat);

@foreign
typedef PFNGLVERTEXSTREAM2FVATIPROC = func(stream: GLenum, coords: GLfloat*);

@foreign
typedef PFNGLVERTEXSTREAM2DATIPROC = func(stream: GLenum, x: GLdouble, y: GLdouble);

@foreign
typedef PFNGLVERTEXSTREAM2DVATIPROC = func(stream: GLenum, coords: GLdouble*);

@foreign
typedef PFNGLVERTEXSTREAM3SATIPROC = func(stream: GLenum, x: GLshort, y: GLshort, z: GLshort);

@foreign
typedef PFNGLVERTEXSTREAM3SVATIPROC = func(stream: GLenum, coords: GLshort*);

@foreign
typedef PFNGLVERTEXSTREAM3IATIPROC = func(stream: GLenum, x: GLint, y: GLint, z: GLint);

@foreign
typedef PFNGLVERTEXSTREAM3IVATIPROC = func(stream: GLenum, coords: GLint*);

@foreign
typedef PFNGLVERTEXSTREAM3FATIPROC = func(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLVERTEXSTREAM3FVATIPROC = func(stream: GLenum, coords: GLfloat*);

@foreign
typedef PFNGLVERTEXSTREAM3DATIPROC = func(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLVERTEXSTREAM3DVATIPROC = func(stream: GLenum, coords: GLdouble*);

@foreign
typedef PFNGLVERTEXSTREAM4SATIPROC = func(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort);

@foreign
typedef PFNGLVERTEXSTREAM4SVATIPROC = func(stream: GLenum, coords: GLshort*);

@foreign
typedef PFNGLVERTEXSTREAM4IATIPROC = func(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
typedef PFNGLVERTEXSTREAM4IVATIPROC = func(stream: GLenum, coords: GLint*);

@foreign
typedef PFNGLVERTEXSTREAM4FATIPROC = func(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
typedef PFNGLVERTEXSTREAM4FVATIPROC = func(stream: GLenum, coords: GLfloat*);

@foreign
typedef PFNGLVERTEXSTREAM4DATIPROC = func(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLVERTEXSTREAM4DVATIPROC = func(stream: GLenum, coords: GLdouble*);

@foreign
typedef PFNGLNORMALSTREAM3BATIPROC = func(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte);

@foreign
typedef PFNGLNORMALSTREAM3BVATIPROC = func(stream: GLenum, coords: GLbyte*);

@foreign
typedef PFNGLNORMALSTREAM3SATIPROC = func(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort);

@foreign
typedef PFNGLNORMALSTREAM3SVATIPROC = func(stream: GLenum, coords: GLshort*);

@foreign
typedef PFNGLNORMALSTREAM3IATIPROC = func(stream: GLenum, nx: GLint, ny: GLint, nz: GLint);

@foreign
typedef PFNGLNORMALSTREAM3IVATIPROC = func(stream: GLenum, coords: GLint*);

@foreign
typedef PFNGLNORMALSTREAM3FATIPROC = func(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat);

@foreign
typedef PFNGLNORMALSTREAM3FVATIPROC = func(stream: GLenum, coords: GLfloat*);

@foreign
typedef PFNGLNORMALSTREAM3DATIPROC = func(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble);

@foreign
typedef PFNGLNORMALSTREAM3DVATIPROC = func(stream: GLenum, coords: GLdouble*);

@foreign
typedef PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC = func(stream: GLenum);

@foreign
typedef PFNGLVERTEXBLENDENVIATIPROC = func(pname: GLenum, param: GLint);

@foreign
typedef PFNGLVERTEXBLENDENVFATIPROC = func(pname: GLenum, param: GLfloat);

@foreign
func glVertexStream1sATI(stream: GLenum, x: GLshort);

@foreign
func glVertexStream1svATI(stream: GLenum, coords: GLshort*);

@foreign
func glVertexStream1iATI(stream: GLenum, x: GLint);

@foreign
func glVertexStream1ivATI(stream: GLenum, coords: GLint*);

@foreign
func glVertexStream1fATI(stream: GLenum, x: GLfloat);

@foreign
func glVertexStream1fvATI(stream: GLenum, coords: GLfloat*);

@foreign
func glVertexStream1dATI(stream: GLenum, x: GLdouble);

@foreign
func glVertexStream1dvATI(stream: GLenum, coords: GLdouble*);

@foreign
func glVertexStream2sATI(stream: GLenum, x: GLshort, y: GLshort);

@foreign
func glVertexStream2svATI(stream: GLenum, coords: GLshort*);

@foreign
func glVertexStream2iATI(stream: GLenum, x: GLint, y: GLint);

@foreign
func glVertexStream2ivATI(stream: GLenum, coords: GLint*);

@foreign
func glVertexStream2fATI(stream: GLenum, x: GLfloat, y: GLfloat);

@foreign
func glVertexStream2fvATI(stream: GLenum, coords: GLfloat*);

@foreign
func glVertexStream2dATI(stream: GLenum, x: GLdouble, y: GLdouble);

@foreign
func glVertexStream2dvATI(stream: GLenum, coords: GLdouble*);

@foreign
func glVertexStream3sATI(stream: GLenum, x: GLshort, y: GLshort, z: GLshort);

@foreign
func glVertexStream3svATI(stream: GLenum, coords: GLshort*);

@foreign
func glVertexStream3iATI(stream: GLenum, x: GLint, y: GLint, z: GLint);

@foreign
func glVertexStream3ivATI(stream: GLenum, coords: GLint*);

@foreign
func glVertexStream3fATI(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glVertexStream3fvATI(stream: GLenum, coords: GLfloat*);

@foreign
func glVertexStream3dATI(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glVertexStream3dvATI(stream: GLenum, coords: GLdouble*);

@foreign
func glVertexStream4sATI(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort);

@foreign
func glVertexStream4svATI(stream: GLenum, coords: GLshort*);

@foreign
func glVertexStream4iATI(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
func glVertexStream4ivATI(stream: GLenum, coords: GLint*);

@foreign
func glVertexStream4fATI(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glVertexStream4fvATI(stream: GLenum, coords: GLfloat*);

@foreign
func glVertexStream4dATI(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glVertexStream4dvATI(stream: GLenum, coords: GLdouble*);

@foreign
func glNormalStream3bATI(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte);

@foreign
func glNormalStream3bvATI(stream: GLenum, coords: GLbyte*);

@foreign
func glNormalStream3sATI(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort);

@foreign
func glNormalStream3svATI(stream: GLenum, coords: GLshort*);

@foreign
func glNormalStream3iATI(stream: GLenum, nx: GLint, ny: GLint, nz: GLint);

@foreign
func glNormalStream3ivATI(stream: GLenum, coords: GLint*);

@foreign
func glNormalStream3fATI(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat);

@foreign
func glNormalStream3fvATI(stream: GLenum, coords: GLfloat*);

@foreign
func glNormalStream3dATI(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble);

@foreign
func glNormalStream3dvATI(stream: GLenum, coords: GLdouble*);

@foreign
func glClientActiveVertexStreamATI(stream: GLenum);

@foreign
func glVertexBlendEnviATI(pname: GLenum, param: GLint);

@foreign
func glVertexBlendEnvfATI(pname: GLenum, param: GLfloat);

@foreign
typedef GLeglImageOES = void*;

@foreign
typedef PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = func(target: GLenum, image: GLeglImageOES, attrib_list: GLint*);

@foreign
typedef PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = func(texture: GLuint, image: GLeglImageOES, attrib_list: GLint*);

@foreign
func glEGLImageTargetTexStorageEXT(target: GLenum, image: GLeglImageOES, attrib_list: GLint*);

@foreign
func glEGLImageTargetTextureStorageEXT(texture: GLuint, image: GLeglImageOES, attrib_list: GLint*);

@foreign
typedef PFNGLUNIFORMBUFFEREXTPROC = func(program: GLuint, location: GLint, buffer: GLuint);

@foreign
typedef PFNGLGETUNIFORMBUFFERSIZEEXTPROC = func(program: GLuint, location: GLint): GLint;

@foreign
typedef PFNGLGETUNIFORMOFFSETEXTPROC = func(program: GLuint, location: GLint): GLintptr;

@foreign
func glUniformBufferEXT(program: GLuint, location: GLint, buffer: GLuint);

@foreign
func glGetUniformBufferSizeEXT(program: GLuint, location: GLint): GLint;

@foreign
func glGetUniformOffsetEXT(program: GLuint, location: GLint): GLintptr;

@foreign
typedef PFNGLBLENDCOLOREXTPROC = func(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);

@foreign
func glBlendColorEXT(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);

@foreign
typedef PFNGLBLENDEQUATIONSEPARATEEXTPROC = func(modeRGB: GLenum, modeAlpha: GLenum);

@foreign
func glBlendEquationSeparateEXT(modeRGB: GLenum, modeAlpha: GLenum);

@foreign
typedef PFNGLBLENDFUNCSEPARATEEXTPROC = func(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum);

@foreign
func glBlendFuncSeparateEXT(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum);

@foreign
typedef PFNGLBLENDEQUATIONEXTPROC = func(mode: GLenum);

@foreign
func glBlendEquationEXT(mode: GLenum);

@foreign
typedef PFNGLCOPYCOLORSUBTABLEEXTPROC = func(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei);

@foreign
func glColorSubTableEXT(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type: GLenum, data: void const*);

@foreign
func glCopyColorSubTableEXT(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei);

@foreign
typedef PFNGLLOCKARRAYSEXTPROC = func(first: GLint, count: GLsizei);

@foreign
typedef PFNGLUNLOCKARRAYSEXTPROC = func();

@foreign
func glLockArraysEXT(first: GLint, count: GLsizei);

@foreign
func glUnlockArraysEXT();

@foreign
typedef PFNGLCONVOLUTIONFILTER1DEXTPROC = func(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, image: void const*);

@foreign
typedef PFNGLCONVOLUTIONFILTER2DEXTPROC = func(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, image: void const*);

@foreign
typedef PFNGLCONVOLUTIONPARAMETERFEXTPROC = func(target: GLenum, pname: GLenum, params: GLfloat);

@foreign
typedef PFNGLCONVOLUTIONPARAMETERFVEXTPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLCONVOLUTIONPARAMETERIEXTPROC = func(target: GLenum, pname: GLenum, params: GLint);

@foreign
typedef PFNGLCONVOLUTIONPARAMETERIVEXTPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC = func(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei);

@foreign
typedef PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC = func(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLGETCONVOLUTIONFILTEREXTPROC = func(target: GLenum, format: GLenum, type: GLenum, image: void*);

@foreign
typedef PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETSEPARABLEFILTEREXTPROC = func(target: GLenum, format: GLenum, type: GLenum, row: void*, column: void*, span: void*);

@foreign
typedef PFNGLSEPARABLEFILTER2DEXTPROC = func(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, row: void const*, column: void const*);

@foreign
func glConvolutionFilter1DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, image: void const*);

@foreign
func glConvolutionFilter2DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, image: void const*);

@foreign
func glConvolutionParameterfEXT(target: GLenum, pname: GLenum, params: GLfloat);

@foreign
func glConvolutionParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glConvolutionParameteriEXT(target: GLenum, pname: GLenum, params: GLint);

@foreign
func glConvolutionParameterivEXT(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glCopyConvolutionFilter1DEXT(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei);

@foreign
func glCopyConvolutionFilter2DEXT(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glGetConvolutionFilterEXT(target: GLenum, format: GLenum, type: GLenum, image: void*);

@foreign
func glGetConvolutionParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetConvolutionParameterivEXT(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetSeparableFilterEXT(target: GLenum, format: GLenum, type: GLenum, row: void*, column: void*, span: void*);

@foreign
func glSeparableFilter2DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, row: void const*, column: void const*);

@foreign
typedef PFNGLTANGENT3BEXTPROC = func(tx: GLbyte, ty: GLbyte, tz: GLbyte);

@foreign
typedef PFNGLTANGENT3BVEXTPROC = func(v: GLbyte*);

@foreign
typedef PFNGLTANGENT3DEXTPROC = func(tx: GLdouble, ty: GLdouble, tz: GLdouble);

@foreign
typedef PFNGLTANGENT3DVEXTPROC = func(v: GLdouble*);

@foreign
typedef PFNGLTANGENT3FEXTPROC = func(tx: GLfloat, ty: GLfloat, tz: GLfloat);

@foreign
typedef PFNGLTANGENT3FVEXTPROC = func(v: GLfloat*);

@foreign
typedef PFNGLTANGENT3IEXTPROC = func(tx: GLint, ty: GLint, tz: GLint);

@foreign
typedef PFNGLTANGENT3IVEXTPROC = func(v: GLint*);

@foreign
typedef PFNGLTANGENT3SEXTPROC = func(tx: GLshort, ty: GLshort, tz: GLshort);

@foreign
typedef PFNGLTANGENT3SVEXTPROC = func(v: GLshort*);

@foreign
typedef PFNGLBINORMAL3BEXTPROC = func(bx: GLbyte, by: GLbyte, bz: GLbyte);

@foreign
typedef PFNGLBINORMAL3BVEXTPROC = func(v: GLbyte*);

@foreign
typedef PFNGLBINORMAL3DEXTPROC = func(bx: GLdouble, by: GLdouble, bz: GLdouble);

@foreign
typedef PFNGLBINORMAL3DVEXTPROC = func(v: GLdouble*);

@foreign
typedef PFNGLBINORMAL3FEXTPROC = func(bx: GLfloat, by: GLfloat, bz: GLfloat);

@foreign
typedef PFNGLBINORMAL3FVEXTPROC = func(v: GLfloat*);

@foreign
typedef PFNGLBINORMAL3IEXTPROC = func(bx: GLint, by: GLint, bz: GLint);

@foreign
typedef PFNGLBINORMAL3IVEXTPROC = func(v: GLint*);

@foreign
typedef PFNGLBINORMAL3SEXTPROC = func(bx: GLshort, by: GLshort, bz: GLshort);

@foreign
typedef PFNGLBINORMAL3SVEXTPROC = func(v: GLshort*);

@foreign
typedef PFNGLTANGENTPOINTEREXTPROC = func(type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLBINORMALPOINTEREXTPROC = func(type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glTangent3bEXT(tx: GLbyte, ty: GLbyte, tz: GLbyte);

@foreign
func glTangent3bvEXT(v: GLbyte*);

@foreign
func glTangent3dEXT(tx: GLdouble, ty: GLdouble, tz: GLdouble);

@foreign
func glTangent3dvEXT(v: GLdouble*);

@foreign
func glTangent3fEXT(tx: GLfloat, ty: GLfloat, tz: GLfloat);

@foreign
func glTangent3fvEXT(v: GLfloat*);

@foreign
func glTangent3iEXT(tx: GLint, ty: GLint, tz: GLint);

@foreign
func glTangent3ivEXT(v: GLint*);

@foreign
func glTangent3sEXT(tx: GLshort, ty: GLshort, tz: GLshort);

@foreign
func glTangent3svEXT(v: GLshort*);

@foreign
func glBinormal3bEXT(bx: GLbyte, by: GLbyte, bz: GLbyte);

@foreign
func glBinormal3bvEXT(v: GLbyte*);

@foreign
func glBinormal3dEXT(bx: GLdouble, by: GLdouble, bz: GLdouble);

@foreign
func glBinormal3dvEXT(v: GLdouble*);

@foreign
func glBinormal3fEXT(bx: GLfloat, by: GLfloat, bz: GLfloat);

@foreign
func glBinormal3fvEXT(v: GLfloat*);

@foreign
func glBinormal3iEXT(bx: GLint, by: GLint, bz: GLint);

@foreign
func glBinormal3ivEXT(v: GLint*);

@foreign
func glBinormal3sEXT(bx: GLshort, by: GLshort, bz: GLshort);

@foreign
func glBinormal3svEXT(v: GLshort*);

@foreign
func glTangentPointerEXT(type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glBinormalPointerEXT(type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLCOPYTEXIMAGE1DEXTPROC = func(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint);

@foreign
typedef PFNGLCOPYTEXIMAGE2DEXTPROC = func(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint);

@foreign
typedef PFNGLCOPYTEXSUBIMAGE1DEXTPROC = func(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);

@foreign
typedef PFNGLCOPYTEXSUBIMAGE2DEXTPROC = func(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLCOPYTEXSUBIMAGE3DEXTPROC = func(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glCopyTexImage1DEXT(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint);

@foreign
func glCopyTexImage2DEXT(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint);

@foreign
func glCopyTexSubImage1DEXT(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);

@foreign
func glCopyTexSubImage2DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glCopyTexSubImage3DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLCULLPARAMETERDVEXTPROC = func(pname: GLenum, params: GLdouble*);

@foreign
typedef PFNGLCULLPARAMETERFVEXTPROC = func(pname: GLenum, params: GLfloat*);

@foreign
func glCullParameterdvEXT(pname: GLenum, params: GLdouble*);

@foreign
func glCullParameterfvEXT(pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLLABELOBJECTEXTPROC = func(type: GLenum, object: GLuint, length: GLsizei, label: GLchar*);

@foreign
typedef PFNGLGETOBJECTLABELEXTPROC = func(type: GLenum, object: GLuint, bufSize: GLsizei, length: GLsizei*, label: GLchar*);

@foreign
func glLabelObjectEXT(type: GLenum, object: GLuint, length: GLsizei, label: GLchar*);

@foreign
func glGetObjectLabelEXT(type: GLenum, object: GLuint, bufSize: GLsizei, length: GLsizei*, label: GLchar*);

@foreign
typedef PFNGLINSERTEVENTMARKEREXTPROC = func(length: GLsizei, marker: GLchar*);

@foreign
typedef PFNGLPUSHGROUPMARKEREXTPROC = func(length: GLsizei, marker: GLchar*);

@foreign
typedef PFNGLPOPGROUPMARKEREXTPROC = func();

@foreign
func glInsertEventMarkerEXT(length: GLsizei, marker: GLchar*);

@foreign
func glPushGroupMarkerEXT(length: GLsizei, marker: GLchar*);

@foreign
func glPopGroupMarkerEXT();

@foreign
typedef PFNGLDEPTHBOUNDSEXTPROC = func(zmin: GLclampd, zmax: GLclampd);

@foreign
func glDepthBoundsEXT(zmin: GLclampd, zmax: GLclampd);

@foreign
typedef PFNGLMATRIXLOADFEXTPROC = func(mode: GLenum, m: GLfloat*);

@foreign
typedef PFNGLMATRIXLOADDEXTPROC = func(mode: GLenum, m: GLdouble*);

@foreign
typedef PFNGLMATRIXMULTFEXTPROC = func(mode: GLenum, m: GLfloat*);

@foreign
typedef PFNGLMATRIXMULTDEXTPROC = func(mode: GLenum, m: GLdouble*);

@foreign
typedef PFNGLMATRIXLOADIDENTITYEXTPROC = func(mode: GLenum);

@foreign
typedef PFNGLMATRIXROTATEFEXTPROC = func(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLMATRIXROTATEDEXTPROC = func(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLMATRIXSCALEFEXTPROC = func(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLMATRIXSCALEDEXTPROC = func(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLMATRIXTRANSLATEFEXTPROC = func(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLMATRIXTRANSLATEDEXTPROC = func(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLMATRIXFRUSTUMEXTPROC = func(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble);

@foreign
typedef PFNGLMATRIXORTHOEXTPROC = func(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble);

@foreign
typedef PFNGLMATRIXPOPEXTPROC = func(mode: GLenum);

@foreign
typedef PFNGLMATRIXPUSHEXTPROC = func(mode: GLenum);

@foreign
typedef PFNGLCLIENTATTRIBDEFAULTEXTPROC = func(mask: GLbitfield);

@foreign
typedef PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = func(mask: GLbitfield);

@foreign
typedef PFNGLTEXTUREPARAMETERFEXTPROC = func(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLTEXTUREPARAMETERFVEXTPROC = func(texture: GLuint, target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLTEXTUREPARAMETERIEXTPROC = func(texture: GLuint, target: GLenum, pname: GLenum, param: GLint);

@foreign
typedef PFNGLTEXTUREPARAMETERIVEXTPROC = func(texture: GLuint, target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLTEXTUREIMAGE1DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXTUREIMAGE2DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXTURESUBIMAGE1DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXTURESUBIMAGE2DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLCOPYTEXTUREIMAGE1DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint);

@foreign
typedef PFNGLCOPYTEXTUREIMAGE2DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint);

@foreign
typedef PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);

@foreign
typedef PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLGETTEXTUREIMAGEEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: void*);

@foreign
typedef PFNGLGETTEXTUREPARAMETERFVEXTPROC = func(texture: GLuint, target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETTEXTUREPARAMETERIVEXTPROC = func(texture: GLuint, target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLTEXTUREIMAGE3DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXTURESUBIMAGE3DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLBINDMULTITEXTUREEXTPROC = func(texunit: GLenum, target: GLenum, texture: GLuint);

@foreign
typedef PFNGLMULTITEXCOORDPOINTEREXTPROC = func(texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLMULTITEXENVFEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLMULTITEXENVFVEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLMULTITEXENVIEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint);

@foreign
typedef PFNGLMULTITEXENVIVEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLMULTITEXGENDEXTPROC = func(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble);

@foreign
typedef PFNGLMULTITEXGENDVEXTPROC = func(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLdouble*);

@foreign
typedef PFNGLMULTITEXGENFEXTPROC = func(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLMULTITEXGENFVEXTPROC = func(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLMULTITEXGENIEXTPROC = func(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint);

@foreign
typedef PFNGLMULTITEXGENIVEXTPROC = func(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETMULTITEXENVFVEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETMULTITEXENVIVEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETMULTITEXGENDVEXTPROC = func(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLdouble*);

@foreign
typedef PFNGLGETMULTITEXGENFVEXTPROC = func(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETMULTITEXGENIVEXTPROC = func(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLMULTITEXPARAMETERIEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint);

@foreign
typedef PFNGLMULTITEXPARAMETERIVEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLMULTITEXPARAMETERFEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLMULTITEXPARAMETERFVEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLMULTITEXIMAGE1DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLMULTITEXIMAGE2DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLMULTITEXSUBIMAGE1DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLMULTITEXSUBIMAGE2DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLCOPYMULTITEXIMAGE1DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint);

@foreign
typedef PFNGLCOPYMULTITEXIMAGE2DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint);

@foreign
typedef PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);

@foreign
typedef PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLGETMULTITEXIMAGEEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: void*);

@foreign
typedef PFNGLGETMULTITEXPARAMETERFVEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETMULTITEXPARAMETERIVEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLMULTITEXIMAGE3DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLMULTITEXSUBIMAGE3DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLENABLECLIENTSTATEINDEXEDEXTPROC = func(array: GLenum, index: GLuint);

@foreign
typedef PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC = func(array: GLenum, index: GLuint);

@foreign
typedef PFNGLGETFLOATINDEXEDVEXTPROC = func(target: GLenum, index: GLuint, data: GLfloat*);

@foreign
typedef PFNGLGETDOUBLEINDEXEDVEXTPROC = func(target: GLenum, index: GLuint, data: GLdouble*);

@foreign
typedef PFNGLGETPOINTERINDEXEDVEXTPROC = func(target: GLenum, index: GLuint, data: void**);

@foreign
typedef PFNGLENABLEINDEXEDEXTPROC = func(target: GLenum, index: GLuint);

@foreign
typedef PFNGLDISABLEINDEXEDEXTPROC = func(target: GLenum, index: GLuint);

@foreign
typedef PFNGLISENABLEDINDEXEDEXTPROC = func(target: GLenum, index: GLuint): GLboolean;

@foreign
typedef PFNGLGETINTEGERINDEXEDVEXTPROC = func(target: GLenum, index: GLuint, data: GLint*);

@foreign
typedef PFNGLGETBOOLEANINDEXEDVEXTPROC = func(target: GLenum, index: GLuint, data: GLboolean*);

@foreign
typedef PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: void const*);

@foreign
typedef PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = func(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: void const*);

@foreign
typedef PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = func(texture: GLuint, target: GLenum, lod: GLint, img: void*);

@foreign
typedef PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: void const*);

@foreign
typedef PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: void const*);

@foreign
typedef PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: void const*);

@foreign
typedef PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: void const*);

@foreign
typedef PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: void const*);

@foreign
typedef PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = func(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: void const*);

@foreign
typedef PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = func(texunit: GLenum, target: GLenum, lod: GLint, img: void*);

@foreign
typedef PFNGLMATRIXLOADTRANSPOSEFEXTPROC = func(mode: GLenum, m: GLfloat*);

@foreign
typedef PFNGLMATRIXLOADTRANSPOSEDEXTPROC = func(mode: GLenum, m: GLdouble*);

@foreign
typedef PFNGLMATRIXMULTTRANSPOSEFEXTPROC = func(mode: GLenum, m: GLfloat*);

@foreign
typedef PFNGLMATRIXMULTTRANSPOSEDEXTPROC = func(mode: GLenum, m: GLdouble*);

@foreign
typedef PFNGLNAMEDBUFFERDATAEXTPROC = func(buffer: GLuint, size: GLsizeiptr, data: void const*, usage: GLenum);

@foreign
typedef PFNGLNAMEDBUFFERSUBDATAEXTPROC = func(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void const*);

@foreign
typedef PFNGLMAPNAMEDBUFFEREXTPROC = func(buffer: GLuint, access: GLenum): void*;

@foreign
typedef PFNGLUNMAPNAMEDBUFFEREXTPROC = func(buffer: GLuint): GLboolean;

@foreign
typedef PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC = func(buffer: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = func(buffer: GLuint, pname: GLenum, params: void**);

@foreign
typedef PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = func(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void*);

@foreign
typedef PFNGLPROGRAMUNIFORM1FEXTPROC = func(program: GLuint, location: GLint, v0: GLfloat);

@foreign
typedef PFNGLPROGRAMUNIFORM2FEXTPROC = func(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat);

@foreign
typedef PFNGLPROGRAMUNIFORM3FEXTPROC = func(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);

@foreign
typedef PFNGLPROGRAMUNIFORM4FEXTPROC = func(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);

@foreign
typedef PFNGLPROGRAMUNIFORM1IEXTPROC = func(program: GLuint, location: GLint, v0: GLint);

@foreign
typedef PFNGLPROGRAMUNIFORM2IEXTPROC = func(program: GLuint, location: GLint, v0: GLint, v1: GLint);

@foreign
typedef PFNGLPROGRAMUNIFORM3IEXTPROC = func(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint);

@foreign
typedef PFNGLPROGRAMUNIFORM4IEXTPROC = func(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);

@foreign
typedef PFNGLPROGRAMUNIFORM1FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORM2FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORM3FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORM4FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORM1IVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLPROGRAMUNIFORM2IVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLPROGRAMUNIFORM3IVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLPROGRAMUNIFORM4IVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
typedef PFNGLTEXTUREBUFFEREXTPROC = func(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint);

@foreign
typedef PFNGLMULTITEXBUFFEREXTPROC = func(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint);

@foreign
typedef PFNGLTEXTUREPARAMETERIIVEXTPROC = func(texture: GLuint, target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLTEXTUREPARAMETERIUIVEXTPROC = func(texture: GLuint, target: GLenum, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLGETTEXTUREPARAMETERIIVEXTPROC = func(texture: GLuint, target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = func(texture: GLuint, target: GLenum, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLMULTITEXPARAMETERIIVEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLMULTITEXPARAMETERIUIVEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLGETMULTITEXPARAMETERIIVEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = func(texunit: GLenum, target: GLenum, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLPROGRAMUNIFORM1UIEXTPROC = func(program: GLuint, location: GLint, v0: GLuint);

@foreign
typedef PFNGLPROGRAMUNIFORM2UIEXTPROC = func(program: GLuint, location: GLint, v0: GLuint, v1: GLuint);

@foreign
typedef PFNGLPROGRAMUNIFORM3UIEXTPROC = func(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);

@foreign
typedef PFNGLPROGRAMUNIFORM4UIEXTPROC = func(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);

@foreign
typedef PFNGLPROGRAMUNIFORM1UIVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLPROGRAMUNIFORM2UIVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLPROGRAMUNIFORM3UIVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLPROGRAMUNIFORM4UIVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLfloat*);

@foreign
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, params: GLint*);

@foreign
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLint*);

@foreign
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);

@foreign
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, params: GLuint*);

@foreign
typedef PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLuint*);

@foreign
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, params: GLint*);

@foreign
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, params: GLuint*);

@foreign
typedef PFNGLENABLECLIENTSTATEIEXTPROC = func(array: GLenum, index: GLuint);

@foreign
typedef PFNGLDISABLECLIENTSTATEIEXTPROC = func(array: GLenum, index: GLuint);

@foreign
typedef PFNGLGETFLOATI_VEXTPROC = func(pname: GLenum, index: GLuint, params: GLfloat*);

@foreign
typedef PFNGLGETDOUBLEI_VEXTPROC = func(pname: GLenum, index: GLuint, params: GLdouble*);

@foreign
typedef PFNGLGETPOINTERI_VEXTPROC = func(pname: GLenum, index: GLuint, params: void**);

@foreign
typedef PFNGLNAMEDPROGRAMSTRINGEXTPROC = func(program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: void const*);

@foreign
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, params: GLdouble*);

@foreign
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
typedef PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, params: GLfloat*);

@foreign
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, params: GLdouble*);

@foreign
typedef PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = func(program: GLuint, target: GLenum, index: GLuint, params: GLfloat*);

@foreign
typedef PFNGLGETNAMEDPROGRAMIVEXTPROC = func(program: GLuint, target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = func(program: GLuint, target: GLenum, pname: GLenum, string: void*);

@foreign
typedef PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = func(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = func(renderbuffer: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = func(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = func(renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC = func(framebuffer: GLuint, target: GLenum): GLenum;

@foreign
typedef PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = func(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = func(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = func(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = func(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);

@foreign
typedef PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = func(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGENERATETEXTUREMIPMAPEXTPROC = func(texture: GLuint, target: GLenum);

@foreign
typedef PFNGLGENERATEMULTITEXMIPMAPEXTPROC = func(texunit: GLenum, target: GLenum);

@foreign
typedef PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC = func(framebuffer: GLuint, mode: GLenum);

@foreign
typedef PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = func(framebuffer: GLuint, n: GLsizei, bufs: GLenum*);

@foreign
typedef PFNGLFRAMEBUFFERREADBUFFEREXTPROC = func(framebuffer: GLuint, mode: GLenum);

@foreign
typedef PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = func(framebuffer: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = func(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = func(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = func(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = func(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum);

@foreign
typedef PFNGLTEXTURERENDERBUFFEREXTPROC = func(texture: GLuint, target: GLenum, renderbuffer: GLuint);

@foreign
typedef PFNGLMULTITEXRENDERBUFFEREXTPROC = func(texunit: GLenum, target: GLenum, renderbuffer: GLuint);

@foreign
typedef PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC = func(vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
typedef PFNGLVERTEXARRAYCOLOROFFSETEXTPROC = func(vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
typedef PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC = func(vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr);

@foreign
typedef PFNGLVERTEXARRAYINDEXOFFSETEXTPROC = func(vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
typedef PFNGLVERTEXARRAYNORMALOFFSETEXTPROC = func(vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
typedef PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC = func(vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
typedef PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC = func(vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
typedef PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC = func(vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
typedef PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC = func(vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
typedef PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC = func(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr);

@foreign
typedef PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC = func(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
typedef PFNGLENABLEVERTEXARRAYEXTPROC = func(vaobj: GLuint, array: GLenum);

@foreign
typedef PFNGLDISABLEVERTEXARRAYEXTPROC = func(vaobj: GLuint, array: GLenum);

@foreign
typedef PFNGLENABLEVERTEXARRAYATTRIBEXTPROC = func(vaobj: GLuint, index: GLuint);

@foreign
typedef PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC = func(vaobj: GLuint, index: GLuint);

@foreign
typedef PFNGLGETVERTEXARRAYINTEGERVEXTPROC = func(vaobj: GLuint, pname: GLenum, param: GLint*);

@foreign
typedef PFNGLGETVERTEXARRAYPOINTERVEXTPROC = func(vaobj: GLuint, pname: GLenum, param: void**);

@foreign
typedef PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC = func(vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint*);

@foreign
typedef PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC = func(vaobj: GLuint, index: GLuint, pname: GLenum, param: void**);

@foreign
typedef PFNGLMAPNAMEDBUFFERRANGEEXTPROC = func(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): void*;

@foreign
typedef PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = func(buffer: GLuint, offset: GLintptr, length: GLsizeiptr);

@foreign
typedef PFNGLNAMEDBUFFERSTORAGEEXTPROC = func(buffer: GLuint, size: GLsizeiptr, data: void const*, flags: GLbitfield);

@foreign
typedef PFNGLCLEARNAMEDBUFFERDATAEXTPROC = func(buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: void const*);

@foreign
typedef PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC = func(buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: void const*);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC = func(framebuffer: GLuint, pname: GLenum, param: GLint);

@foreign
typedef PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC = func(framebuffer: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLPROGRAMUNIFORM1DEXTPROC = func(program: GLuint, location: GLint, x: GLdouble);

@foreign
typedef PFNGLPROGRAMUNIFORM2DEXTPROC = func(program: GLuint, location: GLint, x: GLdouble, y: GLdouble);

@foreign
typedef PFNGLPROGRAMUNIFORM3DEXTPROC = func(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLPROGRAMUNIFORM4DEXTPROC = func(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLPROGRAMUNIFORM1DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORM2DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORM3DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORM4DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC = func(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
typedef PFNGLTEXTUREBUFFERRANGEEXTPROC = func(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
typedef PFNGLTEXTURESTORAGE1DEXTPROC = func(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei);

@foreign
typedef PFNGLTEXTURESTORAGE2DEXTPROC = func(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLTEXTURESTORAGE3DEXTPROC = func(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei);

@foreign
typedef PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC = func(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean);

@foreign
typedef PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC = func(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean);

@foreign
typedef PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC = func(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei);

@foreign
typedef PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC = func(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint);

@foreign
typedef PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC = func(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint);

@foreign
typedef PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC = func(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint);

@foreign
typedef PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC = func(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint);

@foreign
typedef PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC = func(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint);

@foreign
typedef PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = func(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
typedef PFNGLTEXTUREPAGECOMMITMENTEXTPROC = func(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean);

@foreign
typedef PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC = func(vaobj: GLuint, index: GLuint, divisor: GLuint);

@foreign
func glMatrixLoadfEXT(mode: GLenum, m: GLfloat*);

@foreign
func glMatrixLoaddEXT(mode: GLenum, m: GLdouble*);

@foreign
func glMatrixMultfEXT(mode: GLenum, m: GLfloat*);

@foreign
func glMatrixMultdEXT(mode: GLenum, m: GLdouble*);

@foreign
func glMatrixLoadIdentityEXT(mode: GLenum);

@foreign
func glMatrixRotatefEXT(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glMatrixRotatedEXT(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glMatrixScalefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glMatrixScaledEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glMatrixTranslatefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glMatrixTranslatedEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glMatrixFrustumEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble);

@foreign
func glMatrixOrthoEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble);

@foreign
func glMatrixPopEXT(mode: GLenum);

@foreign
func glMatrixPushEXT(mode: GLenum);

@foreign
func glClientAttribDefaultEXT(mask: GLbitfield);

@foreign
func glPushClientAttribDefaultEXT(mask: GLbitfield);

@foreign
func glTextureParameterfEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glTextureParameterfvEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glTextureParameteriEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLint);

@foreign
func glTextureParameterivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glCopyTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint);

@foreign
func glCopyTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint);

@foreign
func glCopyTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);

@foreign
func glCopyTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glGetTextureImageEXT(texture: GLuint, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: void*);

@foreign
func glGetTextureParameterfvEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetTextureParameterivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetTextureLevelParameterfvEXT(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: GLfloat*);

@foreign
func glGetTextureLevelParameterivEXT(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: GLint*);

@foreign
func glTextureImage3DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glCopyTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glBindMultiTextureEXT(texunit: GLenum, target: GLenum, texture: GLuint);

@foreign
func glMultiTexCoordPointerEXT(texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glMultiTexEnvfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glMultiTexEnvfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glMultiTexEnviEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint);

@foreign
func glMultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glMultiTexGendEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble);

@foreign
func glMultiTexGendvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLdouble*);

@foreign
func glMultiTexGenfEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glMultiTexGenfvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glMultiTexGeniEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint);

@foreign
func glMultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetMultiTexEnvfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetMultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetMultiTexGendvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLdouble*);

@foreign
func glGetMultiTexGenfvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetMultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLint*);

@foreign
func glMultiTexParameteriEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint);

@foreign
func glMultiTexParameterivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glMultiTexParameterfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glMultiTexParameterfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glCopyMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint);

@foreign
func glCopyMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint);

@foreign
func glCopyMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);

@foreign
func glCopyMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glGetMultiTexImageEXT(texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: void*);

@foreign
func glGetMultiTexParameterfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetMultiTexParameterivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetMultiTexLevelParameterfvEXT(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: GLfloat*);

@foreign
func glGetMultiTexLevelParameterivEXT(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: GLint*);

@foreign
func glMultiTexImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glCopyMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
func glEnableClientStateIndexedEXT(array: GLenum, index: GLuint);

@foreign
func glDisableClientStateIndexedEXT(array: GLenum, index: GLuint);

@foreign
func glGetFloatIndexedvEXT(target: GLenum, index: GLuint, data: GLfloat*);

@foreign
func glGetDoubleIndexedvEXT(target: GLenum, index: GLuint, data: GLdouble*);

@foreign
func glGetPointerIndexedvEXT(target: GLenum, index: GLuint, data: void**);

@foreign
func glEnableIndexedEXT(target: GLenum, index: GLuint);

@foreign
func glDisableIndexedEXT(target: GLenum, index: GLuint);

@foreign
func glIsEnabledIndexedEXT(target: GLenum, index: GLuint): GLboolean;

@foreign
func glGetIntegerIndexedvEXT(target: GLenum, index: GLuint, data: GLint*);

@foreign
func glGetBooleanIndexedvEXT(target: GLenum, index: GLuint, data: GLboolean*);

@foreign
func glCompressedTextureImage3DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: void const*);

@foreign
func glCompressedTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: void const*);

@foreign
func glCompressedTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: void const*);

@foreign
func glCompressedTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: void const*);

@foreign
func glCompressedTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: void const*);

@foreign
func glCompressedTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: void const*);

@foreign
func glGetCompressedTextureImageEXT(texture: GLuint, target: GLenum, lod: GLint, img: void*);

@foreign
func glCompressedMultiTexImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: void const*);

@foreign
func glCompressedMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: void const*);

@foreign
func glCompressedMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: void const*);

@foreign
func glCompressedMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: void const*);

@foreign
func glCompressedMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: void const*);

@foreign
func glCompressedMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: void const*);

@foreign
func glGetCompressedMultiTexImageEXT(texunit: GLenum, target: GLenum, lod: GLint, img: void*);

@foreign
func glMatrixLoadTransposefEXT(mode: GLenum, m: GLfloat*);

@foreign
func glMatrixLoadTransposedEXT(mode: GLenum, m: GLdouble*);

@foreign
func glMatrixMultTransposefEXT(mode: GLenum, m: GLfloat*);

@foreign
func glMatrixMultTransposedEXT(mode: GLenum, m: GLdouble*);

@foreign
func glNamedBufferDataEXT(buffer: GLuint, size: GLsizeiptr, data: void const*, usage: GLenum);

@foreign
func glNamedBufferSubDataEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void const*);

@foreign
func glMapNamedBufferEXT(buffer: GLuint, access: GLenum): void*;

@foreign
func glUnmapNamedBufferEXT(buffer: GLuint): GLboolean;

@foreign
func glGetNamedBufferParameterivEXT(buffer: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetNamedBufferPointervEXT(buffer: GLuint, pname: GLenum, params: void**);

@foreign
func glGetNamedBufferSubDataEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void*);

@foreign
func glProgramUniform1fEXT(program: GLuint, location: GLint, v0: GLfloat);

@foreign
func glProgramUniform2fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat);

@foreign
func glProgramUniform3fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);

@foreign
func glProgramUniform4fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);

@foreign
func glProgramUniform1iEXT(program: GLuint, location: GLint, v0: GLint);

@foreign
func glProgramUniform2iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint);

@foreign
func glProgramUniform3iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint);

@foreign
func glProgramUniform4iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);

@foreign
func glProgramUniform1fvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glProgramUniform2fvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glProgramUniform3fvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glProgramUniform4fvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*);

@foreign
func glProgramUniform1ivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
func glProgramUniform2ivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
func glProgramUniform3ivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
func glProgramUniform4ivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLint*);

@foreign
func glProgramUniformMatrix2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix2x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix3x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix2x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix4x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix3x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glProgramUniformMatrix4x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*);

@foreign
func glTextureBufferEXT(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint);

@foreign
func glMultiTexBufferEXT(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint);

@foreign
func glTextureParameterIivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glTextureParameterIuivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLuint*);

@foreign
func glGetTextureParameterIivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetTextureParameterIuivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLuint*);

@foreign
func glMultiTexParameterIivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glMultiTexParameterIuivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLuint*);

@foreign
func glGetMultiTexParameterIivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetMultiTexParameterIuivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLuint*);

@foreign
func glProgramUniform1uiEXT(program: GLuint, location: GLint, v0: GLuint);

@foreign
func glProgramUniform2uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint);

@foreign
func glProgramUniform3uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);

@foreign
func glProgramUniform4uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);

@foreign
func glProgramUniform1uivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glProgramUniform2uivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glProgramUniform3uivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glProgramUniform4uivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glNamedProgramLocalParameters4fvEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLfloat*);

@foreign
func glNamedProgramLocalParameterI4iEXT(program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
func glNamedProgramLocalParameterI4ivEXT(program: GLuint, target: GLenum, index: GLuint, params: GLint*);

@foreign
func glNamedProgramLocalParametersI4ivEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLint*);

@foreign
func glNamedProgramLocalParameterI4uiEXT(program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);

@foreign
func glNamedProgramLocalParameterI4uivEXT(program: GLuint, target: GLenum, index: GLuint, params: GLuint*);

@foreign
func glNamedProgramLocalParametersI4uivEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLuint*);

@foreign
func glGetNamedProgramLocalParameterIivEXT(program: GLuint, target: GLenum, index: GLuint, params: GLint*);

@foreign
func glGetNamedProgramLocalParameterIuivEXT(program: GLuint, target: GLenum, index: GLuint, params: GLuint*);

@foreign
func glEnableClientStateiEXT(array: GLenum, index: GLuint);

@foreign
func glDisableClientStateiEXT(array: GLenum, index: GLuint);

@foreign
func glGetFloati_vEXT(pname: GLenum, index: GLuint, params: GLfloat*);

@foreign
func glGetDoublei_vEXT(pname: GLenum, index: GLuint, params: GLdouble*);

@foreign
func glGetPointeri_vEXT(pname: GLenum, index: GLuint, params: void**);

@foreign
func glNamedProgramStringEXT(program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: void const*);

@foreign
func glNamedProgramLocalParameter4dEXT(program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glNamedProgramLocalParameter4dvEXT(program: GLuint, target: GLenum, index: GLuint, params: GLdouble*);

@foreign
func glNamedProgramLocalParameter4fEXT(program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glNamedProgramLocalParameter4fvEXT(program: GLuint, target: GLenum, index: GLuint, params: GLfloat*);

@foreign
func glGetNamedProgramLocalParameterdvEXT(program: GLuint, target: GLenum, index: GLuint, params: GLdouble*);

@foreign
func glGetNamedProgramLocalParameterfvEXT(program: GLuint, target: GLenum, index: GLuint, params: GLfloat*);

@foreign
func glGetNamedProgramivEXT(program: GLuint, target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetNamedProgramStringEXT(program: GLuint, target: GLenum, pname: GLenum, string: void*);

@foreign
func glNamedRenderbufferStorageEXT(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glGetNamedRenderbufferParameterivEXT(renderbuffer: GLuint, pname: GLenum, params: GLint*);

@foreign
func glNamedRenderbufferStorageMultisampleEXT(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glCheckNamedFramebufferStatusEXT(framebuffer: GLuint, target: GLenum): GLenum;

@foreign
func glNamedFramebufferTexture1DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);

@foreign
func glNamedFramebufferTexture2DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);

@foreign
func glNamedFramebufferTexture3DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint);

@foreign
func glNamedFramebufferRenderbufferEXT(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);

@foreign
func glGetNamedFramebufferAttachmentParameterivEXT(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGenerateTextureMipmapEXT(texture: GLuint, target: GLenum);

@foreign
func glGenerateMultiTexMipmapEXT(texunit: GLenum, target: GLenum);

@foreign
func glFramebufferDrawBufferEXT(framebuffer: GLuint, mode: GLenum);

@foreign
func glFramebufferDrawBuffersEXT(framebuffer: GLuint, n: GLsizei, bufs: GLenum*);

@foreign
func glFramebufferReadBufferEXT(framebuffer: GLuint, mode: GLenum);

@foreign
func glGetFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: GLint*);

@foreign
func glNamedCopyBufferSubDataEXT(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr);

@foreign
func glNamedFramebufferTextureEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint);

@foreign
func glNamedFramebufferTextureLayerEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);

@foreign
func glNamedFramebufferTextureFaceEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum);

@foreign
func glTextureRenderbufferEXT(texture: GLuint, target: GLenum, renderbuffer: GLuint);

@foreign
func glMultiTexRenderbufferEXT(texunit: GLenum, target: GLenum, renderbuffer: GLuint);

@foreign
func glVertexArrayVertexOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
func glVertexArrayColorOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
func glVertexArrayEdgeFlagOffsetEXT(vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr);

@foreign
func glVertexArrayIndexOffsetEXT(vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
func glVertexArrayNormalOffsetEXT(vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
func glVertexArrayTexCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
func glVertexArrayMultiTexCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
func glVertexArrayFogCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
func glVertexArraySecondaryColorOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
func glVertexArrayVertexAttribOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr);

@foreign
func glVertexArrayVertexAttribIOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
func glEnableVertexArrayEXT(vaobj: GLuint, array: GLenum);

@foreign
func glDisableVertexArrayEXT(vaobj: GLuint, array: GLenum);

@foreign
func glEnableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint);

@foreign
func glDisableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint);

@foreign
func glGetVertexArrayIntegervEXT(vaobj: GLuint, pname: GLenum, param: GLint*);

@foreign
func glGetVertexArrayPointervEXT(vaobj: GLuint, pname: GLenum, param: void**);

@foreign
func glGetVertexArrayIntegeri_vEXT(vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint*);

@foreign
func glGetVertexArrayPointeri_vEXT(vaobj: GLuint, index: GLuint, pname: GLenum, param: void**);

@foreign
func glMapNamedBufferRangeEXT(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): void*;

@foreign
func glFlushMappedNamedBufferRangeEXT(buffer: GLuint, offset: GLintptr, length: GLsizeiptr);

@foreign
func glNamedBufferStorageEXT(buffer: GLuint, size: GLsizeiptr, data: void const*, flags: GLbitfield);

@foreign
func glClearNamedBufferDataEXT(buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: void const*);

@foreign
func glClearNamedBufferSubDataEXT(buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: void const*);

@foreign
func glNamedFramebufferParameteriEXT(framebuffer: GLuint, pname: GLenum, param: GLint);

@foreign
func glGetNamedFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: GLint*);

@foreign
func glProgramUniform1dEXT(program: GLuint, location: GLint, x: GLdouble);

@foreign
func glProgramUniform2dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble);

@foreign
func glProgramUniform3dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glProgramUniform4dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glProgramUniform1dvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
func glProgramUniform2dvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
func glProgramUniform3dvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
func glProgramUniform4dvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*);

@foreign
func glProgramUniformMatrix2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix2x3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix2x4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix3x2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix3x4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix4x2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glProgramUniformMatrix4x3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*);

@foreign
func glTextureBufferRangeEXT(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
func glTextureStorage1DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei);

@foreign
func glTextureStorage2DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glTextureStorage3DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei);

@foreign
func glTextureStorage2DMultisampleEXT(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean);

@foreign
func glTextureStorage3DMultisampleEXT(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean);

@foreign
func glVertexArrayBindVertexBufferEXT(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei);

@foreign
func glVertexArrayVertexAttribFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint);

@foreign
func glVertexArrayVertexAttribIFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint);

@foreign
func glVertexArrayVertexAttribLFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint);

@foreign
func glVertexArrayVertexAttribBindingEXT(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint);

@foreign
func glVertexArrayVertexBindingDivisorEXT(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint);

@foreign
func glVertexArrayVertexAttribLOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr);

@foreign
func glTexturePageCommitmentEXT(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean);

@foreign
func glVertexArrayVertexAttribDivisorEXT(vaobj: GLuint, index: GLuint, divisor: GLuint);

@foreign
typedef PFNGLCOLORMASKINDEXEDEXTPROC = func(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean);

@foreign
func glColorMaskIndexedEXT(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean);

@foreign
typedef PFNGLDRAWARRAYSINSTANCEDEXTPROC = func(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei);

@foreign
typedef PFNGLDRAWELEMENTSINSTANCEDEXTPROC = func(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, primcount: GLsizei);

@foreign
func glDrawArraysInstancedEXT(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei);

@foreign
func glDrawElementsInstancedEXT(mode: GLenum, count: GLsizei, type: GLenum, indices: void const*, primcount: GLsizei);

@foreign
typedef PFNGLDRAWRANGEELEMENTSEXTPROC = func(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: void const*);

@foreign
func glDrawRangeElementsEXT(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: void const*);

@foreign
typedef GLeglClientBufferEXT = void*;

@foreign
typedef PFNGLBUFFERSTORAGEEXTERNALEXTPROC = func(target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield);

@foreign
typedef PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = func(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield);

@foreign
func glBufferStorageExternalEXT(target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield);

@foreign
func glNamedBufferStorageExternalEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield);

@foreign
typedef PFNGLFOGCOORDFEXTPROC = func(coord: GLfloat);

@foreign
typedef PFNGLFOGCOORDFVEXTPROC = func(coord: GLfloat*);

@foreign
typedef PFNGLFOGCOORDDEXTPROC = func(coord: GLdouble);

@foreign
typedef PFNGLFOGCOORDDVEXTPROC = func(coord: GLdouble*);

@foreign
typedef PFNGLFOGCOORDPOINTEREXTPROC = func(type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glFogCoordfEXT(coord: GLfloat);

@foreign
func glFogCoordfvEXT(coord: GLfloat*);

@foreign
func glFogCoorddEXT(coord: GLdouble);

@foreign
func glFogCoorddvEXT(coord: GLdouble*);

@foreign
func glFogCoordPointerEXT(type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLBLITFRAMEBUFFEREXTPROC = func(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);

@foreign
func glBlitFramebufferEXT(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);

@foreign
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = func(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glRenderbufferStorageMultisampleEXT(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLISRENDERBUFFEREXTPROC = func(renderbuffer: GLuint): GLboolean;

@foreign
typedef PFNGLBINDRENDERBUFFEREXTPROC = func(target: GLenum, renderbuffer: GLuint);

@foreign
typedef PFNGLDELETERENDERBUFFERSEXTPROC = func(n: GLsizei, renderbuffers: GLuint*);

@foreign
typedef PFNGLGENRENDERBUFFERSEXTPROC = func(n: GLsizei, renderbuffers: GLuint*);

@foreign
typedef PFNGLRENDERBUFFERSTORAGEEXTPROC = func(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLISFRAMEBUFFEREXTPROC = func(framebuffer: GLuint): GLboolean;

@foreign
typedef PFNGLBINDFRAMEBUFFEREXTPROC = func(target: GLenum, framebuffer: GLuint);

@foreign
typedef PFNGLDELETEFRAMEBUFFERSEXTPROC = func(n: GLsizei, framebuffers: GLuint*);

@foreign
typedef PFNGLGENFRAMEBUFFERSEXTPROC = func(n: GLsizei, framebuffers: GLuint*);

@foreign
typedef PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC = func(target: GLenum): GLenum;

@foreign
typedef PFNGLFRAMEBUFFERTEXTURE1DEXTPROC = func(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);

@foreign
typedef PFNGLFRAMEBUFFERTEXTURE2DEXTPROC = func(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);

@foreign
typedef PFNGLFRAMEBUFFERTEXTURE3DEXTPROC = func(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint);

@foreign
typedef PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC = func(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);

@foreign
typedef PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = func(target: GLenum, attachment: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGENERATEMIPMAPEXTPROC = func(target: GLenum);

@foreign
func glIsRenderbufferEXT(renderbuffer: GLuint): GLboolean;

@foreign
func glBindRenderbufferEXT(target: GLenum, renderbuffer: GLuint);

@foreign
func glDeleteRenderbuffersEXT(n: GLsizei, renderbuffers: GLuint*);

@foreign
func glGenRenderbuffersEXT(n: GLsizei, renderbuffers: GLuint*);

@foreign
func glRenderbufferStorageEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glGetRenderbufferParameterivEXT(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glIsFramebufferEXT(framebuffer: GLuint): GLboolean;

@foreign
func glBindFramebufferEXT(target: GLenum, framebuffer: GLuint);

@foreign
func glDeleteFramebuffersEXT(n: GLsizei, framebuffers: GLuint*);

@foreign
func glGenFramebuffersEXT(n: GLsizei, framebuffers: GLuint*);

@foreign
func glCheckFramebufferStatusEXT(target: GLenum): GLenum;

@foreign
func glFramebufferTexture1DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);

@foreign
func glFramebufferTexture2DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);

@foreign
func glFramebufferTexture3DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint);

@foreign
func glFramebufferRenderbufferEXT(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);

@foreign
func glGetFramebufferAttachmentParameterivEXT(target: GLenum, attachment: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGenerateMipmapEXT(target: GLenum);

@foreign
typedef PFNGLPROGRAMPARAMETERIEXTPROC = func(program: GLuint, pname: GLenum, value: GLint);

@foreign
func glProgramParameteriEXT(program: GLuint, pname: GLenum, value: GLint);

@foreign
typedef PFNGLPROGRAMENVPARAMETERS4FVEXTPROC = func(target: GLenum, index: GLuint, count: GLsizei, params: GLfloat*);

@foreign
typedef PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC = func(target: GLenum, index: GLuint, count: GLsizei, params: GLfloat*);

@foreign
func glProgramEnvParameters4fvEXT(target: GLenum, index: GLuint, count: GLsizei, params: GLfloat*);

@foreign
func glProgramLocalParameters4fvEXT(target: GLenum, index: GLuint, count: GLsizei, params: GLfloat*);

@foreign
typedef PFNGLGETUNIFORMUIVEXTPROC = func(program: GLuint, location: GLint, params: GLuint*);

@foreign
typedef PFNGLBINDFRAGDATALOCATIONEXTPROC = func(program: GLuint, color: GLuint, name: GLchar*);

@foreign
typedef PFNGLGETFRAGDATALOCATIONEXTPROC = func(program: GLuint, name: GLchar*): GLint;

@foreign
typedef PFNGLUNIFORM1UIEXTPROC = func(location: GLint, v0: GLuint);

@foreign
typedef PFNGLUNIFORM2UIEXTPROC = func(location: GLint, v0: GLuint, v1: GLuint);

@foreign
typedef PFNGLUNIFORM3UIEXTPROC = func(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);

@foreign
typedef PFNGLUNIFORM4UIEXTPROC = func(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);

@foreign
typedef PFNGLUNIFORM1UIVEXTPROC = func(location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLUNIFORM2UIVEXTPROC = func(location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLUNIFORM3UIVEXTPROC = func(location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLUNIFORM4UIVEXTPROC = func(location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glGetUniformuivEXT(program: GLuint, location: GLint, params: GLuint*);

@foreign
func glBindFragDataLocationEXT(program: GLuint, color: GLuint, name: GLchar*);

@foreign
func glGetFragDataLocationEXT(program: GLuint, name: GLchar*): GLint;

@foreign
func glUniform1uiEXT(location: GLint, v0: GLuint);

@foreign
func glUniform2uiEXT(location: GLint, v0: GLuint, v1: GLuint);

@foreign
func glUniform3uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);

@foreign
func glUniform4uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);

@foreign
func glUniform1uivEXT(location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glUniform2uivEXT(location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glUniform3uivEXT(location: GLint, count: GLsizei, value: GLuint*);

@foreign
func glUniform4uivEXT(location: GLint, count: GLsizei, value: GLuint*);

@foreign
typedef PFNGLGETHISTOGRAMEXTPROC = func(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: void*);

@foreign
typedef PFNGLGETHISTOGRAMPARAMETERFVEXTPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETHISTOGRAMPARAMETERIVEXTPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETMINMAXEXTPROC = func(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: void*);

@foreign
typedef PFNGLGETMINMAXPARAMETERFVEXTPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETMINMAXPARAMETERIVEXTPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLHISTOGRAMEXTPROC = func(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean);

@foreign
typedef PFNGLMINMAXEXTPROC = func(target: GLenum, internalformat: GLenum, sink: GLboolean);

@foreign
typedef PFNGLRESETHISTOGRAMEXTPROC = func(target: GLenum);

@foreign
typedef PFNGLRESETMINMAXEXTPROC = func(target: GLenum);

@foreign
func glGetHistogramEXT(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: void*);

@foreign
func glGetHistogramParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetHistogramParameterivEXT(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetMinmaxEXT(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: void*);

@foreign
func glGetMinmaxParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetMinmaxParameterivEXT(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glHistogramEXT(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean);

@foreign
func glMinmaxEXT(target: GLenum, internalformat: GLenum, sink: GLboolean);

@foreign
func glResetHistogramEXT(target: GLenum);

@foreign
func glResetMinmaxEXT(target: GLenum);

@foreign
typedef PFNGLINDEXFUNCEXTPROC = func(fn: GLenum, ref: GLclampf);

@foreign
func glIndexFuncEXT(fn: GLenum, ref: GLclampf);

@foreign
typedef PFNGLINDEXMATERIALEXTPROC = func(face: GLenum, mode: GLenum);

@foreign
func glIndexMaterialEXT(face: GLenum, mode: GLenum);

@foreign
typedef PFNGLAPPLYTEXTUREEXTPROC = func(mode: GLenum);

@foreign
typedef PFNGLTEXTURELIGHTEXTPROC = func(pname: GLenum);

@foreign
typedef PFNGLTEXTUREMATERIALEXTPROC = func(face: GLenum, mode: GLenum);

@foreign
func glApplyTextureEXT(mode: GLenum);

@foreign
func glTextureLightEXT(pname: GLenum);

@foreign
func glTextureMaterialEXT(face: GLenum, mode: GLenum);

@foreign
typedef PFNGLGETUNSIGNEDBYTEVEXTPROC = func(pname: GLenum, data: GLubyte*);

@foreign
typedef PFNGLGETUNSIGNEDBYTEI_VEXTPROC = func(target: GLenum, index: GLuint, data: GLubyte*);

@foreign
typedef PFNGLDELETEMEMORYOBJECTSEXTPROC = func(n: GLsizei, memoryObjects: GLuint*);

@foreign
typedef PFNGLISMEMORYOBJECTEXTPROC = func(memoryObject: GLuint): GLboolean;

@foreign
typedef PFNGLCREATEMEMORYOBJECTSEXTPROC = func(n: GLsizei, memoryObjects: GLuint*);

@foreign
typedef PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = func(memoryObject: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = func(memoryObject: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLTEXSTORAGEMEM2DEXTPROC = func(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64);

@foreign
typedef PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = func(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64);

@foreign
typedef PFNGLTEXSTORAGEMEM3DEXTPROC = func(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64);

@foreign
typedef PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = func(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64);

@foreign
typedef PFNGLBUFFERSTORAGEMEMEXTPROC = func(target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64);

@foreign
typedef PFNGLTEXTURESTORAGEMEM2DEXTPROC = func(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64);

@foreign
typedef PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = func(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64);

@foreign
typedef PFNGLTEXTURESTORAGEMEM3DEXTPROC = func(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64);

@foreign
typedef PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = func(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64);

@foreign
typedef PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = func(buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64);

@foreign
typedef PFNGLTEXSTORAGEMEM1DEXTPROC = func(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64);

@foreign
typedef PFNGLTEXTURESTORAGEMEM1DEXTPROC = func(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64);

@foreign
func glGetUnsignedBytevEXT(pname: GLenum, data: GLubyte*);

@foreign
func glGetUnsignedBytei_vEXT(target: GLenum, index: GLuint, data: GLubyte*);

@foreign
func glDeleteMemoryObjectsEXT(n: GLsizei, memoryObjects: GLuint*);

@foreign
func glIsMemoryObjectEXT(memoryObject: GLuint): GLboolean;

@foreign
func glCreateMemoryObjectsEXT(n: GLsizei, memoryObjects: GLuint*);

@foreign
func glMemoryObjectParameterivEXT(memoryObject: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetMemoryObjectParameterivEXT(memoryObject: GLuint, pname: GLenum, params: GLint*);

@foreign
func glTexStorageMem2DEXT(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64);

@foreign
func glTexStorageMem2DMultisampleEXT(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64);

@foreign
func glTexStorageMem3DEXT(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64);

@foreign
func glTexStorageMem3DMultisampleEXT(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64);

@foreign
func glBufferStorageMemEXT(target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64);

@foreign
func glTextureStorageMem2DEXT(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64);

@foreign
func glTextureStorageMem2DMultisampleEXT(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64);

@foreign
func glTextureStorageMem3DEXT(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64);

@foreign
func glTextureStorageMem3DMultisampleEXT(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64);

@foreign
func glNamedBufferStorageMemEXT(buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64);

@foreign
func glTexStorageMem1DEXT(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64);

@foreign
func glTextureStorageMem1DEXT(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64);

@foreign
typedef PFNGLIMPORTMEMORYFDEXTPROC = func(memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint);

@foreign
func glImportMemoryFdEXT(memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint);

@foreign
typedef PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = func(memory: GLuint, size: GLuint64, handleType: GLenum, handle: void*);

@foreign
typedef PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = func(memory: GLuint, size: GLuint64, handleType: GLenum, name: void const*);

@foreign
func glImportMemoryWin32HandleEXT(memory: GLuint, size: GLuint64, handleType: GLenum, handle: void*);

@foreign
func glImportMemoryWin32NameEXT(memory: GLuint, size: GLuint64, handleType: GLenum, name: void const*);

@foreign
typedef PFNGLMULTIDRAWARRAYSEXTPROC = func(mode: GLenum, first: GLint*, count: GLsizei*, primcount: GLsizei);

@foreign
typedef PFNGLMULTIDRAWELEMENTSEXTPROC = func(mode: GLenum, count: GLsizei*, type: GLenum, indices: void const* const*, primcount: GLsizei);

@foreign
func glMultiDrawArraysEXT(mode: GLenum, first: GLint*, count: GLsizei*, primcount: GLsizei);

@foreign
func glMultiDrawElementsEXT(mode: GLenum, count: GLsizei*, type: GLenum, indices: void const* const*, primcount: GLsizei);

@foreign
typedef PFNGLSAMPLEMASKEXTPROC = func(value: GLclampf, invert: GLboolean);

@foreign
typedef PFNGLSAMPLEPATTERNEXTPROC = func(pattern: GLenum);

@foreign
func glSampleMaskEXT(value: GLclampf, invert: GLboolean);

@foreign
func glSamplePatternEXT(pattern: GLenum);

@foreign
typedef PFNGLPIXELTRANSFORMPARAMETERIEXTPROC = func(target: GLenum, pname: GLenum, param: GLint);

@foreign
typedef PFNGLPIXELTRANSFORMPARAMETERFEXTPROC = func(target: GLenum, pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glPixelTransformParameteriEXT(target: GLenum, pname: GLenum, param: GLint);

@foreign
func glPixelTransformParameterfEXT(target: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glPixelTransformParameterivEXT(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glPixelTransformParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetPixelTransformParameterivEXT(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetPixelTransformParameterfvEXT(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLPOINTPARAMETERFEXTPROC = func(pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLPOINTPARAMETERFVEXTPROC = func(pname: GLenum, params: GLfloat*);

@foreign
func glPointParameterfEXT(pname: GLenum, param: GLfloat);

@foreign
func glPointParameterfvEXT(pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLPOLYGONOFFSETEXTPROC = func(factor: GLfloat, bias: GLfloat);

@foreign
func glPolygonOffsetEXT(factor: GLfloat, bias: GLfloat);

@foreign
typedef PFNGLPOLYGONOFFSETCLAMPEXTPROC = func(factor: GLfloat, units: GLfloat, clamp: GLfloat);

@foreign
func glPolygonOffsetClampEXT(factor: GLfloat, units: GLfloat, clamp: GLfloat);

@foreign
typedef PFNGLPROVOKINGVERTEXEXTPROC = func(mode: GLenum);

@foreign
func glProvokingVertexEXT(mode: GLenum);

@foreign
typedef PFNGLRASTERSAMPLESEXTPROC = func(samples: GLuint, fixedsamplelocations: GLboolean);

@foreign
func glRasterSamplesEXT(samples: GLuint, fixedsamplelocations: GLboolean);

@foreign
typedef PFNGLSECONDARYCOLOR3BEXTPROC = func(red: GLbyte, green: GLbyte, blue: GLbyte);

@foreign
typedef PFNGLSECONDARYCOLOR3BVEXTPROC = func(v: GLbyte*);

@foreign
typedef PFNGLSECONDARYCOLOR3DEXTPROC = func(red: GLdouble, green: GLdouble, blue: GLdouble);

@foreign
typedef PFNGLSECONDARYCOLOR3DVEXTPROC = func(v: GLdouble*);

@foreign
typedef PFNGLSECONDARYCOLOR3FEXTPROC = func(red: GLfloat, green: GLfloat, blue: GLfloat);

@foreign
typedef PFNGLSECONDARYCOLOR3FVEXTPROC = func(v: GLfloat*);

@foreign
typedef PFNGLSECONDARYCOLOR3IEXTPROC = func(red: GLint, green: GLint, blue: GLint);

@foreign
typedef PFNGLSECONDARYCOLOR3IVEXTPROC = func(v: GLint*);

@foreign
typedef PFNGLSECONDARYCOLOR3SEXTPROC = func(red: GLshort, green: GLshort, blue: GLshort);

@foreign
typedef PFNGLSECONDARYCOLOR3SVEXTPROC = func(v: GLshort*);

@foreign
typedef PFNGLSECONDARYCOLOR3UBEXTPROC = func(red: GLubyte, green: GLubyte, blue: GLubyte);

@foreign
typedef PFNGLSECONDARYCOLOR3UBVEXTPROC = func(v: GLubyte*);

@foreign
typedef PFNGLSECONDARYCOLOR3UIEXTPROC = func(red: GLuint, green: GLuint, blue: GLuint);

@foreign
typedef PFNGLSECONDARYCOLOR3UIVEXTPROC = func(v: GLuint*);

@foreign
typedef PFNGLSECONDARYCOLOR3USEXTPROC = func(red: GLushort, green: GLushort, blue: GLushort);

@foreign
typedef PFNGLSECONDARYCOLOR3USVEXTPROC = func(v: GLushort*);

@foreign
typedef PFNGLSECONDARYCOLORPOINTEREXTPROC = func(size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glSecondaryColor3bEXT(red: GLbyte, green: GLbyte, blue: GLbyte);

@foreign
func glSecondaryColor3bvEXT(v: GLbyte*);

@foreign
func glSecondaryColor3dEXT(red: GLdouble, green: GLdouble, blue: GLdouble);

@foreign
func glSecondaryColor3dvEXT(v: GLdouble*);

@foreign
func glSecondaryColor3fEXT(red: GLfloat, green: GLfloat, blue: GLfloat);

@foreign
func glSecondaryColor3fvEXT(v: GLfloat*);

@foreign
func glSecondaryColor3iEXT(red: GLint, green: GLint, blue: GLint);

@foreign
func glSecondaryColor3ivEXT(v: GLint*);

@foreign
func glSecondaryColor3sEXT(red: GLshort, green: GLshort, blue: GLshort);

@foreign
func glSecondaryColor3svEXT(v: GLshort*);

@foreign
func glSecondaryColor3ubEXT(red: GLubyte, green: GLubyte, blue: GLubyte);

@foreign
func glSecondaryColor3ubvEXT(v: GLubyte*);

@foreign
func glSecondaryColor3uiEXT(red: GLuint, green: GLuint, blue: GLuint);

@foreign
func glSecondaryColor3uivEXT(v: GLuint*);

@foreign
func glSecondaryColor3usEXT(red: GLushort, green: GLushort, blue: GLushort);

@foreign
func glSecondaryColor3usvEXT(v: GLushort*);

@foreign
func glSecondaryColorPointerEXT(size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLGENSEMAPHORESEXTPROC = func(n: GLsizei, semaphores: GLuint*);

@foreign
typedef PFNGLDELETESEMAPHORESEXTPROC = func(n: GLsizei, semaphores: GLuint*);

@foreign
typedef PFNGLISSEMAPHOREEXTPROC = func(semaphore: GLuint): GLboolean;

@foreign
typedef PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = func(semaphore: GLuint, pname: GLenum, params: GLuint64*);

@foreign
typedef PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = func(semaphore: GLuint, pname: GLenum, params: GLuint64*);

@foreign
typedef PFNGLWAITSEMAPHOREEXTPROC = func(semaphore: GLuint, numBufferBarriers: GLuint, buffers: GLuint*, numTextureBarriers: GLuint, textures: GLuint*, srcLayouts: GLenum*);

@foreign
typedef PFNGLSIGNALSEMAPHOREEXTPROC = func(semaphore: GLuint, numBufferBarriers: GLuint, buffers: GLuint*, numTextureBarriers: GLuint, textures: GLuint*, dstLayouts: GLenum*);

@foreign
func glGenSemaphoresEXT(n: GLsizei, semaphores: GLuint*);

@foreign
func glDeleteSemaphoresEXT(n: GLsizei, semaphores: GLuint*);

@foreign
func glIsSemaphoreEXT(semaphore: GLuint): GLboolean;

@foreign
func glSemaphoreParameterui64vEXT(semaphore: GLuint, pname: GLenum, params: GLuint64*);

@foreign
func glGetSemaphoreParameterui64vEXT(semaphore: GLuint, pname: GLenum, params: GLuint64*);

@foreign
func glWaitSemaphoreEXT(semaphore: GLuint, numBufferBarriers: GLuint, buffers: GLuint*, numTextureBarriers: GLuint, textures: GLuint*, srcLayouts: GLenum*);

@foreign
func glSignalSemaphoreEXT(semaphore: GLuint, numBufferBarriers: GLuint, buffers: GLuint*, numTextureBarriers: GLuint, textures: GLuint*, dstLayouts: GLenum*);

@foreign
typedef PFNGLIMPORTSEMAPHOREFDEXTPROC = func(semaphore: GLuint, handleType: GLenum, fd: GLint);

@foreign
func glImportSemaphoreFdEXT(semaphore: GLuint, handleType: GLenum, fd: GLint);

@foreign
typedef PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = func(semaphore: GLuint, handleType: GLenum, handle: void*);

@foreign
typedef PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = func(semaphore: GLuint, handleType: GLenum, name: void const*);

@foreign
func glImportSemaphoreWin32HandleEXT(semaphore: GLuint, handleType: GLenum, handle: void*);

@foreign
func glImportSemaphoreWin32NameEXT(semaphore: GLuint, handleType: GLenum, name: void const*);

@foreign
typedef PFNGLUSESHADERPROGRAMEXTPROC = func(type: GLenum, program: GLuint);

@foreign
typedef PFNGLACTIVEPROGRAMEXTPROC = func(program: GLuint);

@foreign
typedef PFNGLCREATESHADERPROGRAMEXTPROC = func(type: GLenum, string: GLchar*): GLuint;

@foreign
func glUseShaderProgramEXT(type: GLenum, program: GLuint);

@foreign
func glActiveProgramEXT(program: GLuint);

@foreign
func glCreateShaderProgramEXT(type: GLenum, string: GLchar*): GLuint;

@foreign
typedef PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = func();

@foreign
func glFramebufferFetchBarrierEXT();

@foreign
typedef PFNGLBINDIMAGETEXTUREEXTPROC = func(index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint);

@foreign
typedef PFNGLMEMORYBARRIEREXTPROC = func(barriers: GLbitfield);

@foreign
func glBindImageTextureEXT(index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint);

@foreign
func glMemoryBarrierEXT(barriers: GLbitfield);

@foreign
typedef PFNGLSTENCILCLEARTAGEXTPROC = func(stencilTagBits: GLsizei, stencilClearTag: GLuint);

@foreign
func glStencilClearTagEXT(stencilTagBits: GLsizei, stencilClearTag: GLuint);

@foreign
typedef PFNGLACTIVESTENCILFACEEXTPROC = func(face: GLenum);

@foreign
func glActiveStencilFaceEXT(face: GLenum);

@foreign
typedef PFNGLTEXSUBIMAGE1DEXTPROC = func(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXSUBIMAGE2DEXTPROC = func(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTexSubImage1DEXT(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTexSubImage2DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXIMAGE3DEXTPROC = func(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXSUBIMAGE3DEXTPROC = func(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTexImage3DEXT(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTexSubImage3DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC = func(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);

@foreign
func glFramebufferTextureLayerEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);

@foreign
typedef PFNGLTEXBUFFEREXTPROC = func(target: GLenum, internalformat: GLenum, buffer: GLuint);

@foreign
func glTexBufferEXT(target: GLenum, internalformat: GLenum, buffer: GLuint);

@foreign
typedef PFNGLTEXPARAMETERIIVEXTPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLTEXPARAMETERIUIVEXTPROC = func(target: GLenum, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLGETTEXPARAMETERIIVEXTPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETTEXPARAMETERIUIVEXTPROC = func(target: GLenum, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLCLEARCOLORIIEXTPROC = func(red: GLint, green: GLint, blue: GLint, alpha: GLint);

@foreign
typedef PFNGLCLEARCOLORIUIEXTPROC = func(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint);

@foreign
func glTexParameterIivEXT(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glTexParameterIuivEXT(target: GLenum, pname: GLenum, params: GLuint*);

@foreign
func glGetTexParameterIivEXT(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetTexParameterIuivEXT(target: GLenum, pname: GLenum, params: GLuint*);

@foreign
func glClearColorIiEXT(red: GLint, green: GLint, blue: GLint, alpha: GLint);

@foreign
func glClearColorIuiEXT(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint);

@foreign
typedef PFNGLARETEXTURESRESIDENTEXTPROC = func(n: GLsizei, textures: GLuint*, residences: GLboolean*): GLboolean;

@foreign
typedef PFNGLBINDTEXTUREEXTPROC = func(target: GLenum, texture: GLuint);

@foreign
typedef PFNGLDELETETEXTURESEXTPROC = func(n: GLsizei, textures: GLuint*);

@foreign
typedef PFNGLGENTEXTURESEXTPROC = func(n: GLsizei, textures: GLuint*);

@foreign
typedef PFNGLISTEXTUREEXTPROC = func(texture: GLuint): GLboolean;

@foreign
typedef PFNGLPRIORITIZETEXTURESEXTPROC = func(n: GLsizei, textures: GLuint*, priorities: GLclampf*);

@foreign
func glAreTexturesResidentEXT(n: GLsizei, textures: GLuint*, residences: GLboolean*): GLboolean;

@foreign
func glBindTextureEXT(target: GLenum, texture: GLuint);

@foreign
func glDeleteTexturesEXT(n: GLsizei, textures: GLuint*);

@foreign
func glGenTexturesEXT(n: GLsizei, textures: GLuint*);

@foreign
func glIsTextureEXT(texture: GLuint): GLboolean;

@foreign
func glPrioritizeTexturesEXT(n: GLsizei, textures: GLuint*, priorities: GLclampf*);

@foreign
typedef PFNGLTEXTURENORMALEXTPROC = func(mode: GLenum);

@foreign
func glTextureNormalEXT(mode: GLenum);

@foreign
typedef PFNGLGETQUERYOBJECTI64VEXTPROC = func(id: GLuint, pname: GLenum, params: GLint64*);

@foreign
typedef PFNGLGETQUERYOBJECTUI64VEXTPROC = func(id: GLuint, pname: GLenum, params: GLuint64*);

@foreign
func glGetQueryObjecti64vEXT(id: GLuint, pname: GLenum, params: GLint64*);

@foreign
func glGetQueryObjectui64vEXT(id: GLuint, pname: GLenum, params: GLuint64*);

@foreign
typedef PFNGLBEGINTRANSFORMFEEDBACKEXTPROC = func(primitiveMode: GLenum);

@foreign
typedef PFNGLENDTRANSFORMFEEDBACKEXTPROC = func();

@foreign
typedef PFNGLBINDBUFFERRANGEEXTPROC = func(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
typedef PFNGLBINDBUFFEROFFSETEXTPROC = func(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr);

@foreign
typedef PFNGLBINDBUFFERBASEEXTPROC = func(target: GLenum, index: GLuint, buffer: GLuint);

@foreign
typedef PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC = func(program: GLuint, count: GLsizei, varyings: GLchar* const*, bufferMode: GLenum);

@foreign
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC = func(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLsizei*, type: GLenum*, name: GLchar*);

@foreign
func glBeginTransformFeedbackEXT(primitiveMode: GLenum);

@foreign
func glEndTransformFeedbackEXT();

@foreign
func glBindBufferRangeEXT(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
func glBindBufferOffsetEXT(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr);

@foreign
func glBindBufferBaseEXT(target: GLenum, index: GLuint, buffer: GLuint);

@foreign
func glTransformFeedbackVaryingsEXT(program: GLuint, count: GLsizei, varyings: GLchar* const*, bufferMode: GLenum);

@foreign
func glGetTransformFeedbackVaryingEXT(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLsizei*, type: GLenum*, name: GLchar*);

@foreign
typedef PFNGLVERTEXATTRIBL1DEXTPROC = func(index: GLuint, x: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIBL2DEXTPROC = func(index: GLuint, x: GLdouble, y: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIBL3DEXTPROC = func(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIBL4DEXTPROC = func(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIBL1DVEXTPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIBL2DVEXTPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIBL3DVEXTPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIBL4DVEXTPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIBLPOINTEREXTPROC = func(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLGETVERTEXATTRIBLDVEXTPROC = func(index: GLuint, pname: GLenum, params: GLdouble*);

@foreign
func glVertexAttribL1dEXT(index: GLuint, x: GLdouble);

@foreign
func glVertexAttribL2dEXT(index: GLuint, x: GLdouble, y: GLdouble);

@foreign
func glVertexAttribL3dEXT(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glVertexAttribL4dEXT(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glVertexAttribL1dvEXT(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttribL2dvEXT(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttribL3dvEXT(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttribL4dvEXT(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttribLPointerEXT(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glGetVertexAttribLdvEXT(index: GLuint, pname: GLenum, params: GLdouble*);

@foreign
typedef PFNGLBEGINVERTEXSHADEREXTPROC = func();

@foreign
typedef PFNGLENDVERTEXSHADEREXTPROC = func();

@foreign
typedef PFNGLBINDVERTEXSHADEREXTPROC = func(id: GLuint);

@foreign
typedef PFNGLGENVERTEXSHADERSEXTPROC = func(range: GLuint): GLuint;

@foreign
typedef PFNGLDELETEVERTEXSHADEREXTPROC = func(id: GLuint);

@foreign
typedef PFNGLSHADEROP1EXTPROC = func(op: GLenum, res: GLuint, arg1: GLuint);

@foreign
typedef PFNGLSHADEROP2EXTPROC = func(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint);

@foreign
typedef PFNGLSHADEROP3EXTPROC = func(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint);

@foreign
typedef PFNGLSWIZZLEEXTPROC = func(res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum);

@foreign
typedef PFNGLWRITEMASKEXTPROC = func(res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum);

@foreign
typedef PFNGLINSERTCOMPONENTEXTPROC = func(res: GLuint, src: GLuint, num: GLuint);

@foreign
typedef PFNGLEXTRACTCOMPONENTEXTPROC = func(res: GLuint, src: GLuint, num: GLuint);

@foreign
typedef PFNGLGENSYMBOLSEXTPROC = func(datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint): GLuint;

@foreign
typedef PFNGLSETINVARIANTEXTPROC = func(id: GLuint, type: GLenum, addr: void const*);

@foreign
typedef PFNGLSETLOCALCONSTANTEXTPROC = func(id: GLuint, type: GLenum, addr: void const*);

@foreign
typedef PFNGLVARIANTBVEXTPROC = func(id: GLuint, addr: GLbyte*);

@foreign
typedef PFNGLVARIANTSVEXTPROC = func(id: GLuint, addr: GLshort*);

@foreign
typedef PFNGLVARIANTIVEXTPROC = func(id: GLuint, addr: GLint*);

@foreign
typedef PFNGLVARIANTFVEXTPROC = func(id: GLuint, addr: GLfloat*);

@foreign
typedef PFNGLVARIANTDVEXTPROC = func(id: GLuint, addr: GLdouble*);

@foreign
typedef PFNGLVARIANTUBVEXTPROC = func(id: GLuint, addr: GLubyte*);

@foreign
typedef PFNGLVARIANTUSVEXTPROC = func(id: GLuint, addr: GLushort*);

@foreign
typedef PFNGLVARIANTUIVEXTPROC = func(id: GLuint, addr: GLuint*);

@foreign
typedef PFNGLVARIANTPOINTEREXTPROC = func(id: GLuint, type: GLenum, stride: GLuint, addr: void const*);

@foreign
typedef PFNGLENABLEVARIANTCLIENTSTATEEXTPROC = func(id: GLuint);

@foreign
typedef PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC = func(id: GLuint);

@foreign
typedef PFNGLBINDLIGHTPARAMETEREXTPROC = func(light: GLenum, value: GLenum): GLuint;

@foreign
typedef PFNGLBINDMATERIALPARAMETEREXTPROC = func(face: GLenum, value: GLenum): GLuint;

@foreign
typedef PFNGLBINDTEXGENPARAMETEREXTPROC = func(unit: GLenum, coord: GLenum, value: GLenum): GLuint;

@foreign
typedef PFNGLBINDTEXTUREUNITPARAMETEREXTPROC = func(unit: GLenum, value: GLenum): GLuint;

@foreign
typedef PFNGLBINDPARAMETEREXTPROC = func(value: GLenum): GLuint;

@foreign
typedef PFNGLISVARIANTENABLEDEXTPROC = func(id: GLuint, cap: GLenum): GLboolean;

@foreign
typedef PFNGLGETVARIANTBOOLEANVEXTPROC = func(id: GLuint, value: GLenum, data: GLboolean*);

@foreign
typedef PFNGLGETVARIANTINTEGERVEXTPROC = func(id: GLuint, value: GLenum, data: GLint*);

@foreign
typedef PFNGLGETVARIANTFLOATVEXTPROC = func(id: GLuint, value: GLenum, data: GLfloat*);

@foreign
typedef PFNGLGETVARIANTPOINTERVEXTPROC = func(id: GLuint, value: GLenum, data: void**);

@foreign
typedef PFNGLGETINVARIANTBOOLEANVEXTPROC = func(id: GLuint, value: GLenum, data: GLboolean*);

@foreign
typedef PFNGLGETINVARIANTINTEGERVEXTPROC = func(id: GLuint, value: GLenum, data: GLint*);

@foreign
typedef PFNGLGETINVARIANTFLOATVEXTPROC = func(id: GLuint, value: GLenum, data: GLfloat*);

@foreign
typedef PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC = func(id: GLuint, value: GLenum, data: GLboolean*);

@foreign
typedef PFNGLGETLOCALCONSTANTINTEGERVEXTPROC = func(id: GLuint, value: GLenum, data: GLint*);

@foreign
typedef PFNGLGETLOCALCONSTANTFLOATVEXTPROC = func(id: GLuint, value: GLenum, data: GLfloat*);

@foreign
func glBeginVertexShaderEXT();

@foreign
func glEndVertexShaderEXT();

@foreign
func glBindVertexShaderEXT(id: GLuint);

@foreign
func glGenVertexShadersEXT(range: GLuint): GLuint;

@foreign
func glDeleteVertexShaderEXT(id: GLuint);

@foreign
func glShaderOp1EXT(op: GLenum, res: GLuint, arg1: GLuint);

@foreign
func glShaderOp2EXT(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint);

@foreign
func glShaderOp3EXT(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint);

@foreign
func glSwizzleEXT(res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum);

@foreign
func glWriteMaskEXT(res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum);

@foreign
func glInsertComponentEXT(res: GLuint, src: GLuint, num: GLuint);

@foreign
func glExtractComponentEXT(res: GLuint, src: GLuint, num: GLuint);

@foreign
func glGenSymbolsEXT(datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint): GLuint;

@foreign
func glSetInvariantEXT(id: GLuint, type: GLenum, addr: void const*);

@foreign
func glSetLocalConstantEXT(id: GLuint, type: GLenum, addr: void const*);

@foreign
func glVariantbvEXT(id: GLuint, addr: GLbyte*);

@foreign
func glVariantsvEXT(id: GLuint, addr: GLshort*);

@foreign
func glVariantivEXT(id: GLuint, addr: GLint*);

@foreign
func glVariantfvEXT(id: GLuint, addr: GLfloat*);

@foreign
func glVariantdvEXT(id: GLuint, addr: GLdouble*);

@foreign
func glVariantubvEXT(id: GLuint, addr: GLubyte*);

@foreign
func glVariantusvEXT(id: GLuint, addr: GLushort*);

@foreign
func glVariantuivEXT(id: GLuint, addr: GLuint*);

@foreign
func glVariantPointerEXT(id: GLuint, type: GLenum, stride: GLuint, addr: void const*);

@foreign
func glEnableVariantClientStateEXT(id: GLuint);

@foreign
func glDisableVariantClientStateEXT(id: GLuint);

@foreign
func glBindLightParameterEXT(light: GLenum, value: GLenum): GLuint;

@foreign
func glBindMaterialParameterEXT(face: GLenum, value: GLenum): GLuint;

@foreign
func glBindTexGenParameterEXT(unit: GLenum, coord: GLenum, value: GLenum): GLuint;

@foreign
func glBindTextureUnitParameterEXT(unit: GLenum, value: GLenum): GLuint;

@foreign
func glBindParameterEXT(value: GLenum): GLuint;

@foreign
func glIsVariantEnabledEXT(id: GLuint, cap: GLenum): GLboolean;

@foreign
func glGetVariantBooleanvEXT(id: GLuint, value: GLenum, data: GLboolean*);

@foreign
func glGetVariantIntegervEXT(id: GLuint, value: GLenum, data: GLint*);

@foreign
func glGetVariantFloatvEXT(id: GLuint, value: GLenum, data: GLfloat*);

@foreign
func glGetVariantPointervEXT(id: GLuint, value: GLenum, data: void**);

@foreign
func glGetInvariantBooleanvEXT(id: GLuint, value: GLenum, data: GLboolean*);

@foreign
func glGetInvariantIntegervEXT(id: GLuint, value: GLenum, data: GLint*);

@foreign
func glGetInvariantFloatvEXT(id: GLuint, value: GLenum, data: GLfloat*);

@foreign
func glGetLocalConstantBooleanvEXT(id: GLuint, value: GLenum, data: GLboolean*);

@foreign
func glGetLocalConstantIntegervEXT(id: GLuint, value: GLenum, data: GLint*);

@foreign
func glGetLocalConstantFloatvEXT(id: GLuint, value: GLenum, data: GLfloat*);

@foreign
typedef PFNGLVERTEXWEIGHTFEXTPROC = func(weight: GLfloat);

@foreign
typedef PFNGLVERTEXWEIGHTFVEXTPROC = func(weight: GLfloat*);

@foreign
typedef PFNGLVERTEXWEIGHTPOINTEREXTPROC = func(size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glVertexWeightfEXT(weight: GLfloat);

@foreign
func glVertexWeightfvEXT(weight: GLfloat*);

@foreign
func glVertexWeightPointerEXT(size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = func(memory: GLuint, key: GLuint64, timeout: GLuint): GLboolean;

@foreign
typedef PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC = func(memory: GLuint, key: GLuint64): GLboolean;

@foreign
func glAcquireKeyedMutexWin32EXT(memory: GLuint, key: GLuint64, timeout: GLuint): GLboolean;

@foreign
func glReleaseKeyedMutexWin32EXT(memory: GLuint, key: GLuint64): GLboolean;

@foreign
typedef PFNGLWINDOWRECTANGLESEXTPROC = func(mode: GLenum, count: GLsizei, box: GLint*);

@foreign
func glWindowRectanglesEXT(mode: GLenum, count: GLsizei, box: GLint*);

@foreign
typedef PFNGLIMPORTSYNCEXTPROC = func(external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield): GLsync;

@foreign
func glImportSyncEXT(external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield): GLsync;

@foreign
typedef PFNGLFRAMETERMINATORGREMEDYPROC = func();

@foreign
func glFrameTerminatorGREMEDY();

@foreign
typedef PFNGLSTRINGMARKERGREMEDYPROC = func(len: GLsizei, string: void const*);

@foreign
func glStringMarkerGREMEDY(len: GLsizei, string: void const*);

@foreign
typedef PFNGLIMAGETRANSFORMPARAMETERIHPPROC = func(target: GLenum, pname: GLenum, param: GLint);

@foreign
typedef PFNGLIMAGETRANSFORMPARAMETERFHPPROC = func(target: GLenum, pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLIMAGETRANSFORMPARAMETERIVHPPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLIMAGETRANSFORMPARAMETERFVHPPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glImageTransformParameteriHP(target: GLenum, pname: GLenum, param: GLint);

@foreign
func glImageTransformParameterfHP(target: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glImageTransformParameterivHP(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glImageTransformParameterfvHP(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetImageTransformParameterivHP(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetImageTransformParameterfvHP(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLMULTIMODEDRAWARRAYSIBMPROC = func(mode: GLenum*, first: GLint*, count: GLsizei*, primcount: GLsizei, modestride: GLint);

@foreign
typedef PFNGLMULTIMODEDRAWELEMENTSIBMPROC = func(mode: GLenum*, count: GLsizei*, type: GLenum, indices: void const* const*, primcount: GLsizei, modestride: GLint);

@foreign
func glMultiModeDrawArraysIBM(mode: GLenum*, first: GLint*, count: GLsizei*, primcount: GLsizei, modestride: GLint);

@foreign
func glMultiModeDrawElementsIBM(mode: GLenum*, count: GLsizei*, type: GLenum, indices: void const* const*, primcount: GLsizei, modestride: GLint);

@foreign
typedef PFNGLFLUSHSTATICDATAIBMPROC = func(target: GLenum);

@foreign
func glFlushStaticDataIBM(target: GLenum);

@foreign
typedef PFNGLCOLORPOINTERLISTIBMPROC = func(size: GLint, type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
typedef PFNGLSECONDARYCOLORPOINTERLISTIBMPROC = func(size: GLint, type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
typedef PFNGLEDGEFLAGPOINTERLISTIBMPROC = func(stride: GLint, pointer: GLboolean**, ptrstride: GLint);

@foreign
typedef PFNGLFOGCOORDPOINTERLISTIBMPROC = func(type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
typedef PFNGLINDEXPOINTERLISTIBMPROC = func(type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
typedef PFNGLNORMALPOINTERLISTIBMPROC = func(type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
typedef PFNGLTEXCOORDPOINTERLISTIBMPROC = func(size: GLint, type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
typedef PFNGLVERTEXPOINTERLISTIBMPROC = func(size: GLint, type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
func glColorPointerListIBM(size: GLint, type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
func glSecondaryColorPointerListIBM(size: GLint, type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
func glEdgeFlagPointerListIBM(stride: GLint, pointer: GLboolean**, ptrstride: GLint);

@foreign
func glFogCoordPointerListIBM(type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
func glIndexPointerListIBM(type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
func glNormalPointerListIBM(type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
func glTexCoordPointerListIBM(size: GLint, type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
func glVertexPointerListIBM(size: GLint, type: GLenum, stride: GLint, pointer: void const**, ptrstride: GLint);

@foreign
typedef PFNGLBLENDFUNCSEPARATEINGRPROC = func(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum);

@foreign
func glBlendFuncSeparateINGR(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum);

@foreign
typedef PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = func();

@foreign
func glApplyFramebufferAttachmentCMAAINTEL();

@foreign
typedef PFNGLSYNCTEXTUREINTELPROC = func(texture: GLuint);

@foreign
typedef PFNGLUNMAPTEXTURE2DINTELPROC = func(texture: GLuint, level: GLint);

@foreign
typedef PFNGLMAPTEXTURE2DINTELPROC = func(texture: GLuint, level: GLint, access: GLbitfield, stride: GLint*, layout: GLenum*): void*;

@foreign
func glSyncTextureINTEL(texture: GLuint);

@foreign
func glUnmapTexture2DINTEL(texture: GLuint, level: GLint);

@foreign
func glMapTexture2DINTEL(texture: GLuint, level: GLint, access: GLbitfield, stride: GLint*, layout: GLenum*): void*;

@foreign
typedef PFNGLVERTEXPOINTERVINTELPROC = func(size: GLint, type: GLenum, pointer: void const**);

@foreign
typedef PFNGLNORMALPOINTERVINTELPROC = func(type: GLenum, pointer: void const**);

@foreign
typedef PFNGLCOLORPOINTERVINTELPROC = func(size: GLint, type: GLenum, pointer: void const**);

@foreign
typedef PFNGLTEXCOORDPOINTERVINTELPROC = func(size: GLint, type: GLenum, pointer: void const**);

@foreign
func glVertexPointervINTEL(size: GLint, type: GLenum, pointer: void const**);

@foreign
func glNormalPointervINTEL(type: GLenum, pointer: void const**);

@foreign
func glColorPointervINTEL(size: GLint, type: GLenum, pointer: void const**);

@foreign
func glTexCoordPointervINTEL(size: GLint, type: GLenum, pointer: void const**);

@foreign
typedef PFNGLBEGINPERFQUERYINTELPROC = func(queryHandle: GLuint);

@foreign
typedef PFNGLCREATEPERFQUERYINTELPROC = func(queryId: GLuint, queryHandle: GLuint*);

@foreign
typedef PFNGLDELETEPERFQUERYINTELPROC = func(queryHandle: GLuint);

@foreign
typedef PFNGLENDPERFQUERYINTELPROC = func(queryHandle: GLuint);

@foreign
typedef PFNGLGETFIRSTPERFQUERYIDINTELPROC = func(queryId: GLuint*);

@foreign
typedef PFNGLGETNEXTPERFQUERYIDINTELPROC = func(queryId: GLuint, nextQueryId: GLuint*);

@foreign
typedef PFNGLGETPERFCOUNTERINFOINTELPROC = func(queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: GLchar*, counterDescLength: GLuint, counterDesc: GLchar*, counterOffset: GLuint*, counterDataSize: GLuint*, counterTypeEnum: GLuint*, counterDataTypeEnum: GLuint*, rawCounterMaxValue: GLuint64*);

@foreign
typedef PFNGLGETPERFQUERYDATAINTELPROC = func(queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: void*, bytesWritten: GLuint*);

@foreign
typedef PFNGLGETPERFQUERYIDBYNAMEINTELPROC = func(queryName: GLchar*, queryId: GLuint*);

@foreign
typedef PFNGLGETPERFQUERYINFOINTELPROC = func(queryId: GLuint, queryNameLength: GLuint, queryName: GLchar*, dataSize: GLuint*, noCounters: GLuint*, noInstances: GLuint*, capsMask: GLuint*);

@foreign
func glBeginPerfQueryINTEL(queryHandle: GLuint);

@foreign
func glCreatePerfQueryINTEL(queryId: GLuint, queryHandle: GLuint*);

@foreign
func glDeletePerfQueryINTEL(queryHandle: GLuint);

@foreign
func glEndPerfQueryINTEL(queryHandle: GLuint);

@foreign
func glGetFirstPerfQueryIdINTEL(queryId: GLuint*);

@foreign
func glGetNextPerfQueryIdINTEL(queryId: GLuint, nextQueryId: GLuint*);

@foreign
func glGetPerfCounterInfoINTEL(queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: GLchar*, counterDescLength: GLuint, counterDesc: GLchar*, counterOffset: GLuint*, counterDataSize: GLuint*, counterTypeEnum: GLuint*, counterDataTypeEnum: GLuint*, rawCounterMaxValue: GLuint64*);

@foreign
func glGetPerfQueryDataINTEL(queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: void*, bytesWritten: GLuint*);

@foreign
func glGetPerfQueryIdByNameINTEL(queryName: GLchar*, queryId: GLuint*);

@foreign
func glGetPerfQueryInfoINTEL(queryId: GLuint, queryNameLength: GLuint, queryName: GLchar*, dataSize: GLuint*, noCounters: GLuint*, noInstances: GLuint*, capsMask: GLuint*);

@foreign
typedef PFNGLRESIZEBUFFERSMESAPROC = func();

@foreign
func glResizeBuffersMESA();

@foreign
typedef PFNGLWINDOWPOS2DMESAPROC = func(x: GLdouble, y: GLdouble);

@foreign
typedef PFNGLWINDOWPOS2DVMESAPROC = func(v: GLdouble*);

@foreign
typedef PFNGLWINDOWPOS2FMESAPROC = func(x: GLfloat, y: GLfloat);

@foreign
typedef PFNGLWINDOWPOS2FVMESAPROC = func(v: GLfloat*);

@foreign
typedef PFNGLWINDOWPOS2IMESAPROC = func(x: GLint, y: GLint);

@foreign
typedef PFNGLWINDOWPOS2IVMESAPROC = func(v: GLint*);

@foreign
typedef PFNGLWINDOWPOS2SMESAPROC = func(x: GLshort, y: GLshort);

@foreign
typedef PFNGLWINDOWPOS2SVMESAPROC = func(v: GLshort*);

@foreign
typedef PFNGLWINDOWPOS3DMESAPROC = func(x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLWINDOWPOS3DVMESAPROC = func(v: GLdouble*);

@foreign
typedef PFNGLWINDOWPOS3FMESAPROC = func(x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLWINDOWPOS3FVMESAPROC = func(v: GLfloat*);

@foreign
typedef PFNGLWINDOWPOS3IMESAPROC = func(x: GLint, y: GLint, z: GLint);

@foreign
typedef PFNGLWINDOWPOS3IVMESAPROC = func(v: GLint*);

@foreign
typedef PFNGLWINDOWPOS3SMESAPROC = func(x: GLshort, y: GLshort, z: GLshort);

@foreign
typedef PFNGLWINDOWPOS3SVMESAPROC = func(v: GLshort*);

@foreign
typedef PFNGLWINDOWPOS4DMESAPROC = func(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLWINDOWPOS4DVMESAPROC = func(v: GLdouble*);

@foreign
typedef PFNGLWINDOWPOS4FMESAPROC = func(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
typedef PFNGLWINDOWPOS4FVMESAPROC = func(v: GLfloat*);

@foreign
typedef PFNGLWINDOWPOS4IMESAPROC = func(x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
typedef PFNGLWINDOWPOS4IVMESAPROC = func(v: GLint*);

@foreign
typedef PFNGLWINDOWPOS4SMESAPROC = func(x: GLshort, y: GLshort, z: GLshort, w: GLshort);

@foreign
typedef PFNGLWINDOWPOS4SVMESAPROC = func(v: GLshort*);

@foreign
func glWindowPos2dMESA(x: GLdouble, y: GLdouble);

@foreign
func glWindowPos2dvMESA(v: GLdouble*);

@foreign
func glWindowPos2fMESA(x: GLfloat, y: GLfloat);

@foreign
func glWindowPos2fvMESA(v: GLfloat*);

@foreign
func glWindowPos2iMESA(x: GLint, y: GLint);

@foreign
func glWindowPos2ivMESA(v: GLint*);

@foreign
func glWindowPos2sMESA(x: GLshort, y: GLshort);

@foreign
func glWindowPos2svMESA(v: GLshort*);

@foreign
func glWindowPos3dMESA(x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glWindowPos3dvMESA(v: GLdouble*);

@foreign
func glWindowPos3fMESA(x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glWindowPos3fvMESA(v: GLfloat*);

@foreign
func glWindowPos3iMESA(x: GLint, y: GLint, z: GLint);

@foreign
func glWindowPos3ivMESA(v: GLint*);

@foreign
func glWindowPos3sMESA(x: GLshort, y: GLshort, z: GLshort);

@foreign
func glWindowPos3svMESA(v: GLshort*);

@foreign
func glWindowPos4dMESA(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glWindowPos4dvMESA(v: GLdouble*);

@foreign
func glWindowPos4fMESA(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glWindowPos4fvMESA(v: GLfloat*);

@foreign
func glWindowPos4iMESA(x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
func glWindowPos4ivMESA(v: GLint*);

@foreign
func glWindowPos4sMESA(x: GLshort, y: GLshort, z: GLshort, w: GLshort);

@foreign
func glWindowPos4svMESA(v: GLshort*);

@foreign
typedef PFNGLBEGINCONDITIONALRENDERNVXPROC = func(id: GLuint);

@foreign
typedef PFNGLENDCONDITIONALRENDERNVXPROC = func();

@foreign
func glBeginConditionalRenderNVX(id: GLuint);

@foreign
func glEndConditionalRenderNVX();

@foreign
typedef PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC = func(gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void const*);

@foreign
typedef PFNGLLGPUCOPYIMAGESUBDATANVXPROC = func(sourceGpu: GLuint, destinationGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srxY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei);

@foreign
typedef PFNGLLGPUINTERLOCKNVXPROC = func();

@foreign
func glLGPUNamedBufferSubDataNVX(gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void const*);

@foreign
func glLGPUCopyImageSubDataNVX(sourceGpu: GLuint, destinationGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srxY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei);

@foreign
func glLGPUInterlockNVX();

@foreign
typedef PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC = func(mode: GLenum);

@foreign
func glAlphaToCoverageDitherControlNV(mode: GLenum);

@foreign
typedef PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC = func(mode: GLenum, indirect: void const*, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint);

@foreign
typedef PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC = func(mode: GLenum, type: GLenum, indirect: void const*, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint);

@foreign
func glMultiDrawArraysIndirectBindlessNV(mode: GLenum, indirect: void const*, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint);

@foreign
func glMultiDrawElementsIndirectBindlessNV(mode: GLenum, type: GLenum, indirect: void const*, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint);

@foreign
typedef PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC = func(mode: GLenum, indirect: void const*, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint);

@foreign
typedef PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC = func(mode: GLenum, type: GLenum, indirect: void const*, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint);

@foreign
func glMultiDrawArraysIndirectBindlessCountNV(mode: GLenum, indirect: void const*, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint);

@foreign
func glMultiDrawElementsIndirectBindlessCountNV(mode: GLenum, type: GLenum, indirect: void const*, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint);

@foreign
typedef PFNGLGETTEXTUREHANDLENVPROC = func(texture: GLuint): GLuint64;

@foreign
typedef PFNGLGETTEXTURESAMPLERHANDLENVPROC = func(texture: GLuint, sampler: GLuint): GLuint64;

@foreign
typedef PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = func(handle: GLuint64);

@foreign
typedef PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = func(handle: GLuint64);

@foreign
typedef PFNGLGETIMAGEHANDLENVPROC = func(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64;

@foreign
typedef PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = func(handle: GLuint64, access: GLenum);

@foreign
typedef PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = func(handle: GLuint64);

@foreign
typedef PFNGLUNIFORMHANDLEUI64NVPROC = func(location: GLint, value: GLuint64);

@foreign
typedef PFNGLUNIFORMHANDLEUI64VNVPROC = func(location: GLint, count: GLsizei, value: GLuint64*);

@foreign
typedef PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = func(program: GLuint, location: GLint, value: GLuint64);

@foreign
typedef PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = func(program: GLuint, location: GLint, count: GLsizei, values: GLuint64*);

@foreign
typedef PFNGLISTEXTUREHANDLERESIDENTNVPROC = func(handle: GLuint64): GLboolean;

@foreign
typedef PFNGLISIMAGEHANDLERESIDENTNVPROC = func(handle: GLuint64): GLboolean;

@foreign
func glGetTextureHandleNV(texture: GLuint): GLuint64;

@foreign
func glGetTextureSamplerHandleNV(texture: GLuint, sampler: GLuint): GLuint64;

@foreign
func glMakeTextureHandleResidentNV(handle: GLuint64);

@foreign
func glMakeTextureHandleNonResidentNV(handle: GLuint64);

@foreign
func glGetImageHandleNV(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64;

@foreign
func glMakeImageHandleResidentNV(handle: GLuint64, access: GLenum);

@foreign
func glMakeImageHandleNonResidentNV(handle: GLuint64);

@foreign
func glUniformHandleui64NV(location: GLint, value: GLuint64);

@foreign
func glUniformHandleui64vNV(location: GLint, count: GLsizei, value: GLuint64*);

@foreign
func glProgramUniformHandleui64NV(program: GLuint, location: GLint, value: GLuint64);

@foreign
func glProgramUniformHandleui64vNV(program: GLuint, location: GLint, count: GLsizei, values: GLuint64*);

@foreign
func glIsTextureHandleResidentNV(handle: GLuint64): GLboolean;

@foreign
func glIsImageHandleResidentNV(handle: GLuint64): GLboolean;

@foreign
typedef PFNGLBLENDPARAMETERINVPROC = func(pname: GLenum, value: GLint);

@foreign
typedef PFNGLBLENDBARRIERNVPROC = func();

@foreign
func glBlendParameteriNV(pname: GLenum, value: GLint);

@foreign
func glBlendBarrierNV();

@foreign
typedef PFNGLVIEWPORTPOSITIONWSCALENVPROC = func(index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat);

@foreign
func glViewportPositionWScaleNV(index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat);

@foreign
typedef PFNGLCREATESTATESNVPROC = func(n: GLsizei, states: GLuint*);

@foreign
typedef PFNGLDELETESTATESNVPROC = func(n: GLsizei, states: GLuint*);

@foreign
typedef PFNGLISSTATENVPROC = func(state: GLuint): GLboolean;

@foreign
typedef PFNGLSTATECAPTURENVPROC = func(state: GLuint, mode: GLenum);

@foreign
typedef PFNGLGETCOMMANDHEADERNVPROC = func(tokenID: GLenum, size: GLuint): GLuint;

@foreign
typedef PFNGLGETSTAGEINDEXNVPROC = func(shadertype: GLenum): GLushort;

@foreign
typedef PFNGLDRAWCOMMANDSNVPROC = func(primitiveMode: GLenum, buffer: GLuint, indirects: GLintptr*, sizes: GLsizei*, count: GLuint);

@foreign
typedef PFNGLDRAWCOMMANDSADDRESSNVPROC = func(primitiveMode: GLenum, indirects: GLuint64*, sizes: GLsizei*, count: GLuint);

@foreign
typedef PFNGLDRAWCOMMANDSSTATESNVPROC = func(buffer: GLuint, indirects: GLintptr*, sizes: GLsizei*, states: GLuint*, fbos: GLuint*, count: GLuint);

@foreign
typedef PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC = func(indirects: GLuint64*, sizes: GLsizei*, states: GLuint*, fbos: GLuint*, count: GLuint);

@foreign
typedef PFNGLCREATECOMMANDLISTSNVPROC = func(n: GLsizei, lists: GLuint*);

@foreign
typedef PFNGLDELETECOMMANDLISTSNVPROC = func(n: GLsizei, lists: GLuint*);

@foreign
typedef PFNGLISCOMMANDLISTNVPROC = func(list: GLuint): GLboolean;

@foreign
typedef PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC = func(list: GLuint, segment: GLuint, indirects: void const**, sizes: GLsizei*, states: GLuint*, fbos: GLuint*, count: GLuint);

@foreign
typedef PFNGLCOMMANDLISTSEGMENTSNVPROC = func(list: GLuint, segments: GLuint);

@foreign
typedef PFNGLCOMPILECOMMANDLISTNVPROC = func(list: GLuint);

@foreign
typedef PFNGLCALLCOMMANDLISTNVPROC = func(list: GLuint);

@foreign
func glCreateStatesNV(n: GLsizei, states: GLuint*);

@foreign
func glDeleteStatesNV(n: GLsizei, states: GLuint*);

@foreign
func glIsStateNV(state: GLuint): GLboolean;

@foreign
func glStateCaptureNV(state: GLuint, mode: GLenum);

@foreign
func glGetCommandHeaderNV(tokenID: GLenum, size: GLuint): GLuint;

@foreign
func glGetStageIndexNV(shadertype: GLenum): GLushort;

@foreign
func glDrawCommandsNV(primitiveMode: GLenum, buffer: GLuint, indirects: GLintptr*, sizes: GLsizei*, count: GLuint);

@foreign
func glDrawCommandsAddressNV(primitiveMode: GLenum, indirects: GLuint64*, sizes: GLsizei*, count: GLuint);

@foreign
func glDrawCommandsStatesNV(buffer: GLuint, indirects: GLintptr*, sizes: GLsizei*, states: GLuint*, fbos: GLuint*, count: GLuint);

@foreign
func glDrawCommandsStatesAddressNV(indirects: GLuint64*, sizes: GLsizei*, states: GLuint*, fbos: GLuint*, count: GLuint);

@foreign
func glCreateCommandListsNV(n: GLsizei, lists: GLuint*);

@foreign
func glDeleteCommandListsNV(n: GLsizei, lists: GLuint*);

@foreign
func glIsCommandListNV(list: GLuint): GLboolean;

@foreign
func glListDrawCommandsStatesClientNV(list: GLuint, segment: GLuint, indirects: void const**, sizes: GLsizei*, states: GLuint*, fbos: GLuint*, count: GLuint);

@foreign
func glCommandListSegmentsNV(list: GLuint, segments: GLuint);

@foreign
func glCompileCommandListNV(list: GLuint);

@foreign
func glCallCommandListNV(list: GLuint);

@foreign
typedef PFNGLBEGINCONDITIONALRENDERNVPROC = func(id: GLuint, mode: GLenum);

@foreign
typedef PFNGLENDCONDITIONALRENDERNVPROC = func();

@foreign
func glBeginConditionalRenderNV(id: GLuint, mode: GLenum);

@foreign
func glEndConditionalRenderNV();

@foreign
typedef PFNGLSUBPIXELPRECISIONBIASNVPROC = func(xbits: GLuint, ybits: GLuint);

@foreign
func glSubpixelPrecisionBiasNV(xbits: GLuint, ybits: GLuint);

@foreign
typedef PFNGLCONSERVATIVERASTERPARAMETERFNVPROC = func(pname: GLenum, value: GLfloat);

@foreign
func glConservativeRasterParameterfNV(pname: GLenum, value: GLfloat);

@foreign
typedef PFNGLCONSERVATIVERASTERPARAMETERINVPROC = func(pname: GLenum, param: GLint);

@foreign
func glConservativeRasterParameteriNV(pname: GLenum, param: GLint);

@foreign
typedef PFNGLCOPYIMAGESUBDATANVPROC = func(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei);

@foreign
func glCopyImageSubDataNV(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei);

@foreign
typedef PFNGLDEPTHRANGEDNVPROC = func(zNear: GLdouble, zFar: GLdouble);

@foreign
typedef PFNGLCLEARDEPTHDNVPROC = func(depth: GLdouble);

@foreign
typedef PFNGLDEPTHBOUNDSDNVPROC = func(zmin: GLdouble, zmax: GLdouble);

@foreign
func glDepthRangedNV(zNear: GLdouble, zFar: GLdouble);

@foreign
func glClearDepthdNV(depth: GLdouble);

@foreign
func glDepthBoundsdNV(zmin: GLdouble, zmax: GLdouble);

@foreign
typedef PFNGLDRAWTEXTURENVPROC = func(texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat);

@foreign
func glDrawTextureNV(texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat);

@foreign
typedef GLVULKANPROCNV = func();

@foreign
typedef PFNGLDRAWVKIMAGENVPROC = func(vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat);

@foreign
typedef PFNGLGETVKPROCADDRNVPROC = func(name: GLchar*): GLVULKANPROCNV;

@foreign
typedef PFNGLWAITVKSEMAPHORENVPROC = func(vkSemaphore: GLuint64);

@foreign
typedef PFNGLSIGNALVKSEMAPHORENVPROC = func(vkSemaphore: GLuint64);

@foreign
typedef PFNGLSIGNALVKFENCENVPROC = func(vkFence: GLuint64);

@foreign
func glDrawVkImageNV(vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat);

@foreign
func glGetVkProcAddrNV(name: GLchar*): GLVULKANPROCNV;

@foreign
func glWaitVkSemaphoreNV(vkSemaphore: GLuint64);

@foreign
func glSignalVkSemaphoreNV(vkSemaphore: GLuint64);

@foreign
func glSignalVkFenceNV(vkFence: GLuint64);

@foreign
typedef PFNGLMAPCONTROLPOINTSNVPROC = func(target: GLenum, index: GLuint, type: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: void const*);

@foreign
typedef PFNGLMAPPARAMETERIVNVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLMAPPARAMETERFVNVPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETMAPCONTROLPOINTSNVPROC = func(target: GLenum, index: GLuint, type: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: void*);

@foreign
typedef PFNGLGETMAPPARAMETERIVNVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETMAPPARAMETERFVNVPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETMAPATTRIBPARAMETERIVNVPROC = func(target: GLenum, index: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETMAPATTRIBPARAMETERFVNVPROC = func(target: GLenum, index: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLEVALMAPSNVPROC = func(target: GLenum, mode: GLenum);

@foreign
func glMapControlPointsNV(target: GLenum, index: GLuint, type: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: void const*);

@foreign
func glMapParameterivNV(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glMapParameterfvNV(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetMapControlPointsNV(target: GLenum, index: GLuint, type: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: void*);

@foreign
func glGetMapParameterivNV(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetMapParameterfvNV(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetMapAttribParameterivNV(target: GLenum, index: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetMapAttribParameterfvNV(target: GLenum, index: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glEvalMapsNV(target: GLenum, mode: GLenum);

@foreign
typedef PFNGLGETMULTISAMPLEFVNVPROC = func(pname: GLenum, index: GLuint, val: GLfloat*);

@foreign
typedef PFNGLSAMPLEMASKINDEXEDNVPROC = func(index: GLuint, mask: GLbitfield);

@foreign
typedef PFNGLTEXRENDERBUFFERNVPROC = func(target: GLenum, renderbuffer: GLuint);

@foreign
func glGetMultisamplefvNV(pname: GLenum, index: GLuint, val: GLfloat*);

@foreign
func glSampleMaskIndexedNV(index: GLuint, mask: GLbitfield);

@foreign
func glTexRenderbufferNV(target: GLenum, renderbuffer: GLuint);

@foreign
typedef PFNGLDELETEFENCESNVPROC = func(n: GLsizei, fences: GLuint*);

@foreign
typedef PFNGLGENFENCESNVPROC = func(n: GLsizei, fences: GLuint*);

@foreign
typedef PFNGLISFENCENVPROC = func(fence: GLuint): GLboolean;

@foreign
typedef PFNGLTESTFENCENVPROC = func(fence: GLuint): GLboolean;

@foreign
typedef PFNGLGETFENCEIVNVPROC = func(fence: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLFINISHFENCENVPROC = func(fence: GLuint);

@foreign
typedef PFNGLSETFENCENVPROC = func(fence: GLuint, condition: GLenum);

@foreign
func glDeleteFencesNV(n: GLsizei, fences: GLuint*);

@foreign
func glGenFencesNV(n: GLsizei, fences: GLuint*);

@foreign
func glIsFenceNV(fence: GLuint): GLboolean;

@foreign
func glTestFenceNV(fence: GLuint): GLboolean;

@foreign
func glGetFenceivNV(fence: GLuint, pname: GLenum, params: GLint*);

@foreign
func glFinishFenceNV(fence: GLuint);

@foreign
func glSetFenceNV(fence: GLuint, condition: GLenum);

@foreign
typedef PFNGLFRAGMENTCOVERAGECOLORNVPROC = func(color: GLuint);

@foreign
func glFragmentCoverageColorNV(color: GLuint);

@foreign
typedef PFNGLPROGRAMNAMEDPARAMETER4FNVPROC = func(id: GLuint, len: GLsizei, name: GLubyte*, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
typedef PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC = func(id: GLuint, len: GLsizei, name: GLubyte*, v: GLfloat*);

@foreign
typedef PFNGLPROGRAMNAMEDPARAMETER4DNVPROC = func(id: GLuint, len: GLsizei, name: GLubyte*, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC = func(id: GLuint, len: GLsizei, name: GLubyte*, v: GLdouble*);

@foreign
typedef PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC = func(id: GLuint, len: GLsizei, name: GLubyte*, params: GLfloat*);

@foreign
typedef PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC = func(id: GLuint, len: GLsizei, name: GLubyte*, params: GLdouble*);

@foreign
func glProgramNamedParameter4fNV(id: GLuint, len: GLsizei, name: GLubyte*, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glProgramNamedParameter4fvNV(id: GLuint, len: GLsizei, name: GLubyte*, v: GLfloat*);

@foreign
func glProgramNamedParameter4dNV(id: GLuint, len: GLsizei, name: GLubyte*, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glProgramNamedParameter4dvNV(id: GLuint, len: GLsizei, name: GLubyte*, v: GLdouble*);

@foreign
func glGetProgramNamedParameterfvNV(id: GLuint, len: GLsizei, name: GLubyte*, params: GLfloat*);

@foreign
func glGetProgramNamedParameterdvNV(id: GLuint, len: GLsizei, name: GLubyte*, params: GLdouble*);

@foreign
typedef PFNGLCOVERAGEMODULATIONTABLENVPROC = func(n: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLGETCOVERAGEMODULATIONTABLENVPROC = func(bufsize: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLCOVERAGEMODULATIONNVPROC = func(components: GLenum);

@foreign
func glCoverageModulationTableNV(n: GLsizei, v: GLfloat*);

@foreign
func glGetCoverageModulationTableNV(bufsize: GLsizei, v: GLfloat*);

@foreign
func glCoverageModulationNV(components: GLenum);

@foreign
typedef PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = func(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
func glRenderbufferStorageMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLPROGRAMVERTEXLIMITNVPROC = func(target: GLenum, limit: GLint);

@foreign
typedef PFNGLFRAMEBUFFERTEXTUREEXTPROC = func(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint);

@foreign
typedef PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC = func(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum);

@foreign
func glProgramVertexLimitNV(target: GLenum, limit: GLint);

@foreign
func glFramebufferTextureEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint);

@foreign
func glFramebufferTextureFaceEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum);

@foreign
typedef PFNGLRENDERGPUMASKNVPROC = func(mask: GLbitfield);

@foreign
typedef PFNGLMULTICASTBUFFERSUBDATANVPROC = func(gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void const*);

@foreign
typedef PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC = func(readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr);

@foreign
typedef PFNGLMULTICASTCOPYIMAGESUBDATANVPROC = func(srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei);

@foreign
typedef PFNGLMULTICASTBLITFRAMEBUFFERNVPROC = func(srcGpu: GLuint, dstGpu: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);

@foreign
typedef PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = func(gpu: GLuint, framebuffer: GLuint, start: GLuint, count: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLMULTICASTBARRIERNVPROC = func();

@foreign
typedef PFNGLMULTICASTWAITSYNCNVPROC = func(signalGpu: GLuint, waitGpuMask: GLbitfield);

@foreign
typedef PFNGLMULTICASTGETQUERYOBJECTIVNVPROC = func(gpu: GLuint, id: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC = func(gpu: GLuint, id: GLuint, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC = func(gpu: GLuint, id: GLuint, pname: GLenum, params: GLint64*);

@foreign
typedef PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC = func(gpu: GLuint, id: GLuint, pname: GLenum, params: GLuint64*);

@foreign
func glRenderGpuMaskNV(mask: GLbitfield);

@foreign
func glMulticastBufferSubDataNV(gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void const*);

@foreign
func glMulticastCopyBufferSubDataNV(readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr);

@foreign
func glMulticastCopyImageSubDataNV(srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei);

@foreign
func glMulticastBlitFramebufferNV(srcGpu: GLuint, dstGpu: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);

@foreign
func glMulticastFramebufferSampleLocationsfvNV(gpu: GLuint, framebuffer: GLuint, start: GLuint, count: GLsizei, v: GLfloat*);

@foreign
func glMulticastBarrierNV();

@foreign
func glMulticastWaitSyncNV(signalGpu: GLuint, waitGpuMask: GLbitfield);

@foreign
func glMulticastGetQueryObjectivNV(gpu: GLuint, id: GLuint, pname: GLenum, params: GLint*);

@foreign
func glMulticastGetQueryObjectuivNV(gpu: GLuint, id: GLuint, pname: GLenum, params: GLuint*);

@foreign
func glMulticastGetQueryObjecti64vNV(gpu: GLuint, id: GLuint, pname: GLenum, params: GLint64*);

@foreign
func glMulticastGetQueryObjectui64vNV(gpu: GLuint, id: GLuint, pname: GLenum, params: GLuint64*);

@foreign
typedef PFNGLPROGRAMLOCALPARAMETERI4INVPROC = func(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
typedef PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC = func(target: GLenum, index: GLuint, params: GLint*);

@foreign
typedef PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC = func(target: GLenum, index: GLuint, count: GLsizei, params: GLint*);

@foreign
typedef PFNGLPROGRAMLOCALPARAMETERI4UINVPROC = func(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);

@foreign
typedef PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC = func(target: GLenum, index: GLuint, params: GLuint*);

@foreign
typedef PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC = func(target: GLenum, index: GLuint, count: GLsizei, params: GLuint*);

@foreign
typedef PFNGLPROGRAMENVPARAMETERI4INVPROC = func(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
typedef PFNGLPROGRAMENVPARAMETERI4IVNVPROC = func(target: GLenum, index: GLuint, params: GLint*);

@foreign
typedef PFNGLPROGRAMENVPARAMETERSI4IVNVPROC = func(target: GLenum, index: GLuint, count: GLsizei, params: GLint*);

@foreign
typedef PFNGLPROGRAMENVPARAMETERI4UINVPROC = func(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);

@foreign
typedef PFNGLPROGRAMENVPARAMETERI4UIVNVPROC = func(target: GLenum, index: GLuint, params: GLuint*);

@foreign
typedef PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC = func(target: GLenum, index: GLuint, count: GLsizei, params: GLuint*);

@foreign
typedef PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC = func(target: GLenum, index: GLuint, params: GLint*);

@foreign
typedef PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC = func(target: GLenum, index: GLuint, params: GLuint*);

@foreign
typedef PFNGLGETPROGRAMENVPARAMETERIIVNVPROC = func(target: GLenum, index: GLuint, params: GLint*);

@foreign
typedef PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC = func(target: GLenum, index: GLuint, params: GLuint*);

@foreign
func glProgramLocalParameterI4iNV(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
func glProgramLocalParameterI4ivNV(target: GLenum, index: GLuint, params: GLint*);

@foreign
func glProgramLocalParametersI4ivNV(target: GLenum, index: GLuint, count: GLsizei, params: GLint*);

@foreign
func glProgramLocalParameterI4uiNV(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);

@foreign
func glProgramLocalParameterI4uivNV(target: GLenum, index: GLuint, params: GLuint*);

@foreign
func glProgramLocalParametersI4uivNV(target: GLenum, index: GLuint, count: GLsizei, params: GLuint*);

@foreign
func glProgramEnvParameterI4iNV(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
func glProgramEnvParameterI4ivNV(target: GLenum, index: GLuint, params: GLint*);

@foreign
func glProgramEnvParametersI4ivNV(target: GLenum, index: GLuint, count: GLsizei, params: GLint*);

@foreign
func glProgramEnvParameterI4uiNV(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);

@foreign
func glProgramEnvParameterI4uivNV(target: GLenum, index: GLuint, params: GLuint*);

@foreign
func glProgramEnvParametersI4uivNV(target: GLenum, index: GLuint, count: GLsizei, params: GLuint*);

@foreign
func glGetProgramLocalParameterIivNV(target: GLenum, index: GLuint, params: GLint*);

@foreign
func glGetProgramLocalParameterIuivNV(target: GLenum, index: GLuint, params: GLuint*);

@foreign
func glGetProgramEnvParameterIivNV(target: GLenum, index: GLuint, params: GLint*);

@foreign
func glGetProgramEnvParameterIuivNV(target: GLenum, index: GLuint, params: GLuint*);

@foreign
typedef PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC = func(target: GLenum, count: GLsizei, params: GLuint*);

@foreign
typedef PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC = func(target: GLenum, index: GLuint, param: GLuint*);

@foreign
func glProgramSubroutineParametersuivNV(target: GLenum, count: GLsizei, params: GLuint*);

@foreign
func glGetProgramSubroutineParameteruivNV(target: GLenum, index: GLuint, param: GLuint*);

@foreign
typedef GLhalfNV = ushort;

@foreign
typedef PFNGLVERTEX2HNVPROC = func(x: GLhalfNV, y: GLhalfNV);

@foreign
typedef PFNGLVERTEX2HVNVPROC = func(v: GLhalfNV*);

@foreign
typedef PFNGLVERTEX3HNVPROC = func(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV);

@foreign
typedef PFNGLVERTEX3HVNVPROC = func(v: GLhalfNV*);

@foreign
typedef PFNGLVERTEX4HNVPROC = func(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV);

@foreign
typedef PFNGLVERTEX4HVNVPROC = func(v: GLhalfNV*);

@foreign
typedef PFNGLNORMAL3HNVPROC = func(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV);

@foreign
typedef PFNGLNORMAL3HVNVPROC = func(v: GLhalfNV*);

@foreign
typedef PFNGLCOLOR3HNVPROC = func(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV);

@foreign
typedef PFNGLCOLOR3HVNVPROC = func(v: GLhalfNV*);

@foreign
typedef PFNGLCOLOR4HNVPROC = func(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV);

@foreign
typedef PFNGLCOLOR4HVNVPROC = func(v: GLhalfNV*);

@foreign
typedef PFNGLTEXCOORD1HNVPROC = func(s: GLhalfNV);

@foreign
typedef PFNGLTEXCOORD1HVNVPROC = func(v: GLhalfNV*);

@foreign
typedef PFNGLTEXCOORD2HNVPROC = func(s: GLhalfNV, t: GLhalfNV);

@foreign
typedef PFNGLTEXCOORD2HVNVPROC = func(v: GLhalfNV*);

@foreign
typedef PFNGLTEXCOORD3HNVPROC = func(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV);

@foreign
typedef PFNGLTEXCOORD3HVNVPROC = func(v: GLhalfNV*);

@foreign
typedef PFNGLTEXCOORD4HNVPROC = func(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV);

@foreign
typedef PFNGLTEXCOORD4HVNVPROC = func(v: GLhalfNV*);

@foreign
typedef PFNGLMULTITEXCOORD1HNVPROC = func(target: GLenum, s: GLhalfNV);

@foreign
typedef PFNGLMULTITEXCOORD1HVNVPROC = func(target: GLenum, v: GLhalfNV*);

@foreign
typedef PFNGLMULTITEXCOORD2HNVPROC = func(target: GLenum, s: GLhalfNV, t: GLhalfNV);

@foreign
typedef PFNGLMULTITEXCOORD2HVNVPROC = func(target: GLenum, v: GLhalfNV*);

@foreign
typedef PFNGLMULTITEXCOORD3HNVPROC = func(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV);

@foreign
typedef PFNGLMULTITEXCOORD3HVNVPROC = func(target: GLenum, v: GLhalfNV*);

@foreign
typedef PFNGLMULTITEXCOORD4HNVPROC = func(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV);

@foreign
typedef PFNGLMULTITEXCOORD4HVNVPROC = func(target: GLenum, v: GLhalfNV*);

@foreign
typedef PFNGLFOGCOORDHNVPROC = func(fog: GLhalfNV);

@foreign
typedef PFNGLFOGCOORDHVNVPROC = func(fog: GLhalfNV*);

@foreign
typedef PFNGLSECONDARYCOLOR3HNVPROC = func(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV);

@foreign
typedef PFNGLSECONDARYCOLOR3HVNVPROC = func(v: GLhalfNV*);

@foreign
typedef PFNGLVERTEXWEIGHTHNVPROC = func(weight: GLhalfNV);

@foreign
typedef PFNGLVERTEXWEIGHTHVNVPROC = func(weight: GLhalfNV*);

@foreign
typedef PFNGLVERTEXATTRIB1HNVPROC = func(index: GLuint, x: GLhalfNV);

@foreign
typedef PFNGLVERTEXATTRIB1HVNVPROC = func(index: GLuint, v: GLhalfNV*);

@foreign
typedef PFNGLVERTEXATTRIB2HNVPROC = func(index: GLuint, x: GLhalfNV, y: GLhalfNV);

@foreign
typedef PFNGLVERTEXATTRIB2HVNVPROC = func(index: GLuint, v: GLhalfNV*);

@foreign
typedef PFNGLVERTEXATTRIB3HNVPROC = func(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV);

@foreign
typedef PFNGLVERTEXATTRIB3HVNVPROC = func(index: GLuint, v: GLhalfNV*);

@foreign
typedef PFNGLVERTEXATTRIB4HNVPROC = func(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV);

@foreign
typedef PFNGLVERTEXATTRIB4HVNVPROC = func(index: GLuint, v: GLhalfNV*);

@foreign
typedef PFNGLVERTEXATTRIBS1HVNVPROC = func(index: GLuint, n: GLsizei, v: GLhalfNV*);

@foreign
typedef PFNGLVERTEXATTRIBS2HVNVPROC = func(index: GLuint, n: GLsizei, v: GLhalfNV*);

@foreign
typedef PFNGLVERTEXATTRIBS3HVNVPROC = func(index: GLuint, n: GLsizei, v: GLhalfNV*);

@foreign
typedef PFNGLVERTEXATTRIBS4HVNVPROC = func(index: GLuint, n: GLsizei, v: GLhalfNV*);

@foreign
func glVertex2hNV(x: GLhalfNV, y: GLhalfNV);

@foreign
func glVertex2hvNV(v: GLhalfNV*);

@foreign
func glVertex3hNV(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV);

@foreign
func glVertex3hvNV(v: GLhalfNV*);

@foreign
func glVertex4hNV(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV);

@foreign
func glVertex4hvNV(v: GLhalfNV*);

@foreign
func glNormal3hNV(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV);

@foreign
func glNormal3hvNV(v: GLhalfNV*);

@foreign
func glColor3hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV);

@foreign
func glColor3hvNV(v: GLhalfNV*);

@foreign
func glColor4hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV);

@foreign
func glColor4hvNV(v: GLhalfNV*);

@foreign
func glTexCoord1hNV(s: GLhalfNV);

@foreign
func glTexCoord1hvNV(v: GLhalfNV*);

@foreign
func glTexCoord2hNV(s: GLhalfNV, t: GLhalfNV);

@foreign
func glTexCoord2hvNV(v: GLhalfNV*);

@foreign
func glTexCoord3hNV(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV);

@foreign
func glTexCoord3hvNV(v: GLhalfNV*);

@foreign
func glTexCoord4hNV(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV);

@foreign
func glTexCoord4hvNV(v: GLhalfNV*);

@foreign
func glMultiTexCoord1hNV(target: GLenum, s: GLhalfNV);

@foreign
func glMultiTexCoord1hvNV(target: GLenum, v: GLhalfNV*);

@foreign
func glMultiTexCoord2hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV);

@foreign
func glMultiTexCoord2hvNV(target: GLenum, v: GLhalfNV*);

@foreign
func glMultiTexCoord3hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV);

@foreign
func glMultiTexCoord3hvNV(target: GLenum, v: GLhalfNV*);

@foreign
func glMultiTexCoord4hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV);

@foreign
func glMultiTexCoord4hvNV(target: GLenum, v: GLhalfNV*);

@foreign
func glFogCoordhNV(fog: GLhalfNV);

@foreign
func glFogCoordhvNV(fog: GLhalfNV*);

@foreign
func glSecondaryColor3hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV);

@foreign
func glSecondaryColor3hvNV(v: GLhalfNV*);

@foreign
func glVertexWeighthNV(weight: GLhalfNV);

@foreign
func glVertexWeighthvNV(weight: GLhalfNV*);

@foreign
func glVertexAttrib1hNV(index: GLuint, x: GLhalfNV);

@foreign
func glVertexAttrib1hvNV(index: GLuint, v: GLhalfNV*);

@foreign
func glVertexAttrib2hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV);

@foreign
func glVertexAttrib2hvNV(index: GLuint, v: GLhalfNV*);

@foreign
func glVertexAttrib3hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV);

@foreign
func glVertexAttrib3hvNV(index: GLuint, v: GLhalfNV*);

@foreign
func glVertexAttrib4hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV);

@foreign
func glVertexAttrib4hvNV(index: GLuint, v: GLhalfNV*);

@foreign
func glVertexAttribs1hvNV(index: GLuint, n: GLsizei, v: GLhalfNV*);

@foreign
func glVertexAttribs2hvNV(index: GLuint, n: GLsizei, v: GLhalfNV*);

@foreign
func glVertexAttribs3hvNV(index: GLuint, n: GLsizei, v: GLhalfNV*);

@foreign
func glVertexAttribs4hvNV(index: GLuint, n: GLsizei, v: GLhalfNV*);

@foreign
typedef PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = func(target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, bufSize: GLsizei, params: GLint*);

@foreign
func glGetInternalformatSampleivNV(target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, bufSize: GLsizei, params: GLint*);

@foreign
typedef PFNGLGENOCCLUSIONQUERIESNVPROC = func(n: GLsizei, ids: GLuint*);

@foreign
typedef PFNGLDELETEOCCLUSIONQUERIESNVPROC = func(n: GLsizei, ids: GLuint*);

@foreign
typedef PFNGLISOCCLUSIONQUERYNVPROC = func(id: GLuint): GLboolean;

@foreign
typedef PFNGLBEGINOCCLUSIONQUERYNVPROC = func(id: GLuint);

@foreign
typedef PFNGLENDOCCLUSIONQUERYNVPROC = func();

@foreign
typedef PFNGLGETOCCLUSIONQUERYIVNVPROC = func(id: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETOCCLUSIONQUERYUIVNVPROC = func(id: GLuint, pname: GLenum, params: GLuint*);

@foreign
func glGenOcclusionQueriesNV(n: GLsizei, ids: GLuint*);

@foreign
func glDeleteOcclusionQueriesNV(n: GLsizei, ids: GLuint*);

@foreign
func glIsOcclusionQueryNV(id: GLuint): GLboolean;

@foreign
func glBeginOcclusionQueryNV(id: GLuint);

@foreign
func glEndOcclusionQueryNV();

@foreign
func glGetOcclusionQueryivNV(id: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetOcclusionQueryuivNV(id: GLuint, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC = func(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: GLfloat*);

@foreign
typedef PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC = func(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: GLint*);

@foreign
typedef PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC = func(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: GLuint*);

@foreign
func glProgramBufferParametersfvNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: GLfloat*);

@foreign
func glProgramBufferParametersIivNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: GLint*);

@foreign
func glProgramBufferParametersIuivNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: GLuint*);

@foreign
typedef PFNGLGENPATHSNVPROC = func(range: GLsizei): GLuint;

@foreign
typedef PFNGLDELETEPATHSNVPROC = func(path: GLuint, range: GLsizei);

@foreign
typedef PFNGLISPATHNVPROC = func(path: GLuint): GLboolean;

@foreign
typedef PFNGLPATHCOMMANDSNVPROC = func(path: GLuint, numCommands: GLsizei, commands: GLubyte*, numCoords: GLsizei, coordType: GLenum, coords: void const*);

@foreign
typedef PFNGLPATHCOORDSNVPROC = func(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: void const*);

@foreign
typedef PFNGLPATHSUBCOMMANDSNVPROC = func(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: GLubyte*, numCoords: GLsizei, coordType: GLenum, coords: void const*);

@foreign
typedef PFNGLPATHSUBCOORDSNVPROC = func(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: void const*);

@foreign
typedef PFNGLPATHSTRINGNVPROC = func(path: GLuint, format: GLenum, length: GLsizei, pathString: void const*);

@foreign
typedef PFNGLPATHGLYPHSNVPROC = func(firstPathName: GLuint, fontTarget: GLenum, fontName: void const*, fontStyle: GLbitfield, numGlyphs: GLsizei, type: GLenum, charcodes: void const*, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat);

@foreign
typedef PFNGLPATHGLYPHRANGENVPROC = func(firstPathName: GLuint, fontTarget: GLenum, fontName: void const*, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat);

@foreign
typedef PFNGLWEIGHTPATHSNVPROC = func(resultPath: GLuint, numPaths: GLsizei, paths: GLuint*, weights: GLfloat*);

@foreign
typedef PFNGLCOPYPATHNVPROC = func(resultPath: GLuint, srcPath: GLuint);

@foreign
typedef PFNGLINTERPOLATEPATHSNVPROC = func(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat);

@foreign
typedef PFNGLTRANSFORMPATHNVPROC = func(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: GLfloat*);

@foreign
typedef PFNGLPATHPARAMETERIVNVPROC = func(path: GLuint, pname: GLenum, value: GLint*);

@foreign
typedef PFNGLPATHPARAMETERINVPROC = func(path: GLuint, pname: GLenum, value: GLint);

@foreign
typedef PFNGLPATHPARAMETERFVNVPROC = func(path: GLuint, pname: GLenum, value: GLfloat*);

@foreign
typedef PFNGLPATHPARAMETERFNVPROC = func(path: GLuint, pname: GLenum, value: GLfloat);

@foreign
typedef PFNGLPATHDASHARRAYNVPROC = func(path: GLuint, dashCount: GLsizei, dashArray: GLfloat*);

@foreign
typedef PFNGLPATHSTENCILFUNCNVPROC = func(fn: GLenum, ref: GLint, mask: GLuint);

@foreign
typedef PFNGLPATHSTENCILDEPTHOFFSETNVPROC = func(factor: GLfloat, units: GLfloat);

@foreign
typedef PFNGLSTENCILFILLPATHNVPROC = func(path: GLuint, fillMode: GLenum, mask: GLuint);

@foreign
typedef PFNGLSTENCILSTROKEPATHNVPROC = func(path: GLuint, reference: GLint, mask: GLuint);

@foreign
typedef PFNGLSTENCILFILLPATHINSTANCEDNVPROC = func(numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: GLfloat*);

@foreign
typedef PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = func(numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: GLfloat*);

@foreign
typedef PFNGLPATHCOVERDEPTHFUNCNVPROC = func(fn: GLenum);

@foreign
typedef PFNGLCOVERFILLPATHNVPROC = func(path: GLuint, coverMode: GLenum);

@foreign
typedef PFNGLCOVERSTROKEPATHNVPROC = func(path: GLuint, coverMode: GLenum);

@foreign
typedef PFNGLCOVERFILLPATHINSTANCEDNVPROC = func(numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*);

@foreign
typedef PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = func(numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*);

@foreign
typedef PFNGLGETPATHPARAMETERIVNVPROC = func(path: GLuint, pname: GLenum, value: GLint*);

@foreign
typedef PFNGLGETPATHPARAMETERFVNVPROC = func(path: GLuint, pname: GLenum, value: GLfloat*);

@foreign
typedef PFNGLGETPATHCOMMANDSNVPROC = func(path: GLuint, commands: GLubyte*);

@foreign
typedef PFNGLGETPATHCOORDSNVPROC = func(path: GLuint, coords: GLfloat*);

@foreign
typedef PFNGLGETPATHDASHARRAYNVPROC = func(path: GLuint, dashArray: GLfloat*);

@foreign
typedef PFNGLGETPATHMETRICSNVPROC = func(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, stride: GLsizei, metrics: GLfloat*);

@foreign
typedef PFNGLGETPATHMETRICRANGENVPROC = func(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: GLfloat*);

@foreign
typedef PFNGLGETPATHSPACINGNVPROC = func(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: GLfloat*);

@foreign
typedef PFNGLISPOINTINFILLPATHNVPROC = func(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat): GLboolean;

@foreign
typedef PFNGLISPOINTINSTROKEPATHNVPROC = func(path: GLuint, x: GLfloat, y: GLfloat): GLboolean;

@foreign
typedef PFNGLGETPATHLENGTHNVPROC = func(path: GLuint, startSegment: GLsizei, numSegments: GLsizei): GLfloat;

@foreign
typedef PFNGLPOINTALONGPATHNVPROC = func(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: GLfloat*, y: GLfloat*, tangentX: GLfloat*, tangentY: GLfloat*): GLboolean;

@foreign
typedef PFNGLMATRIXLOAD3X2FNVPROC = func(matrixMode: GLenum, m: GLfloat*);

@foreign
typedef PFNGLMATRIXLOAD3X3FNVPROC = func(matrixMode: GLenum, m: GLfloat*);

@foreign
typedef PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = func(matrixMode: GLenum, m: GLfloat*);

@foreign
typedef PFNGLMATRIXMULT3X2FNVPROC = func(matrixMode: GLenum, m: GLfloat*);

@foreign
typedef PFNGLMATRIXMULT3X3FNVPROC = func(matrixMode: GLenum, m: GLfloat*);

@foreign
typedef PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = func(matrixMode: GLenum, m: GLfloat*);

@foreign
typedef PFNGLSTENCILTHENCOVERFILLPATHNVPROC = func(path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum);

@foreign
typedef PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = func(path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum);

@foreign
typedef PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = func(numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*);

@foreign
typedef PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = func(numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*);

@foreign
typedef PFNGLPATHGLYPHINDEXRANGENVPROC = func(fontTarget: GLenum, fontName: void const*, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: GLuint*): GLenum;

@foreign
typedef PFNGLPATHGLYPHINDEXARRAYNVPROC = func(firstPathName: GLuint, fontTarget: GLenum, fontName: void const*, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum;

@foreign
typedef PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = func(firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: void const*, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum;

@foreign
typedef PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = func(program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: GLfloat*);

@foreign
typedef PFNGLGETPROGRAMRESOURCEFVNVPROC = func(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: GLenum*, bufSize: GLsizei, length: GLsizei*, params: GLfloat*);

@foreign
typedef PFNGLPATHCOLORGENNVPROC = func(color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: GLfloat*);

@foreign
typedef PFNGLPATHTEXGENNVPROC = func(texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: GLfloat*);

@foreign
typedef PFNGLPATHFOGGENNVPROC = func(genMode: GLenum);

@foreign
typedef PFNGLGETPATHCOLORGENIVNVPROC = func(color: GLenum, pname: GLenum, value: GLint*);

@foreign
typedef PFNGLGETPATHCOLORGENFVNVPROC = func(color: GLenum, pname: GLenum, value: GLfloat*);

@foreign
typedef PFNGLGETPATHTEXGENIVNVPROC = func(texCoordSet: GLenum, pname: GLenum, value: GLint*);

@foreign
typedef PFNGLGETPATHTEXGENFVNVPROC = func(texCoordSet: GLenum, pname: GLenum, value: GLfloat*);

@foreign
func glGenPathsNV(range: GLsizei): GLuint;

@foreign
func glDeletePathsNV(path: GLuint, range: GLsizei);

@foreign
func glIsPathNV(path: GLuint): GLboolean;

@foreign
func glPathCommandsNV(path: GLuint, numCommands: GLsizei, commands: GLubyte*, numCoords: GLsizei, coordType: GLenum, coords: void const*);

@foreign
func glPathCoordsNV(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: void const*);

@foreign
func glPathSubCommandsNV(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: GLubyte*, numCoords: GLsizei, coordType: GLenum, coords: void const*);

@foreign
func glPathSubCoordsNV(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: void const*);

@foreign
func glPathStringNV(path: GLuint, format: GLenum, length: GLsizei, pathString: void const*);

@foreign
func glPathGlyphsNV(firstPathName: GLuint, fontTarget: GLenum, fontName: void const*, fontStyle: GLbitfield, numGlyphs: GLsizei, type: GLenum, charcodes: void const*, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat);

@foreign
func glPathGlyphRangeNV(firstPathName: GLuint, fontTarget: GLenum, fontName: void const*, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat);

@foreign
func glWeightPathsNV(resultPath: GLuint, numPaths: GLsizei, paths: GLuint*, weights: GLfloat*);

@foreign
func glCopyPathNV(resultPath: GLuint, srcPath: GLuint);

@foreign
func glInterpolatePathsNV(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat);

@foreign
func glTransformPathNV(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: GLfloat*);

@foreign
func glPathParameterivNV(path: GLuint, pname: GLenum, value: GLint*);

@foreign
func glPathParameteriNV(path: GLuint, pname: GLenum, value: GLint);

@foreign
func glPathParameterfvNV(path: GLuint, pname: GLenum, value: GLfloat*);

@foreign
func glPathParameterfNV(path: GLuint, pname: GLenum, value: GLfloat);

@foreign
func glPathDashArrayNV(path: GLuint, dashCount: GLsizei, dashArray: GLfloat*);

@foreign
func glPathStencilFuncNV(fn: GLenum, ref: GLint, mask: GLuint);

@foreign
func glPathStencilDepthOffsetNV(factor: GLfloat, units: GLfloat);

@foreign
func glStencilFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint);

@foreign
func glStencilStrokePathNV(path: GLuint, reference: GLint, mask: GLuint);

@foreign
func glStencilFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: GLfloat*);

@foreign
func glStencilStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: GLfloat*);

@foreign
func glPathCoverDepthFuncNV(fn: GLenum);

@foreign
func glCoverFillPathNV(path: GLuint, coverMode: GLenum);

@foreign
func glCoverStrokePathNV(path: GLuint, coverMode: GLenum);

@foreign
func glCoverFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*);

@foreign
func glCoverStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*);

@foreign
func glGetPathParameterivNV(path: GLuint, pname: GLenum, value: GLint*);

@foreign
func glGetPathParameterfvNV(path: GLuint, pname: GLenum, value: GLfloat*);

@foreign
func glGetPathCommandsNV(path: GLuint, commands: GLubyte*);

@foreign
func glGetPathCoordsNV(path: GLuint, coords: GLfloat*);

@foreign
func glGetPathDashArrayNV(path: GLuint, dashArray: GLfloat*);

@foreign
func glGetPathMetricsNV(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, stride: GLsizei, metrics: GLfloat*);

@foreign
func glGetPathMetricRangeNV(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: GLfloat*);

@foreign
func glGetPathSpacingNV(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: GLfloat*);

@foreign
func glIsPointInFillPathNV(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat): GLboolean;

@foreign
func glIsPointInStrokePathNV(path: GLuint, x: GLfloat, y: GLfloat): GLboolean;

@foreign
func glGetPathLengthNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei): GLfloat;

@foreign
func glPointAlongPathNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: GLfloat*, y: GLfloat*, tangentX: GLfloat*, tangentY: GLfloat*): GLboolean;

@foreign
func glMatrixLoad3x2fNV(matrixMode: GLenum, m: GLfloat*);

@foreign
func glMatrixLoad3x3fNV(matrixMode: GLenum, m: GLfloat*);

@foreign
func glMatrixLoadTranspose3x3fNV(matrixMode: GLenum, m: GLfloat*);

@foreign
func glMatrixMult3x2fNV(matrixMode: GLenum, m: GLfloat*);

@foreign
func glMatrixMult3x3fNV(matrixMode: GLenum, m: GLfloat*);

@foreign
func glMatrixMultTranspose3x3fNV(matrixMode: GLenum, m: GLfloat*);

@foreign
func glStencilThenCoverFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum);

@foreign
func glStencilThenCoverStrokePathNV(path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum);

@foreign
func glStencilThenCoverFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*);

@foreign
func glStencilThenCoverStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: void const*, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*);

@foreign
func glPathGlyphIndexRangeNV(fontTarget: GLenum, fontName: void const*, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: GLuint*): GLenum;

@foreign
func glPathGlyphIndexArrayNV(firstPathName: GLuint, fontTarget: GLenum, fontName: void const*, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum;

@foreign
func glPathMemoryGlyphIndexArrayNV(firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: void const*, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum;

@foreign
func glProgramPathFragmentInputGenNV(program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: GLfloat*);

@foreign
func glGetProgramResourcefvNV(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: GLenum*, bufSize: GLsizei, length: GLsizei*, params: GLfloat*);

@foreign
func glPathColorGenNV(color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: GLfloat*);

@foreign
func glPathTexGenNV(texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: GLfloat*);

@foreign
func glPathFogGenNV(genMode: GLenum);

@foreign
func glGetPathColorGenivNV(color: GLenum, pname: GLenum, value: GLint*);

@foreign
func glGetPathColorGenfvNV(color: GLenum, pname: GLenum, value: GLfloat*);

@foreign
func glGetPathTexGenivNV(texCoordSet: GLenum, pname: GLenum, value: GLint*);

@foreign
func glGetPathTexGenfvNV(texCoordSet: GLenum, pname: GLenum, value: GLfloat*);

@foreign
typedef PFNGLPIXELDATARANGENVPROC = func(target: GLenum, length: GLsizei, pointer: void const*);

@foreign
typedef PFNGLFLUSHPIXELDATARANGENVPROC = func(target: GLenum);

@foreign
func glPixelDataRangeNV(target: GLenum, length: GLsizei, pointer: void const*);

@foreign
func glFlushPixelDataRangeNV(target: GLenum);

@foreign
typedef PFNGLPOINTPARAMETERINVPROC = func(pname: GLenum, param: GLint);

@foreign
typedef PFNGLPOINTPARAMETERIVNVPROC = func(pname: GLenum, params: GLint*);

@foreign
func glPointParameteriNV(pname: GLenum, param: GLint);

@foreign
func glPointParameterivNV(pname: GLenum, params: GLint*);

@foreign
typedef PFNGLPRESENTFRAMEKEYEDNVPROC = func(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint);

@foreign
typedef PFNGLPRESENTFRAMEDUALFILLNVPROC = func(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint);

@foreign
typedef PFNGLGETVIDEOIVNVPROC = func(video_slot: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETVIDEOUIVNVPROC = func(video_slot: GLuint, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLGETVIDEOI64VNVPROC = func(video_slot: GLuint, pname: GLenum, params: GLint64EXT*);

@foreign
typedef PFNGLGETVIDEOUI64VNVPROC = func(video_slot: GLuint, pname: GLenum, params: GLuint64EXT*);

@foreign
func glPresentFrameKeyedNV(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint);

@foreign
func glPresentFrameDualFillNV(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint);

@foreign
func glGetVideoivNV(video_slot: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetVideouivNV(video_slot: GLuint, pname: GLenum, params: GLuint*);

@foreign
func glGetVideoi64vNV(video_slot: GLuint, pname: GLenum, params: GLint64EXT*);

@foreign
func glGetVideoui64vNV(video_slot: GLuint, pname: GLenum, params: GLuint64EXT*);

@foreign
typedef PFNGLPRIMITIVERESTARTNVPROC = func();

@foreign
typedef PFNGLPRIMITIVERESTARTINDEXNVPROC = func(index: GLuint);

@foreign
func glPrimitiveRestartNV();

@foreign
func glPrimitiveRestartIndexNV(index: GLuint);

@foreign
typedef PFNGLQUERYRESOURCENVPROC = func(queryType: GLenum, tagId: GLint, bufSize: GLuint, buffer: GLint*): GLint;

@foreign
func glQueryResourceNV(queryType: GLenum, tagId: GLint, bufSize: GLuint, buffer: GLint*): GLint;

@foreign
typedef PFNGLGENQUERYRESOURCETAGNVPROC = func(n: GLsizei, tagIds: GLint*);

@foreign
typedef PFNGLDELETEQUERYRESOURCETAGNVPROC = func(n: GLsizei, tagIds: GLint*);

@foreign
typedef PFNGLQUERYRESOURCETAGNVPROC = func(tagId: GLint, tagString: GLchar*);

@foreign
func glGenQueryResourceTagNV(n: GLsizei, tagIds: GLint*);

@foreign
func glDeleteQueryResourceTagNV(n: GLsizei, tagIds: GLint*);

@foreign
func glQueryResourceTagNV(tagId: GLint, tagString: GLchar*);

@foreign
typedef PFNGLCOMBINERPARAMETERFVNVPROC = func(pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLCOMBINERPARAMETERFNVPROC = func(pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLCOMBINERPARAMETERIVNVPROC = func(pname: GLenum, params: GLint*);

@foreign
typedef PFNGLCOMBINERPARAMETERINVPROC = func(pname: GLenum, param: GLint);

@foreign
typedef PFNGLCOMBINERINPUTNVPROC = func(stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum);

@foreign
typedef PFNGLCOMBINEROUTPUTNVPROC = func(stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean);

@foreign
typedef PFNGLFINALCOMBINERINPUTNVPROC = func(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum);

@foreign
typedef PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC = func(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC = func(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC = func(stage: GLenum, portion: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC = func(stage: GLenum, portion: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC = func(variable: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC = func(variable: GLenum, pname: GLenum, params: GLint*);

@foreign
func glCombinerParameterfvNV(pname: GLenum, params: GLfloat*);

@foreign
func glCombinerParameterfNV(pname: GLenum, param: GLfloat);

@foreign
func glCombinerParameterivNV(pname: GLenum, params: GLint*);

@foreign
func glCombinerParameteriNV(pname: GLenum, param: GLint);

@foreign
func glCombinerInputNV(stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum);

@foreign
func glCombinerOutputNV(stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean);

@foreign
func glFinalCombinerInputNV(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum);

@foreign
func glGetCombinerInputParameterfvNV(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetCombinerInputParameterivNV(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetCombinerOutputParameterfvNV(stage: GLenum, portion: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetCombinerOutputParameterivNV(stage: GLenum, portion: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetFinalCombinerInputParameterfvNV(variable: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetFinalCombinerInputParameterivNV(variable: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLCOMBINERSTAGEPARAMETERFVNVPROC = func(stage: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC = func(stage: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glCombinerStageParameterfvNV(stage: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetCombinerStageParameterfvNV(stage: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = func(target: GLenum, start: GLuint, count: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = func(framebuffer: GLuint, start: GLuint, count: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLRESOLVEDEPTHVALUESNVPROC = func();

@foreign
func glFramebufferSampleLocationsfvNV(target: GLenum, start: GLuint, count: GLsizei, v: GLfloat*);

@foreign
func glNamedFramebufferSampleLocationsfvNV(framebuffer: GLuint, start: GLuint, count: GLsizei, v: GLfloat*);

@foreign
func glResolveDepthValuesNV();

@foreign
typedef PFNGLMAKEBUFFERRESIDENTNVPROC = func(target: GLenum, access: GLenum);

@foreign
typedef PFNGLMAKEBUFFERNONRESIDENTNVPROC = func(target: GLenum);

@foreign
typedef PFNGLISBUFFERRESIDENTNVPROC = func(target: GLenum): GLboolean;

@foreign
typedef PFNGLMAKENAMEDBUFFERRESIDENTNVPROC = func(buffer: GLuint, access: GLenum);

@foreign
typedef PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = func(buffer: GLuint);

@foreign
typedef PFNGLISNAMEDBUFFERRESIDENTNVPROC = func(buffer: GLuint): GLboolean;

@foreign
typedef PFNGLGETBUFFERPARAMETERUI64VNVPROC = func(target: GLenum, pname: GLenum, params: GLuint64EXT*);

@foreign
typedef PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = func(buffer: GLuint, pname: GLenum, params: GLuint64EXT*);

@foreign
typedef PFNGLGETINTEGERUI64VNVPROC = func(value: GLenum, result: GLuint64EXT*);

@foreign
typedef PFNGLUNIFORMUI64NVPROC = func(location: GLint, value: GLuint64EXT);

@foreign
typedef PFNGLUNIFORMUI64VNVPROC = func(location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
typedef PFNGLPROGRAMUNIFORMUI64NVPROC = func(program: GLuint, location: GLint, value: GLuint64EXT);

@foreign
typedef PFNGLPROGRAMUNIFORMUI64VNVPROC = func(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
func glMakeBufferResidentNV(target: GLenum, access: GLenum);

@foreign
func glMakeBufferNonResidentNV(target: GLenum);

@foreign
func glIsBufferResidentNV(target: GLenum): GLboolean;

@foreign
func glMakeNamedBufferResidentNV(buffer: GLuint, access: GLenum);

@foreign
func glMakeNamedBufferNonResidentNV(buffer: GLuint);

@foreign
func glIsNamedBufferResidentNV(buffer: GLuint): GLboolean;

@foreign
func glGetBufferParameterui64vNV(target: GLenum, pname: GLenum, params: GLuint64EXT*);

@foreign
func glGetNamedBufferParameterui64vNV(buffer: GLuint, pname: GLenum, params: GLuint64EXT*);

@foreign
func glGetIntegerui64vNV(value: GLenum, result: GLuint64EXT*);

@foreign
func glUniformui64NV(location: GLint, value: GLuint64EXT);

@foreign
func glUniformui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
func glProgramUniformui64NV(program: GLuint, location: GLint, value: GLuint64EXT);

@foreign
func glProgramUniformui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*);

@foreign
typedef PFNGLTEXTUREBARRIERNVPROC = func();

@foreign
func glTextureBarrierNV();

@foreign
typedef PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC = func(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean);

@foreign
typedef PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC = func(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean);

@foreign
typedef PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC = func(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean);

@foreign
typedef PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC = func(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean);

@foreign
typedef PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC = func(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean);

@foreign
typedef PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC = func(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean);

@foreign
func glTexImage2DMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean);

@foreign
func glTexImage3DMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean);

@foreign
func glTextureImage2DMultisampleNV(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean);

@foreign
func glTextureImage3DMultisampleNV(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean);

@foreign
func glTextureImage2DMultisampleCoverageNV(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean);

@foreign
func glTextureImage3DMultisampleCoverageNV(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean);

@foreign
typedef PFNGLBEGINTRANSFORMFEEDBACKNVPROC = func(primitiveMode: GLenum);

@foreign
typedef PFNGLENDTRANSFORMFEEDBACKNVPROC = func();

@foreign
typedef PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC = func(count: GLsizei, attribs: GLint*, bufferMode: GLenum);

@foreign
typedef PFNGLBINDBUFFERRANGENVPROC = func(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
typedef PFNGLBINDBUFFEROFFSETNVPROC = func(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr);

@foreign
typedef PFNGLBINDBUFFERBASENVPROC = func(target: GLenum, index: GLuint, buffer: GLuint);

@foreign
typedef PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC = func(program: GLuint, count: GLsizei, locations: GLint*, bufferMode: GLenum);

@foreign
typedef PFNGLACTIVEVARYINGNVPROC = func(program: GLuint, name: GLchar*);

@foreign
typedef PFNGLGETVARYINGLOCATIONNVPROC = func(program: GLuint, name: GLchar*): GLint;

@foreign
typedef PFNGLGETACTIVEVARYINGNVPROC = func(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLsizei*, type: GLenum*, name: GLchar*);

@foreign
typedef PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC = func(program: GLuint, index: GLuint, location: GLint*);

@foreign
typedef PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC = func(count: GLsizei, attribs: GLint*, nbuffers: GLsizei, bufstreams: GLint*, bufferMode: GLenum);

@foreign
func glBeginTransformFeedbackNV(primitiveMode: GLenum);

@foreign
func glEndTransformFeedbackNV();

@foreign
func glTransformFeedbackAttribsNV(count: GLsizei, attribs: GLint*, bufferMode: GLenum);

@foreign
func glBindBufferRangeNV(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);

@foreign
func glBindBufferOffsetNV(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr);

@foreign
func glBindBufferBaseNV(target: GLenum, index: GLuint, buffer: GLuint);

@foreign
func glTransformFeedbackVaryingsNV(program: GLuint, count: GLsizei, locations: GLint*, bufferMode: GLenum);

@foreign
func glActiveVaryingNV(program: GLuint, name: GLchar*);

@foreign
func glGetVaryingLocationNV(program: GLuint, name: GLchar*): GLint;

@foreign
func glGetActiveVaryingNV(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLsizei*, type: GLenum*, name: GLchar*);

@foreign
func glGetTransformFeedbackVaryingNV(program: GLuint, index: GLuint, location: GLint*);

@foreign
func glTransformFeedbackStreamAttribsNV(count: GLsizei, attribs: GLint*, nbuffers: GLsizei, bufstreams: GLint*, bufferMode: GLenum);

@foreign
typedef PFNGLBINDTRANSFORMFEEDBACKNVPROC = func(target: GLenum, id: GLuint);

@foreign
typedef PFNGLDELETETRANSFORMFEEDBACKSNVPROC = func(n: GLsizei, ids: GLuint*);

@foreign
typedef PFNGLGENTRANSFORMFEEDBACKSNVPROC = func(n: GLsizei, ids: GLuint*);

@foreign
typedef PFNGLISTRANSFORMFEEDBACKNVPROC = func(id: GLuint): GLboolean;

@foreign
typedef PFNGLPAUSETRANSFORMFEEDBACKNVPROC = func();

@foreign
typedef PFNGLRESUMETRANSFORMFEEDBACKNVPROC = func();

@foreign
typedef PFNGLDRAWTRANSFORMFEEDBACKNVPROC = func(mode: GLenum, id: GLuint);

@foreign
func glBindTransformFeedbackNV(target: GLenum, id: GLuint);

@foreign
func glDeleteTransformFeedbacksNV(n: GLsizei, ids: GLuint*);

@foreign
func glGenTransformFeedbacksNV(n: GLsizei, ids: GLuint*);

@foreign
func glIsTransformFeedbackNV(id: GLuint): GLboolean;

@foreign
func glPauseTransformFeedbackNV();

@foreign
func glResumeTransformFeedbackNV();

@foreign
func glDrawTransformFeedbackNV(mode: GLenum, id: GLuint);

@foreign
typedef GLvdpauSurfaceNV = GLintptr;

@foreign
typedef PFNGLVDPAUINITNVPROC = func(vdpDevice: void const*, getProcAddress: void const*);

@foreign
typedef PFNGLVDPAUFININVPROC = func();

@foreign
typedef PFNGLVDPAUREGISTERVIDEOSURFACENVPROC = func(vdpSurface: void const*, target: GLenum, numTextureNames: GLsizei, textureNames: GLuint*): GLvdpauSurfaceNV;

@foreign
typedef PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC = func(vdpSurface: void const*, target: GLenum, numTextureNames: GLsizei, textureNames: GLuint*): GLvdpauSurfaceNV;

@foreign
typedef PFNGLVDPAUISSURFACENVPROC = func(surface: GLvdpauSurfaceNV): GLboolean;

@foreign
typedef PFNGLVDPAUUNREGISTERSURFACENVPROC = func(surface: GLvdpauSurfaceNV);

@foreign
typedef PFNGLVDPAUGETSURFACEIVNVPROC = func(surface: GLvdpauSurfaceNV, pname: GLenum, bufSize: GLsizei, length: GLsizei*, values: GLint*);

@foreign
typedef PFNGLVDPAUSURFACEACCESSNVPROC = func(surface: GLvdpauSurfaceNV, access: GLenum);

@foreign
typedef PFNGLVDPAUMAPSURFACESNVPROC = func(numSurfaces: GLsizei, surfaces: GLvdpauSurfaceNV*);

@foreign
typedef PFNGLVDPAUUNMAPSURFACESNVPROC = func(numSurface: GLsizei, surfaces: GLvdpauSurfaceNV*);

@foreign
func glVDPAUInitNV(vdpDevice: void const*, getProcAddress: void const*);

@foreign
func glVDPAUFiniNV();

@foreign
func glVDPAURegisterVideoSurfaceNV(vdpSurface: void const*, target: GLenum, numTextureNames: GLsizei, textureNames: GLuint*): GLvdpauSurfaceNV;

@foreign
func glVDPAURegisterOutputSurfaceNV(vdpSurface: void const*, target: GLenum, numTextureNames: GLsizei, textureNames: GLuint*): GLvdpauSurfaceNV;

@foreign
func glVDPAUIsSurfaceNV(surface: GLvdpauSurfaceNV): GLboolean;

@foreign
func glVDPAUUnregisterSurfaceNV(surface: GLvdpauSurfaceNV);

@foreign
func glVDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV, pname: GLenum, bufSize: GLsizei, length: GLsizei*, values: GLint*);

@foreign
func glVDPAUSurfaceAccessNV(surface: GLvdpauSurfaceNV, access: GLenum);

@foreign
func glVDPAUMapSurfacesNV(numSurfaces: GLsizei, surfaces: GLvdpauSurfaceNV*);

@foreign
func glVDPAUUnmapSurfacesNV(numSurface: GLsizei, surfaces: GLvdpauSurfaceNV*);

@foreign
typedef PFNGLFLUSHVERTEXARRAYRANGENVPROC = func();

@foreign
typedef PFNGLVERTEXARRAYRANGENVPROC = func(length: GLsizei, pointer: void const*);

@foreign
func glFlushVertexArrayRangeNV();

@foreign
func glVertexArrayRangeNV(length: GLsizei, pointer: void const*);

@foreign
typedef PFNGLVERTEXATTRIBL1I64NVPROC = func(index: GLuint, x: GLint64EXT);

@foreign
typedef PFNGLVERTEXATTRIBL2I64NVPROC = func(index: GLuint, x: GLint64EXT, y: GLint64EXT);

@foreign
typedef PFNGLVERTEXATTRIBL3I64NVPROC = func(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT);

@foreign
typedef PFNGLVERTEXATTRIBL4I64NVPROC = func(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT);

@foreign
typedef PFNGLVERTEXATTRIBL1I64VNVPROC = func(index: GLuint, v: GLint64EXT*);

@foreign
typedef PFNGLVERTEXATTRIBL2I64VNVPROC = func(index: GLuint, v: GLint64EXT*);

@foreign
typedef PFNGLVERTEXATTRIBL3I64VNVPROC = func(index: GLuint, v: GLint64EXT*);

@foreign
typedef PFNGLVERTEXATTRIBL4I64VNVPROC = func(index: GLuint, v: GLint64EXT*);

@foreign
typedef PFNGLVERTEXATTRIBL1UI64NVPROC = func(index: GLuint, x: GLuint64EXT);

@foreign
typedef PFNGLVERTEXATTRIBL2UI64NVPROC = func(index: GLuint, x: GLuint64EXT, y: GLuint64EXT);

@foreign
typedef PFNGLVERTEXATTRIBL3UI64NVPROC = func(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT);

@foreign
typedef PFNGLVERTEXATTRIBL4UI64NVPROC = func(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT);

@foreign
typedef PFNGLVERTEXATTRIBL1UI64VNVPROC = func(index: GLuint, v: GLuint64EXT*);

@foreign
typedef PFNGLVERTEXATTRIBL2UI64VNVPROC = func(index: GLuint, v: GLuint64EXT*);

@foreign
typedef PFNGLVERTEXATTRIBL3UI64VNVPROC = func(index: GLuint, v: GLuint64EXT*);

@foreign
typedef PFNGLVERTEXATTRIBL4UI64VNVPROC = func(index: GLuint, v: GLuint64EXT*);

@foreign
typedef PFNGLGETVERTEXATTRIBLI64VNVPROC = func(index: GLuint, pname: GLenum, params: GLint64EXT*);

@foreign
typedef PFNGLGETVERTEXATTRIBLUI64VNVPROC = func(index: GLuint, pname: GLenum, params: GLuint64EXT*);

@foreign
typedef PFNGLVERTEXATTRIBLFORMATNVPROC = func(index: GLuint, size: GLint, type: GLenum, stride: GLsizei);

@foreign
func glVertexAttribL1i64NV(index: GLuint, x: GLint64EXT);

@foreign
func glVertexAttribL2i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT);

@foreign
func glVertexAttribL3i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT);

@foreign
func glVertexAttribL4i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT);

@foreign
func glVertexAttribL1i64vNV(index: GLuint, v: GLint64EXT*);

@foreign
func glVertexAttribL2i64vNV(index: GLuint, v: GLint64EXT*);

@foreign
func glVertexAttribL3i64vNV(index: GLuint, v: GLint64EXT*);

@foreign
func glVertexAttribL4i64vNV(index: GLuint, v: GLint64EXT*);

@foreign
func glVertexAttribL1ui64NV(index: GLuint, x: GLuint64EXT);

@foreign
func glVertexAttribL2ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT);

@foreign
func glVertexAttribL3ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT);

@foreign
func glVertexAttribL4ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT);

@foreign
func glVertexAttribL1ui64vNV(index: GLuint, v: GLuint64EXT*);

@foreign
func glVertexAttribL2ui64vNV(index: GLuint, v: GLuint64EXT*);

@foreign
func glVertexAttribL3ui64vNV(index: GLuint, v: GLuint64EXT*);

@foreign
func glVertexAttribL4ui64vNV(index: GLuint, v: GLuint64EXT*);

@foreign
func glGetVertexAttribLi64vNV(index: GLuint, pname: GLenum, params: GLint64EXT*);

@foreign
func glGetVertexAttribLui64vNV(index: GLuint, pname: GLenum, params: GLuint64EXT*);

@foreign
func glVertexAttribLFormatNV(index: GLuint, size: GLint, type: GLenum, stride: GLsizei);

@foreign
typedef PFNGLBUFFERADDRESSRANGENVPROC = func(pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr);

@foreign
typedef PFNGLVERTEXFORMATNVPROC = func(size: GLint, type: GLenum, stride: GLsizei);

@foreign
typedef PFNGLNORMALFORMATNVPROC = func(type: GLenum, stride: GLsizei);

@foreign
typedef PFNGLCOLORFORMATNVPROC = func(size: GLint, type: GLenum, stride: GLsizei);

@foreign
typedef PFNGLINDEXFORMATNVPROC = func(type: GLenum, stride: GLsizei);

@foreign
typedef PFNGLTEXCOORDFORMATNVPROC = func(size: GLint, type: GLenum, stride: GLsizei);

@foreign
typedef PFNGLEDGEFLAGFORMATNVPROC = func(stride: GLsizei);

@foreign
typedef PFNGLSECONDARYCOLORFORMATNVPROC = func(size: GLint, type: GLenum, stride: GLsizei);

@foreign
typedef PFNGLFOGCOORDFORMATNVPROC = func(type: GLenum, stride: GLsizei);

@foreign
typedef PFNGLVERTEXATTRIBFORMATNVPROC = func(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei);

@foreign
typedef PFNGLVERTEXATTRIBIFORMATNVPROC = func(index: GLuint, size: GLint, type: GLenum, stride: GLsizei);

@foreign
typedef PFNGLGETINTEGERUI64I_VNVPROC = func(value: GLenum, index: GLuint, result: GLuint64EXT*);

@foreign
func glBufferAddressRangeNV(pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr);

@foreign
func glVertexFormatNV(size: GLint, type: GLenum, stride: GLsizei);

@foreign
func glNormalFormatNV(type: GLenum, stride: GLsizei);

@foreign
func glColorFormatNV(size: GLint, type: GLenum, stride: GLsizei);

@foreign
func glIndexFormatNV(type: GLenum, stride: GLsizei);

@foreign
func glTexCoordFormatNV(size: GLint, type: GLenum, stride: GLsizei);

@foreign
func glEdgeFlagFormatNV(stride: GLsizei);

@foreign
func glSecondaryColorFormatNV(size: GLint, type: GLenum, stride: GLsizei);

@foreign
func glFogCoordFormatNV(type: GLenum, stride: GLsizei);

@foreign
func glVertexAttribFormatNV(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei);

@foreign
func glVertexAttribIFormatNV(index: GLuint, size: GLint, type: GLenum, stride: GLsizei);

@foreign
func glGetIntegerui64i_vNV(value: GLenum, index: GLuint, result: GLuint64EXT*);

@foreign
typedef PFNGLAREPROGRAMSRESIDENTNVPROC = func(n: GLsizei, programs: GLuint*, residences: GLboolean*): GLboolean;

@foreign
typedef PFNGLBINDPROGRAMNVPROC = func(target: GLenum, id: GLuint);

@foreign
typedef PFNGLDELETEPROGRAMSNVPROC = func(n: GLsizei, programs: GLuint*);

@foreign
typedef PFNGLEXECUTEPROGRAMNVPROC = func(target: GLenum, id: GLuint, params: GLfloat*);

@foreign
typedef PFNGLGENPROGRAMSNVPROC = func(n: GLsizei, programs: GLuint*);

@foreign
typedef PFNGLGETPROGRAMPARAMETERDVNVPROC = func(target: GLenum, index: GLuint, pname: GLenum, params: GLdouble*);

@foreign
typedef PFNGLGETPROGRAMPARAMETERFVNVPROC = func(target: GLenum, index: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETPROGRAMIVNVPROC = func(id: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETPROGRAMSTRINGNVPROC = func(id: GLuint, pname: GLenum, program: GLubyte*);

@foreign
typedef PFNGLGETTRACKMATRIXIVNVPROC = func(target: GLenum, address: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETVERTEXATTRIBDVNVPROC = func(index: GLuint, pname: GLenum, params: GLdouble*);

@foreign
typedef PFNGLGETVERTEXATTRIBFVNVPROC = func(index: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETVERTEXATTRIBIVNVPROC = func(index: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETVERTEXATTRIBPOINTERVNVPROC = func(index: GLuint, pname: GLenum, pointer: void**);

@foreign
typedef PFNGLISPROGRAMNVPROC = func(id: GLuint): GLboolean;

@foreign
typedef PFNGLLOADPROGRAMNVPROC = func(target: GLenum, id: GLuint, len: GLsizei, program: GLubyte*);

@foreign
typedef PFNGLPROGRAMPARAMETER4DNVPROC = func(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLPROGRAMPARAMETER4DVNVPROC = func(target: GLenum, index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLPROGRAMPARAMETER4FNVPROC = func(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
typedef PFNGLPROGRAMPARAMETER4FVNVPROC = func(target: GLenum, index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLPROGRAMPARAMETERS4DVNVPROC = func(target: GLenum, index: GLuint, count: GLsizei, v: GLdouble*);

@foreign
typedef PFNGLPROGRAMPARAMETERS4FVNVPROC = func(target: GLenum, index: GLuint, count: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLREQUESTRESIDENTPROGRAMSNVPROC = func(n: GLsizei, programs: GLuint*);

@foreign
typedef PFNGLTRACKMATRIXNVPROC = func(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum);

@foreign
typedef PFNGLVERTEXATTRIBPOINTERNVPROC = func(index: GLuint, fsize: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLVERTEXATTRIB1DNVPROC = func(index: GLuint, x: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIB1DVNVPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIB1FNVPROC = func(index: GLuint, x: GLfloat);

@foreign
typedef PFNGLVERTEXATTRIB1FVNVPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIB1SNVPROC = func(index: GLuint, x: GLshort);

@foreign
typedef PFNGLVERTEXATTRIB1SVNVPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB2DNVPROC = func(index: GLuint, x: GLdouble, y: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIB2DVNVPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIB2FNVPROC = func(index: GLuint, x: GLfloat, y: GLfloat);

@foreign
typedef PFNGLVERTEXATTRIB2FVNVPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIB2SNVPROC = func(index: GLuint, x: GLshort, y: GLshort);

@foreign
typedef PFNGLVERTEXATTRIB2SVNVPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB3DNVPROC = func(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIB3DVNVPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIB3FNVPROC = func(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLVERTEXATTRIB3FVNVPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIB3SNVPROC = func(index: GLuint, x: GLshort, y: GLshort, z: GLshort);

@foreign
typedef PFNGLVERTEXATTRIB3SVNVPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB4DNVPROC = func(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
typedef PFNGLVERTEXATTRIB4DVNVPROC = func(index: GLuint, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIB4FNVPROC = func(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
typedef PFNGLVERTEXATTRIB4FVNVPROC = func(index: GLuint, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIB4SNVPROC = func(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);

@foreign
typedef PFNGLVERTEXATTRIB4SVNVPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIB4UBNVPROC = func(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);

@foreign
typedef PFNGLVERTEXATTRIB4UBVNVPROC = func(index: GLuint, v: GLubyte*);

@foreign
typedef PFNGLVERTEXATTRIBS1DVNVPROC = func(index: GLuint, count: GLsizei, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIBS1FVNVPROC = func(index: GLuint, count: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIBS1SVNVPROC = func(index: GLuint, count: GLsizei, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIBS2DVNVPROC = func(index: GLuint, count: GLsizei, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIBS2FVNVPROC = func(index: GLuint, count: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIBS2SVNVPROC = func(index: GLuint, count: GLsizei, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIBS3DVNVPROC = func(index: GLuint, count: GLsizei, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIBS3FVNVPROC = func(index: GLuint, count: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIBS3SVNVPROC = func(index: GLuint, count: GLsizei, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIBS4DVNVPROC = func(index: GLuint, count: GLsizei, v: GLdouble*);

@foreign
typedef PFNGLVERTEXATTRIBS4FVNVPROC = func(index: GLuint, count: GLsizei, v: GLfloat*);

@foreign
typedef PFNGLVERTEXATTRIBS4SVNVPROC = func(index: GLuint, count: GLsizei, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIBS4UBVNVPROC = func(index: GLuint, count: GLsizei, v: GLubyte*);

@foreign
func glAreProgramsResidentNV(n: GLsizei, programs: GLuint*, residences: GLboolean*): GLboolean;

@foreign
func glBindProgramNV(target: GLenum, id: GLuint);

@foreign
func glDeleteProgramsNV(n: GLsizei, programs: GLuint*);

@foreign
func glExecuteProgramNV(target: GLenum, id: GLuint, params: GLfloat*);

@foreign
func glGenProgramsNV(n: GLsizei, programs: GLuint*);

@foreign
func glGetProgramParameterdvNV(target: GLenum, index: GLuint, pname: GLenum, params: GLdouble*);

@foreign
func glGetProgramParameterfvNV(target: GLenum, index: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glGetProgramivNV(id: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetProgramStringNV(id: GLuint, pname: GLenum, program: GLubyte*);

@foreign
func glGetTrackMatrixivNV(target: GLenum, address: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetVertexAttribdvNV(index: GLuint, pname: GLenum, params: GLdouble*);

@foreign
func glGetVertexAttribfvNV(index: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glGetVertexAttribivNV(index: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetVertexAttribPointervNV(index: GLuint, pname: GLenum, pointer: void**);

@foreign
func glIsProgramNV(id: GLuint): GLboolean;

@foreign
func glLoadProgramNV(target: GLenum, id: GLuint, len: GLsizei, program: GLubyte*);

@foreign
func glProgramParameter4dNV(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glProgramParameter4dvNV(target: GLenum, index: GLuint, v: GLdouble*);

@foreign
func glProgramParameter4fNV(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glProgramParameter4fvNV(target: GLenum, index: GLuint, v: GLfloat*);

@foreign
func glProgramParameters4dvNV(target: GLenum, index: GLuint, count: GLsizei, v: GLdouble*);

@foreign
func glProgramParameters4fvNV(target: GLenum, index: GLuint, count: GLsizei, v: GLfloat*);

@foreign
func glRequestResidentProgramsNV(n: GLsizei, programs: GLuint*);

@foreign
func glTrackMatrixNV(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum);

@foreign
func glVertexAttribPointerNV(index: GLuint, fsize: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glVertexAttrib1dNV(index: GLuint, x: GLdouble);

@foreign
func glVertexAttrib1dvNV(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttrib1fNV(index: GLuint, x: GLfloat);

@foreign
func glVertexAttrib1fvNV(index: GLuint, v: GLfloat*);

@foreign
func glVertexAttrib1sNV(index: GLuint, x: GLshort);

@foreign
func glVertexAttrib1svNV(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib2dNV(index: GLuint, x: GLdouble, y: GLdouble);

@foreign
func glVertexAttrib2dvNV(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttrib2fNV(index: GLuint, x: GLfloat, y: GLfloat);

@foreign
func glVertexAttrib2fvNV(index: GLuint, v: GLfloat*);

@foreign
func glVertexAttrib2sNV(index: GLuint, x: GLshort, y: GLshort);

@foreign
func glVertexAttrib2svNV(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib3dNV(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);

@foreign
func glVertexAttrib3dvNV(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttrib3fNV(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glVertexAttrib3fvNV(index: GLuint, v: GLfloat*);

@foreign
func glVertexAttrib3sNV(index: GLuint, x: GLshort, y: GLshort, z: GLshort);

@foreign
func glVertexAttrib3svNV(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib4dNV(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);

@foreign
func glVertexAttrib4dvNV(index: GLuint, v: GLdouble*);

@foreign
func glVertexAttrib4fNV(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glVertexAttrib4fvNV(index: GLuint, v: GLfloat*);

@foreign
func glVertexAttrib4sNV(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);

@foreign
func glVertexAttrib4svNV(index: GLuint, v: GLshort*);

@foreign
func glVertexAttrib4ubNV(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);

@foreign
func glVertexAttrib4ubvNV(index: GLuint, v: GLubyte*);

@foreign
func glVertexAttribs1dvNV(index: GLuint, count: GLsizei, v: GLdouble*);

@foreign
func glVertexAttribs1fvNV(index: GLuint, count: GLsizei, v: GLfloat*);

@foreign
func glVertexAttribs1svNV(index: GLuint, count: GLsizei, v: GLshort*);

@foreign
func glVertexAttribs2dvNV(index: GLuint, count: GLsizei, v: GLdouble*);

@foreign
func glVertexAttribs2fvNV(index: GLuint, count: GLsizei, v: GLfloat*);

@foreign
func glVertexAttribs2svNV(index: GLuint, count: GLsizei, v: GLshort*);

@foreign
func glVertexAttribs3dvNV(index: GLuint, count: GLsizei, v: GLdouble*);

@foreign
func glVertexAttribs3fvNV(index: GLuint, count: GLsizei, v: GLfloat*);

@foreign
func glVertexAttribs3svNV(index: GLuint, count: GLsizei, v: GLshort*);

@foreign
func glVertexAttribs4dvNV(index: GLuint, count: GLsizei, v: GLdouble*);

@foreign
func glVertexAttribs4fvNV(index: GLuint, count: GLsizei, v: GLfloat*);

@foreign
func glVertexAttribs4svNV(index: GLuint, count: GLsizei, v: GLshort*);

@foreign
func glVertexAttribs4ubvNV(index: GLuint, count: GLsizei, v: GLubyte*);

@foreign
typedef PFNGLVERTEXATTRIBI1IEXTPROC = func(index: GLuint, x: GLint);

@foreign
typedef PFNGLVERTEXATTRIBI2IEXTPROC = func(index: GLuint, x: GLint, y: GLint);

@foreign
typedef PFNGLVERTEXATTRIBI3IEXTPROC = func(index: GLuint, x: GLint, y: GLint, z: GLint);

@foreign
typedef PFNGLVERTEXATTRIBI4IEXTPROC = func(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
typedef PFNGLVERTEXATTRIBI1UIEXTPROC = func(index: GLuint, x: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBI2UIEXTPROC = func(index: GLuint, x: GLuint, y: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBI3UIEXTPROC = func(index: GLuint, x: GLuint, y: GLuint, z: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBI4UIEXTPROC = func(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);

@foreign
typedef PFNGLVERTEXATTRIBI1IVEXTPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLVERTEXATTRIBI2IVEXTPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLVERTEXATTRIBI3IVEXTPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLVERTEXATTRIBI4IVEXTPROC = func(index: GLuint, v: GLint*);

@foreign
typedef PFNGLVERTEXATTRIBI1UIVEXTPROC = func(index: GLuint, v: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIBI2UIVEXTPROC = func(index: GLuint, v: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIBI3UIVEXTPROC = func(index: GLuint, v: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIBI4UIVEXTPROC = func(index: GLuint, v: GLuint*);

@foreign
typedef PFNGLVERTEXATTRIBI4BVEXTPROC = func(index: GLuint, v: GLbyte*);

@foreign
typedef PFNGLVERTEXATTRIBI4SVEXTPROC = func(index: GLuint, v: GLshort*);

@foreign
typedef PFNGLVERTEXATTRIBI4UBVEXTPROC = func(index: GLuint, v: GLubyte*);

@foreign
typedef PFNGLVERTEXATTRIBI4USVEXTPROC = func(index: GLuint, v: GLushort*);

@foreign
typedef PFNGLVERTEXATTRIBIPOINTEREXTPROC = func(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
typedef PFNGLGETVERTEXATTRIBIIVEXTPROC = func(index: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETVERTEXATTRIBIUIVEXTPROC = func(index: GLuint, pname: GLenum, params: GLuint*);

@foreign
func glVertexAttribI1iEXT(index: GLuint, x: GLint);

@foreign
func glVertexAttribI2iEXT(index: GLuint, x: GLint, y: GLint);

@foreign
func glVertexAttribI3iEXT(index: GLuint, x: GLint, y: GLint, z: GLint);

@foreign
func glVertexAttribI4iEXT(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);

@foreign
func glVertexAttribI1uiEXT(index: GLuint, x: GLuint);

@foreign
func glVertexAttribI2uiEXT(index: GLuint, x: GLuint, y: GLuint);

@foreign
func glVertexAttribI3uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint);

@foreign
func glVertexAttribI4uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);

@foreign
func glVertexAttribI1ivEXT(index: GLuint, v: GLint*);

@foreign
func glVertexAttribI2ivEXT(index: GLuint, v: GLint*);

@foreign
func glVertexAttribI3ivEXT(index: GLuint, v: GLint*);

@foreign
func glVertexAttribI4ivEXT(index: GLuint, v: GLint*);

@foreign
func glVertexAttribI1uivEXT(index: GLuint, v: GLuint*);

@foreign
func glVertexAttribI2uivEXT(index: GLuint, v: GLuint*);

@foreign
func glVertexAttribI3uivEXT(index: GLuint, v: GLuint*);

@foreign
func glVertexAttribI4uivEXT(index: GLuint, v: GLuint*);

@foreign
func glVertexAttribI4bvEXT(index: GLuint, v: GLbyte*);

@foreign
func glVertexAttribI4svEXT(index: GLuint, v: GLshort*);

@foreign
func glVertexAttribI4ubvEXT(index: GLuint, v: GLubyte*);

@foreign
func glVertexAttribI4usvEXT(index: GLuint, v: GLushort*);

@foreign
func glVertexAttribIPointerEXT(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: void const*);

@foreign
func glGetVertexAttribIivEXT(index: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetVertexAttribIuivEXT(index: GLuint, pname: GLenum, params: GLuint*);

@foreign
typedef PFNGLBEGINVIDEOCAPTURENVPROC = func(video_capture_slot: GLuint);

@foreign
typedef PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC = func(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB);

@foreign
typedef PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC = func(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint);

@foreign
typedef PFNGLENDVIDEOCAPTURENVPROC = func(video_capture_slot: GLuint);

@foreign
typedef PFNGLGETVIDEOCAPTUREIVNVPROC = func(video_capture_slot: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETVIDEOCAPTURESTREAMIVNVPROC = func(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETVIDEOCAPTURESTREAMFVNVPROC = func(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETVIDEOCAPTURESTREAMDVNVPROC = func(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLdouble*);

@foreign
typedef PFNGLVIDEOCAPTURENVPROC = func(video_capture_slot: GLuint, sequence_num: GLuint*, capture_time: GLuint64EXT*): GLenum;

@foreign
typedef PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC = func(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC = func(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC = func(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLdouble*);

@foreign
func glBeginVideoCaptureNV(video_capture_slot: GLuint);

@foreign
func glBindVideoCaptureStreamBufferNV(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB);

@foreign
func glBindVideoCaptureStreamTextureNV(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint);

@foreign
func glEndVideoCaptureNV(video_capture_slot: GLuint);

@foreign
func glGetVideoCaptureivNV(video_capture_slot: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetVideoCaptureStreamivNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetVideoCaptureStreamfvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glGetVideoCaptureStreamdvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLdouble*);

@foreign
func glVideoCaptureNV(video_capture_slot: GLuint, sequence_num: GLuint*, capture_time: GLuint64EXT*): GLenum;

@foreign
func glVideoCaptureStreamParameterivNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLint*);

@foreign
func glVideoCaptureStreamParameterfvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glVideoCaptureStreamParameterdvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: GLdouble*);

@foreign
typedef PFNGLVIEWPORTSWIZZLENVPROC = func(index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum);

@foreign
func glViewportSwizzleNV(index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum);

@foreign
typedef PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = func(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei);

@foreign
func glFramebufferTextureMultiviewOVR(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei);

@foreign
typedef PFNGLHINTPGIPROC = func(target: GLenum, mode: GLint);

@foreign
func glHintPGI(target: GLenum, mode: GLint);

@foreign
typedef PFNGLDETAILTEXFUNCSGISPROC = func(target: GLenum, n: GLsizei, points: GLfloat*);

@foreign
typedef PFNGLGETDETAILTEXFUNCSGISPROC = func(target: GLenum, points: GLfloat*);

@foreign
func glDetailTexFuncSGIS(target: GLenum, n: GLsizei, points: GLfloat*);

@foreign
func glGetDetailTexFuncSGIS(target: GLenum, points: GLfloat*);

@foreign
typedef PFNGLFOGFUNCSGISPROC = func(n: GLsizei, points: GLfloat*);

@foreign
typedef PFNGLGETFOGFUNCSGISPROC = func(points: GLfloat*);

@foreign
func glFogFuncSGIS(n: GLsizei, points: GLfloat*);

@foreign
func glGetFogFuncSGIS(points: GLfloat*);

@foreign
typedef PFNGLSAMPLEMASKSGISPROC = func(value: GLclampf, invert: GLboolean);

@foreign
typedef PFNGLSAMPLEPATTERNSGISPROC = func(pattern: GLenum);

@foreign
func glSampleMaskSGIS(value: GLclampf, invert: GLboolean);

@foreign
func glSamplePatternSGIS(pattern: GLenum);

@foreign
typedef PFNGLPIXELTEXGENPARAMETERISGISPROC = func(pname: GLenum, param: GLint);

@foreign
typedef PFNGLPIXELTEXGENPARAMETERIVSGISPROC = func(pname: GLenum, params: GLint*);

@foreign
typedef PFNGLPIXELTEXGENPARAMETERFSGISPROC = func(pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLPIXELTEXGENPARAMETERFVSGISPROC = func(pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC = func(pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC = func(pname: GLenum, params: GLfloat*);

@foreign
func glPixelTexGenParameteriSGIS(pname: GLenum, param: GLint);

@foreign
func glPixelTexGenParameterivSGIS(pname: GLenum, params: GLint*);

@foreign
func glPixelTexGenParameterfSGIS(pname: GLenum, param: GLfloat);

@foreign
func glPixelTexGenParameterfvSGIS(pname: GLenum, params: GLfloat*);

@foreign
func glGetPixelTexGenParameterivSGIS(pname: GLenum, params: GLint*);

@foreign
func glGetPixelTexGenParameterfvSGIS(pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLPOINTPARAMETERFSGISPROC = func(pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLPOINTPARAMETERFVSGISPROC = func(pname: GLenum, params: GLfloat*);

@foreign
func glPointParameterfSGIS(pname: GLenum, param: GLfloat);

@foreign
func glPointParameterfvSGIS(pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLSHARPENTEXFUNCSGISPROC = func(target: GLenum, n: GLsizei, points: GLfloat*);

@foreign
typedef PFNGLGETSHARPENTEXFUNCSGISPROC = func(target: GLenum, points: GLfloat*);

@foreign
func glSharpenTexFuncSGIS(target: GLenum, n: GLsizei, points: GLfloat*);

@foreign
func glGetSharpenTexFuncSGIS(target: GLenum, points: GLfloat*);

@foreign
typedef PFNGLTEXIMAGE4DSGISPROC = func(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXSUBIMAGE4DSGISPROC = func(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTexImage4DSGIS(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
func glTexSubImage4DSGIS(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXTURECOLORMASKSGISPROC = func(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean);

@foreign
func glTextureColorMaskSGIS(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean);

@foreign
typedef PFNGLGETTEXFILTERFUNCSGISPROC = func(target: GLenum, filter: GLenum, weights: GLfloat*);

@foreign
typedef PFNGLTEXFILTERFUNCSGISPROC = func(target: GLenum, filter: GLenum, n: GLsizei, weights: GLfloat*);

@foreign
func glGetTexFilterFuncSGIS(target: GLenum, filter: GLenum, weights: GLfloat*);

@foreign
func glTexFilterFuncSGIS(target: GLenum, filter: GLenum, n: GLsizei, weights: GLfloat*);

@foreign
typedef PFNGLASYNCMARKERSGIXPROC = func(marker: GLuint);

@foreign
typedef PFNGLFINISHASYNCSGIXPROC = func(markerp: GLuint*): GLint;

@foreign
typedef PFNGLPOLLASYNCSGIXPROC = func(markerp: GLuint*): GLint;

@foreign
typedef PFNGLGENASYNCMARKERSSGIXPROC = func(range: GLsizei): GLuint;

@foreign
typedef PFNGLDELETEASYNCMARKERSSGIXPROC = func(marker: GLuint, range: GLsizei);

@foreign
typedef PFNGLISASYNCMARKERSGIXPROC = func(marker: GLuint): GLboolean;

@foreign
func glAsyncMarkerSGIX(marker: GLuint);

@foreign
func glFinishAsyncSGIX(markerp: GLuint*): GLint;

@foreign
func glPollAsyncSGIX(markerp: GLuint*): GLint;

@foreign
func glGenAsyncMarkersSGIX(range: GLsizei): GLuint;

@foreign
func glDeleteAsyncMarkersSGIX(marker: GLuint, range: GLsizei);

@foreign
func glIsAsyncMarkerSGIX(marker: GLuint): GLboolean;

@foreign
typedef PFNGLFLUSHRASTERSGIXPROC = func();

@foreign
func glFlushRasterSGIX();

@foreign
typedef PFNGLFRAGMENTCOLORMATERIALSGIXPROC = func(face: GLenum, mode: GLenum);

@foreign
typedef PFNGLFRAGMENTLIGHTFSGIXPROC = func(light: GLenum, pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLFRAGMENTLIGHTFVSGIXPROC = func(light: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLFRAGMENTLIGHTISGIXPROC = func(light: GLenum, pname: GLenum, param: GLint);

@foreign
typedef PFNGLFRAGMENTLIGHTIVSGIXPROC = func(light: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLFRAGMENTLIGHTMODELFSGIXPROC = func(pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLFRAGMENTLIGHTMODELFVSGIXPROC = func(pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLFRAGMENTLIGHTMODELISGIXPROC = func(pname: GLenum, param: GLint);

@foreign
typedef PFNGLFRAGMENTLIGHTMODELIVSGIXPROC = func(pname: GLenum, params: GLint*);

@foreign
typedef PFNGLFRAGMENTMATERIALFSGIXPROC = func(face: GLenum, pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLFRAGMENTMATERIALFVSGIXPROC = func(face: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLFRAGMENTMATERIALISGIXPROC = func(face: GLenum, pname: GLenum, param: GLint);

@foreign
typedef PFNGLFRAGMENTMATERIALIVSGIXPROC = func(face: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETFRAGMENTLIGHTFVSGIXPROC = func(light: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETFRAGMENTLIGHTIVSGIXPROC = func(light: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETFRAGMENTMATERIALFVSGIXPROC = func(face: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETFRAGMENTMATERIALIVSGIXPROC = func(face: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLLIGHTENVISGIXPROC = func(pname: GLenum, param: GLint);

@foreign
func glFragmentColorMaterialSGIX(face: GLenum, mode: GLenum);

@foreign
func glFragmentLightfSGIX(light: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glFragmentLightfvSGIX(light: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glFragmentLightiSGIX(light: GLenum, pname: GLenum, param: GLint);

@foreign
func glFragmentLightivSGIX(light: GLenum, pname: GLenum, params: GLint*);

@foreign
func glFragmentLightModelfSGIX(pname: GLenum, param: GLfloat);

@foreign
func glFragmentLightModelfvSGIX(pname: GLenum, params: GLfloat*);

@foreign
func glFragmentLightModeliSGIX(pname: GLenum, param: GLint);

@foreign
func glFragmentLightModelivSGIX(pname: GLenum, params: GLint*);

@foreign
func glFragmentMaterialfSGIX(face: GLenum, pname: GLenum, param: GLfloat);

@foreign
func glFragmentMaterialfvSGIX(face: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glFragmentMaterialiSGIX(face: GLenum, pname: GLenum, param: GLint);

@foreign
func glFragmentMaterialivSGIX(face: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetFragmentLightfvSGIX(light: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetFragmentLightivSGIX(light: GLenum, pname: GLenum, params: GLint*);

@foreign
func glGetFragmentMaterialfvSGIX(face: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetFragmentMaterialivSGIX(face: GLenum, pname: GLenum, params: GLint*);

@foreign
func glLightEnviSGIX(pname: GLenum, param: GLint);

@foreign
typedef PFNGLFRAMEZOOMSGIXPROC = func(factor: GLint);

@foreign
func glFrameZoomSGIX(factor: GLint);

@foreign
typedef PFNGLIGLOOINTERFACESGIXPROC = func(pname: GLenum, params: void const*);

@foreign
func glIglooInterfaceSGIX(pname: GLenum, params: void const*);

@foreign
typedef PFNGLGETINSTRUMENTSSGIXPROC = func(): GLint;

@foreign
typedef PFNGLINSTRUMENTSBUFFERSGIXPROC = func(size: GLsizei, buffer: GLint*);

@foreign
typedef PFNGLPOLLINSTRUMENTSSGIXPROC = func(marker_p: GLint*): GLint;

@foreign
typedef PFNGLREADINSTRUMENTSSGIXPROC = func(marker: GLint);

@foreign
typedef PFNGLSTARTINSTRUMENTSSGIXPROC = func();

@foreign
typedef PFNGLSTOPINSTRUMENTSSGIXPROC = func(marker: GLint);

@foreign
func glGetInstrumentsSGIX(): GLint;

@foreign
func glInstrumentsBufferSGIX(size: GLsizei, buffer: GLint*);

@foreign
func glPollInstrumentsSGIX(marker_p: GLint*): GLint;

@foreign
func glReadInstrumentsSGIX(marker: GLint);

@foreign
func glStartInstrumentsSGIX();

@foreign
func glStopInstrumentsSGIX(marker: GLint);

@foreign
typedef PFNGLGETLISTPARAMETERFVSGIXPROC = func(list: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETLISTPARAMETERIVSGIXPROC = func(list: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLLISTPARAMETERFSGIXPROC = func(list: GLuint, pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLLISTPARAMETERFVSGIXPROC = func(list: GLuint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLLISTPARAMETERISGIXPROC = func(list: GLuint, pname: GLenum, param: GLint);

@foreign
typedef PFNGLLISTPARAMETERIVSGIXPROC = func(list: GLuint, pname: GLenum, params: GLint*);

@foreign
func glGetListParameterfvSGIX(list: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glGetListParameterivSGIX(list: GLuint, pname: GLenum, params: GLint*);

@foreign
func glListParameterfSGIX(list: GLuint, pname: GLenum, param: GLfloat);

@foreign
func glListParameterfvSGIX(list: GLuint, pname: GLenum, params: GLfloat*);

@foreign
func glListParameteriSGIX(list: GLuint, pname: GLenum, param: GLint);

@foreign
func glListParameterivSGIX(list: GLuint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLPIXELTEXGENSGIXPROC = func(mode: GLenum);

@foreign
func glPixelTexGenSGIX(mode: GLenum);

@foreign
typedef PFNGLDEFORMATIONMAP3DSGIXPROC = func(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: GLdouble*);

@foreign
typedef PFNGLDEFORMATIONMAP3FSGIXPROC = func(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: GLfloat*);

@foreign
typedef PFNGLDEFORMSGIXPROC = func(mask: GLbitfield);

@foreign
typedef PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC = func(mask: GLbitfield);

@foreign
func glDeformationMap3dSGIX(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: GLdouble*);

@foreign
func glDeformationMap3fSGIX(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: GLfloat*);

@foreign
func glDeformSGIX(mask: GLbitfield);

@foreign
func glLoadIdentityDeformationMapSGIX(mask: GLbitfield);

@foreign
typedef PFNGLREFERENCEPLANESGIXPROC = func(equation: GLdouble*);

@foreign
func glReferencePlaneSGIX(equation: GLdouble*);

@foreign
typedef PFNGLSPRITEPARAMETERFSGIXPROC = func(pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLSPRITEPARAMETERFVSGIXPROC = func(pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLSPRITEPARAMETERISGIXPROC = func(pname: GLenum, param: GLint);

@foreign
typedef PFNGLSPRITEPARAMETERIVSGIXPROC = func(pname: GLenum, params: GLint*);

@foreign
func glSpriteParameterfSGIX(pname: GLenum, param: GLfloat);

@foreign
func glSpriteParameterfvSGIX(pname: GLenum, params: GLfloat*);

@foreign
func glSpriteParameteriSGIX(pname: GLenum, param: GLint);

@foreign
func glSpriteParameterivSGIX(pname: GLenum, params: GLint*);

@foreign
typedef PFNGLTAGSAMPLEBUFFERSGIXPROC = func();

@foreign
func glTagSampleBufferSGIX();

@foreign
typedef PFNGLCOLORTABLESGIPROC = func(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: void const*);

@foreign
typedef PFNGLCOLORTABLEPARAMETERFVSGIPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLCOLORTABLEPARAMETERIVSGIPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLCOPYCOLORTABLESGIPROC = func(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei);

@foreign
typedef PFNGLGETCOLORTABLESGIPROC = func(target: GLenum, format: GLenum, type: GLenum, table: void*);

@foreign
typedef PFNGLGETCOLORTABLEPARAMETERFVSGIPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETCOLORTABLEPARAMETERIVSGIPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glColorTableSGI(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: void const*);

@foreign
func glColorTableParameterfvSGI(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glColorTableParameterivSGI(target: GLenum, pname: GLenum, params: GLint*);

@foreign
func glCopyColorTableSGI(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei);

@foreign
func glGetColorTableSGI(target: GLenum, format: GLenum, type: GLenum, table: void*);

@foreign
func glGetColorTableParameterfvSGI(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
func glGetColorTableParameterivSGI(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLFINISHTEXTURESUNXPROC = func();

@foreign
func glFinishTextureSUNX();

@foreign
typedef PFNGLGLOBALALPHAFACTORBSUNPROC = func(factor: GLbyte);

@foreign
typedef PFNGLGLOBALALPHAFACTORSSUNPROC = func(factor: GLshort);

@foreign
typedef PFNGLGLOBALALPHAFACTORISUNPROC = func(factor: GLint);

@foreign
typedef PFNGLGLOBALALPHAFACTORFSUNPROC = func(factor: GLfloat);

@foreign
typedef PFNGLGLOBALALPHAFACTORDSUNPROC = func(factor: GLdouble);

@foreign
typedef PFNGLGLOBALALPHAFACTORUBSUNPROC = func(factor: GLubyte);

@foreign
typedef PFNGLGLOBALALPHAFACTORUSSUNPROC = func(factor: GLushort);

@foreign
typedef PFNGLGLOBALALPHAFACTORUISUNPROC = func(factor: GLuint);

@foreign
func glGlobalAlphaFactorbSUN(factor: GLbyte);

@foreign
func glGlobalAlphaFactorsSUN(factor: GLshort);

@foreign
func glGlobalAlphaFactoriSUN(factor: GLint);

@foreign
func glGlobalAlphaFactorfSUN(factor: GLfloat);

@foreign
func glGlobalAlphaFactordSUN(factor: GLdouble);

@foreign
func glGlobalAlphaFactorubSUN(factor: GLubyte);

@foreign
func glGlobalAlphaFactorusSUN(factor: GLushort);

@foreign
func glGlobalAlphaFactoruiSUN(factor: GLuint);

@foreign
typedef PFNGLDRAWMESHARRAYSSUNPROC = func(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei);

@foreign
func glDrawMeshArraysSUN(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei);

@foreign
typedef PFNGLREPLACEMENTCODEUISUNPROC = func(code: GLuint);

@foreign
typedef PFNGLREPLACEMENTCODEUSSUNPROC = func(code: GLushort);

@foreign
typedef PFNGLREPLACEMENTCODEUBSUNPROC = func(code: GLubyte);

@foreign
typedef PFNGLREPLACEMENTCODEUIVSUNPROC = func(code: GLuint*);

@foreign
typedef PFNGLREPLACEMENTCODEUSVSUNPROC = func(code: GLushort*);

@foreign
typedef PFNGLREPLACEMENTCODEUBVSUNPROC = func(code: GLubyte*);

@foreign
typedef PFNGLREPLACEMENTCODEPOINTERSUNPROC = func(type: GLenum, stride: GLsizei, pointer: void const**);

@foreign
func glReplacementCodeuiSUN(code: GLuint);

@foreign
func glReplacementCodeusSUN(code: GLushort);

@foreign
func glReplacementCodeubSUN(code: GLubyte);

@foreign
func glReplacementCodeuivSUN(code: GLuint*);

@foreign
func glReplacementCodeusvSUN(code: GLushort*);

@foreign
func glReplacementCodeubvSUN(code: GLubyte*);

@foreign
func glReplacementCodePointerSUN(type: GLenum, stride: GLsizei, pointer: void const**);

@foreign
typedef PFNGLCOLOR4UBVERTEX2FSUNPROC = func(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat);

@foreign
typedef PFNGLCOLOR4UBVERTEX2FVSUNPROC = func(c: GLubyte*, v: GLfloat*);

@foreign
typedef PFNGLCOLOR4UBVERTEX3FSUNPROC = func(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLCOLOR4UBVERTEX3FVSUNPROC = func(c: GLubyte*, v: GLfloat*);

@foreign
typedef PFNGLCOLOR3FVERTEX3FSUNPROC = func(r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLCOLOR3FVERTEX3FVSUNPROC = func(c: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLNORMAL3FVERTEX3FSUNPROC = func(nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLNORMAL3FVERTEX3FVSUNPROC = func(n: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC = func(r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC = func(c: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLTEXCOORD2FVERTEX3FSUNPROC = func(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLTEXCOORD2FVERTEX3FVSUNPROC = func(tc: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLTEXCOORD4FVERTEX4FSUNPROC = func(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
typedef PFNGLTEXCOORD4FVERTEX4FVSUNPROC = func(tc: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC = func(s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC = func(tc: GLfloat*, c: GLubyte*, v: GLfloat*);

@foreign
typedef PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC = func(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC = func(tc: GLfloat*, c: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC = func(s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = func(tc: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = func(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = func(tc: GLfloat*, c: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC = func(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
typedef PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC = func(tc: GLfloat*, c: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC = func(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC = func(rc: GLuint*, v: GLfloat*);

@foreign
typedef PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC = func(rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC = func(rc: GLuint*, c: GLubyte*, v: GLfloat*);

@foreign
typedef PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC = func(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC = func(rc: GLuint*, c: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC = func(rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC = func(rc: GLuint*, n: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC = func(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC = func(rc: GLuint*, c: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC = func(rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC = func(rc: GLuint*, tc: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC = func(rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = func(rc: GLuint*, tc: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = func(rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
typedef PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = func(rc: GLuint*, tc: GLfloat*, c: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
func glColor4ubVertex2fSUN(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat);

@foreign
func glColor4ubVertex2fvSUN(c: GLubyte*, v: GLfloat*);

@foreign
func glColor4ubVertex3fSUN(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glColor4ubVertex3fvSUN(c: GLubyte*, v: GLfloat*);

@foreign
func glColor3fVertex3fSUN(r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glColor3fVertex3fvSUN(c: GLfloat*, v: GLfloat*);

@foreign
func glNormal3fVertex3fSUN(nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glNormal3fVertex3fvSUN(n: GLfloat*, v: GLfloat*);

@foreign
func glColor4fNormal3fVertex3fSUN(r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glColor4fNormal3fVertex3fvSUN(c: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
func glTexCoord2fVertex3fSUN(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glTexCoord2fVertex3fvSUN(tc: GLfloat*, v: GLfloat*);

@foreign
func glTexCoord4fVertex4fSUN(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glTexCoord4fVertex4fvSUN(tc: GLfloat*, v: GLfloat*);

@foreign
func glTexCoord2fColor4ubVertex3fSUN(s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glTexCoord2fColor4ubVertex3fvSUN(tc: GLfloat*, c: GLubyte*, v: GLfloat*);

@foreign
func glTexCoord2fColor3fVertex3fSUN(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glTexCoord2fColor3fVertex3fvSUN(tc: GLfloat*, c: GLfloat*, v: GLfloat*);

@foreign
func glTexCoord2fNormal3fVertex3fSUN(s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glTexCoord2fNormal3fVertex3fvSUN(tc: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
func glTexCoord2fColor4fNormal3fVertex3fSUN(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glTexCoord2fColor4fNormal3fVertex3fvSUN(tc: GLfloat*, c: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
func glTexCoord4fColor4fNormal3fVertex4fSUN(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);

@foreign
func glTexCoord4fColor4fNormal3fVertex4fvSUN(tc: GLfloat*, c: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
func glReplacementCodeuiVertex3fSUN(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glReplacementCodeuiVertex3fvSUN(rc: GLuint*, v: GLfloat*);

@foreign
func glReplacementCodeuiColor4ubVertex3fSUN(rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glReplacementCodeuiColor4ubVertex3fvSUN(rc: GLuint*, c: GLubyte*, v: GLfloat*);

@foreign
func glReplacementCodeuiColor3fVertex3fSUN(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glReplacementCodeuiColor3fVertex3fvSUN(rc: GLuint*, c: GLfloat*, v: GLfloat*);

@foreign
func glReplacementCodeuiNormal3fVertex3fSUN(rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glReplacementCodeuiNormal3fVertex3fvSUN(rc: GLuint*, n: GLfloat*, v: GLfloat*);

@foreign
func glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc: GLuint*, c: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
func glReplacementCodeuiTexCoord2fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glReplacementCodeuiTexCoord2fVertex3fvSUN(rc: GLuint*, tc: GLfloat*, v: GLfloat*);

@foreign
func glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc: GLuint*, tc: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
func glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);

@foreign
func glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc: GLuint*, tc: GLfloat*, c: GLfloat*, n: GLfloat*, v: GLfloat*);

@foreign
typedef PFNGLCULLFACEPROC = func(mode: GLenum);

@foreign
typedef PFNGLFRONTFACEPROC = func(mode: GLenum);

@foreign
typedef PFNGLHINTPROC = func(target: GLenum, mode: GLenum);

@foreign
typedef PFNGLLINEWIDTHPROC = func(width: GLfloat);

@foreign
typedef PFNGLPOINTSIZEPROC = func(size: GLfloat);

@foreign
typedef PFNGLPOLYGONMODEPROC = func(face: GLenum, mode: GLenum);

@foreign
typedef PFNGLSCISSORPROC = func(x: GLint, y: GLint, width: GLsizei, height: GLsizei);

@foreign
typedef PFNGLTEXPARAMETERFPROC = func(target: GLenum, pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLTEXPARAMETERFVPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLTEXPARAMETERIPROC = func(target: GLenum, pname: GLenum, param: GLint);

@foreign
typedef PFNGLTEXPARAMETERIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLTEXIMAGE1DPROC = func(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLTEXIMAGE2DPROC = func(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void const*);

@foreign
typedef PFNGLDRAWBUFFERPROC = func(buf: GLenum);

@foreign
typedef PFNGLCLEARPROC = func(mask: GLbitfield);

@foreign
typedef PFNGLCLEARCOLORPROC = func(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);

@foreign
typedef PFNGLCLEARSTENCILPROC = func(s: GLint);

@foreign
typedef PFNGLCLEARDEPTHPROC = func(depth: GLdouble);

@foreign
typedef PFNGLSTENCILMASKPROC = func(mask: GLuint);

@foreign
typedef PFNGLCOLORMASKPROC = func(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean);

@foreign
typedef PFNGLDEPTHMASKPROC = func(flag: GLboolean);

@foreign
typedef PFNGLDISABLEPROC = func(cap: GLenum);

@foreign
typedef PFNGLENABLEPROC = func(cap: GLenum);

@foreign
typedef PFNGLFINISHPROC = func();

@foreign
typedef PFNGLFLUSHPROC = func();

@foreign
typedef PFNGLBLENDFUNCPROC = func(sfactor: GLenum, dfactor: GLenum);

@foreign
typedef PFNGLLOGICOPPROC = func(opcode: GLenum);

@foreign
typedef PFNGLSTENCILFUNCPROC = func(fn: GLenum, ref: GLint, mask: GLuint);

@foreign
typedef PFNGLSTENCILOPPROC = func(fail: GLenum, zfail: GLenum, zpass: GLenum);

@foreign
typedef PFNGLDEPTHFUNCPROC = func(fn: GLenum);

@foreign
typedef PFNGLPIXELSTOREFPROC = func(pname: GLenum, param: GLfloat);

@foreign
typedef PFNGLPIXELSTOREIPROC = func(pname: GLenum, param: GLint);

@foreign
typedef PFNGLREADBUFFERPROC = func(src: GLenum);

@foreign
typedef PFNGLREADPIXELSPROC = func(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void*);

@foreign
typedef PFNGLGETBOOLEANVPROC = func(pname: GLenum, data: GLboolean*);

@foreign
typedef PFNGLGETDOUBLEVPROC = func(pname: GLenum, data: GLdouble*);

@foreign
typedef PFNGLGETERRORPROC = func(): GLenum;

@foreign
typedef PFNGLGETFLOATVPROC = func(pname: GLenum, data: GLfloat*);

@foreign
typedef PFNGLGETINTEGERVPROC = func(pname: GLenum, data: GLint*);

@foreign
typedef PFNGLGETSTRINGPROC = func(name: GLenum): GLubyte*;

@foreign
typedef PFNGLGETTEXIMAGEPROC = func(target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: void*);

@foreign
typedef PFNGLGETTEXPARAMETERFVPROC = func(target: GLenum, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETTEXPARAMETERIVPROC = func(target: GLenum, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLGETTEXLEVELPARAMETERFVPROC = func(target: GLenum, level: GLint, pname: GLenum, params: GLfloat*);

@foreign
typedef PFNGLGETTEXLEVELPARAMETERIVPROC = func(target: GLenum, level: GLint, pname: GLenum, params: GLint*);

@foreign
typedef PFNGLISENABLEDPROC = func(cap: GLenum): GLboolean;

@foreign
typedef PFNGLDEPTHRANGEPROC = func(n: GLdouble, f: GLdouble);

@foreign
typedef PFNGLVIEWPORTPROC = func(x: GLint, y: GLint, width: GLsizei, height: GLsizei);

